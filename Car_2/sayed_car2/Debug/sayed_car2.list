
sayed_car2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a7c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001bac  08001bac  00011bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bf4  08001bf4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001bf4  08001bf4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bf4  08001bf4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bf4  08001bf4  00011bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bf8  08001bf8  00011bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000064  08001c60  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08001c60  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001eb8  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ba6  00000000  00000000  00021f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c8  00000000  00000000  00022af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000300  00000000  00000000  00022eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f69  00000000  00000000  000231b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c88  00000000  00000000  00025121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ccaf  00000000  00000000  00026da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00033a58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ffc  00000000  00000000  00033aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	08001b94 	.word	0x08001b94

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	08001b94 	.word	0x08001b94

08000170 <EXTI0_IRQHandler>:
    EXTI_CallBack[Copy_u8Line] = ptr; /*Making the global array hold the ptr value in the line i want*/
}

/*ISR Function i can say its >> (Handler Function for EXTI0 (IRQ >> means (Interrupt Request)))*/
void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    EXTI_CallBack[0](); /*Calling the EXTI_CallBack and calling it means executing it and executing it means executing the next line*/
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4798      	blx	r3
    SET_BIT(EXTI_PR, 0); /*Clearing the pending bit(pending flag) in ISR for EXTI0*/
 800017a:	4b05      	ldr	r3, [pc, #20]	; (8000190 <EXTI0_IRQHandler+0x20>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000180:	f043 0301 	orr.w	r3, r3, #1
 8000184:	6013      	str	r3, [r2, #0]
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	20000080 	.word	0x20000080
 8000190:	40010414 	.word	0x40010414

08000194 <EXTI1_IRQHandler>:

/*ISR Function i can say its >> (Handler Function for EXTI1 (IRQ >> means (Interrupt Request)))*/
void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
    EXTI_CallBack[1](); /*Calling the EXTI_CallBack and calling it means executing it and executing it means executing the next line*/
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4798      	blx	r3
    SET_BIT(EXTI_PR, 1); /*Clearing the pending bit(pending flag) in ISR for EXTI1*/
 800019e:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4a04      	ldr	r2, [pc, #16]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a4:	f043 0302 	orr.w	r3, r3, #2
 80001a8:	6013      	str	r3, [r2, #0]
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000080 	.word	0x20000080
 80001b4:	40010414 	.word	0x40010414

080001b8 <EXTI2_IRQHandler>:

/*ISR Function i can say its >> (Handler Function for EXTI2 (IRQ >> means (Interrupt Request)))*/
void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
    EXTI_CallBack[2](); /*Calling the EXTI_CallBack and calling it means executing it and executing it means executing the next line*/
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	4798      	blx	r3
    SET_BIT(EXTI_PR, 2); /*Clearing the pending bit(pending flag) in ISR for EXTI2*/
 80001c2:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a04      	ldr	r2, [pc, #16]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001c8:	f043 0304 	orr.w	r3, r3, #4
 80001cc:	6013      	str	r3, [r2, #0]
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	20000080 	.word	0x20000080
 80001d8:	40010414 	.word	0x40010414

080001dc <EXTI3_IRQHandler>:

/*ISR Function i can say its >> (Handler Function for EXTI3 (IRQ >> means (Interrupt Request)))*/
void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
    EXTI_CallBack[3](); /*Calling the EXTI_CallBack and calling it means executing it and executing it means executing the next line*/
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	68db      	ldr	r3, [r3, #12]
 80001e4:	4798      	blx	r3
    SET_BIT(EXTI_PR, 3); /*Clearing the pending bit(pending flag) in ISR for EXTI3*/
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a04      	ldr	r2, [pc, #16]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ec:	f043 0308 	orr.w	r3, r3, #8
 80001f0:	6013      	str	r3, [r2, #0]
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000080 	.word	0x20000080
 80001fc:	40010414 	.word	0x40010414

08000200 <EXTI4_IRQHandler>:

/*ISR Function i can say its >> (Handler Function for EXTI4 (IRQ >> means (Interrupt Request)))*/
void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
    EXTI_CallBack[4](); /*Calling the EXTI_CallBack and calling it means executing it and executing it means executing the next line*/
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	691b      	ldr	r3, [r3, #16]
 8000208:	4798      	blx	r3
    SET_BIT(EXTI_PR, 4); /*Clearing the pending bit(pending flag) in ISR for EXTI4*/
 800020a:	4b05      	ldr	r3, [pc, #20]	; (8000220 <EXTI4_IRQHandler+0x20>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a04      	ldr	r2, [pc, #16]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000210:	f043 0310 	orr.w	r3, r3, #16
 8000214:	6013      	str	r3, [r2, #0]
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000080 	.word	0x20000080
 8000220:	40010414 	.word	0x40010414

08000224 <MGPIO_voidSetPinMode>:
#include "GPIO_interface.h"
#include "GPIO_private.h"

/*Function to set the direction*/
void MGPIO_voidSetPinMode(Gpio_PortType Copy_u8Port, Gpio_PinType Copy_u8Pin, u8 Copy_u8Mode)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
 800022e:	460b      	mov	r3, r1
 8000230:	71bb      	strb	r3, [r7, #6]
 8000232:	4613      	mov	r3, r2
 8000234:	717b      	strb	r3, [r7, #5]
    if(Copy_u8Pin <= 15)  /* Check if the pin from 0 to 15 (all pins at the register) */
 8000236:	79bb      	ldrb	r3, [r7, #6]
 8000238:	2b0f      	cmp	r3, #15
 800023a:	f200 80be 	bhi.w	80003ba <MGPIO_voidSetPinMode+0x196>
    {
        switch (Copy_u8Port)  /* Switch to find the port i want */
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	2b02      	cmp	r3, #2
 8000242:	d07a      	beq.n	800033a <MGPIO_voidSetPinMode+0x116>
 8000244:	2b02      	cmp	r3, #2
 8000246:	f300 80b1 	bgt.w	80003ac <MGPIO_voidSetPinMode+0x188>
 800024a:	2b00      	cmp	r3, #0
 800024c:	d002      	beq.n	8000254 <MGPIO_voidSetPinMode+0x30>
 800024e:	2b01      	cmp	r3, #1
 8000250:	d03a      	beq.n	80002c8 <MGPIO_voidSetPinMode+0xa4>
                GPIOC_CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); /* Writing on the register the mode i want */
            }
            break;
        
        default:
            break;
 8000252:	e0ab      	b.n	80003ac <MGPIO_voidSetPinMode+0x188>
            if(Copy_u8Pin <= 7) /* Check if the pin from 0 to 7 (Because it's the CRL (low)) */
 8000254:	79bb      	ldrb	r3, [r7, #6]
 8000256:	2b07      	cmp	r3, #7
 8000258:	d817      	bhi.n	800028a <MGPIO_voidSetPinMode+0x66>
                GPIOA_CRL &= ~((0b1111) << (Copy_u8Pin * 4)); /* RESET the 4 BITS of the pin before using to make sure there is nothing on it*/
 800025a:	4b5a      	ldr	r3, [pc, #360]	; (80003c4 <MGPIO_voidSetPinMode+0x1a0>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	79ba      	ldrb	r2, [r7, #6]
 8000260:	0092      	lsls	r2, r2, #2
 8000262:	210f      	movs	r1, #15
 8000264:	fa01 f202 	lsl.w	r2, r1, r2
 8000268:	43d2      	mvns	r2, r2
 800026a:	4611      	mov	r1, r2
 800026c:	4a55      	ldr	r2, [pc, #340]	; (80003c4 <MGPIO_voidSetPinMode+0x1a0>)
 800026e:	400b      	ands	r3, r1
 8000270:	6013      	str	r3, [r2, #0]
                GPIOA_CRL |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); /* Writing on the register the mode i want */
 8000272:	4b54      	ldr	r3, [pc, #336]	; (80003c4 <MGPIO_voidSetPinMode+0x1a0>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	7979      	ldrb	r1, [r7, #5]
 8000278:	79ba      	ldrb	r2, [r7, #6]
 800027a:	0092      	lsls	r2, r2, #2
 800027c:	fa01 f202 	lsl.w	r2, r1, r2
 8000280:	4611      	mov	r1, r2
 8000282:	4a50      	ldr	r2, [pc, #320]	; (80003c4 <MGPIO_voidSetPinMode+0x1a0>)
 8000284:	430b      	orrs	r3, r1
 8000286:	6013      	str	r3, [r2, #0]
            break;
 8000288:	e092      	b.n	80003b0 <MGPIO_voidSetPinMode+0x18c>
            else if(Copy_u8Pin <= 15) /* Check if the pin from 8 to 15 (Because it's the CRH (High)) */
 800028a:	79bb      	ldrb	r3, [r7, #6]
 800028c:	2b0f      	cmp	r3, #15
 800028e:	f200 808f 	bhi.w	80003b0 <MGPIO_voidSetPinMode+0x18c>
                Copy_u8Pin -= 8; /* to make sure it will write at the right pin because if i say (15*4 = 60) so i did that to make sure it's right */
 8000292:	79bb      	ldrb	r3, [r7, #6]
 8000294:	3b08      	subs	r3, #8
 8000296:	71bb      	strb	r3, [r7, #6]
                GPIOA_CRH &= ~((0b1111) << (Copy_u8Pin * 4)); /* RESET the 4 BITS of the pin before using to make sure there is nothing on it*/
 8000298:	4b4b      	ldr	r3, [pc, #300]	; (80003c8 <MGPIO_voidSetPinMode+0x1a4>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	79ba      	ldrb	r2, [r7, #6]
 800029e:	0092      	lsls	r2, r2, #2
 80002a0:	210f      	movs	r1, #15
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	43d2      	mvns	r2, r2
 80002a8:	4611      	mov	r1, r2
 80002aa:	4a47      	ldr	r2, [pc, #284]	; (80003c8 <MGPIO_voidSetPinMode+0x1a4>)
 80002ac:	400b      	ands	r3, r1
 80002ae:	6013      	str	r3, [r2, #0]
                GPIOA_CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); /* Writing on the register the mode i want */
 80002b0:	4b45      	ldr	r3, [pc, #276]	; (80003c8 <MGPIO_voidSetPinMode+0x1a4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	7979      	ldrb	r1, [r7, #5]
 80002b6:	79ba      	ldrb	r2, [r7, #6]
 80002b8:	0092      	lsls	r2, r2, #2
 80002ba:	fa01 f202 	lsl.w	r2, r1, r2
 80002be:	4611      	mov	r1, r2
 80002c0:	4a41      	ldr	r2, [pc, #260]	; (80003c8 <MGPIO_voidSetPinMode+0x1a4>)
 80002c2:	430b      	orrs	r3, r1
 80002c4:	6013      	str	r3, [r2, #0]
            break;
 80002c6:	e073      	b.n	80003b0 <MGPIO_voidSetPinMode+0x18c>
            if(Copy_u8Pin <= 7) /* Check if the pin from 0 to 7 (Because it's the CRL (low)) */
 80002c8:	79bb      	ldrb	r3, [r7, #6]
 80002ca:	2b07      	cmp	r3, #7
 80002cc:	d817      	bhi.n	80002fe <MGPIO_voidSetPinMode+0xda>
                GPIOB_CRL &= ~((0b1111) << (Copy_u8Pin * 4)); /* RESET the 4 BITS of the pin before using to make sure there is nothing on it*/
 80002ce:	4b3f      	ldr	r3, [pc, #252]	; (80003cc <MGPIO_voidSetPinMode+0x1a8>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	79ba      	ldrb	r2, [r7, #6]
 80002d4:	0092      	lsls	r2, r2, #2
 80002d6:	210f      	movs	r1, #15
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	43d2      	mvns	r2, r2
 80002de:	4611      	mov	r1, r2
 80002e0:	4a3a      	ldr	r2, [pc, #232]	; (80003cc <MGPIO_voidSetPinMode+0x1a8>)
 80002e2:	400b      	ands	r3, r1
 80002e4:	6013      	str	r3, [r2, #0]
                GPIOB_CRL |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); /* Writing on the register the mode i want */
 80002e6:	4b39      	ldr	r3, [pc, #228]	; (80003cc <MGPIO_voidSetPinMode+0x1a8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	7979      	ldrb	r1, [r7, #5]
 80002ec:	79ba      	ldrb	r2, [r7, #6]
 80002ee:	0092      	lsls	r2, r2, #2
 80002f0:	fa01 f202 	lsl.w	r2, r1, r2
 80002f4:	4611      	mov	r1, r2
 80002f6:	4a35      	ldr	r2, [pc, #212]	; (80003cc <MGPIO_voidSetPinMode+0x1a8>)
 80002f8:	430b      	orrs	r3, r1
 80002fa:	6013      	str	r3, [r2, #0]
            break;
 80002fc:	e05a      	b.n	80003b4 <MGPIO_voidSetPinMode+0x190>
            else if(Copy_u8Pin <= 15) /* Check if the pin from 8 to 15 (Because it's the CRH (High)) */
 80002fe:	79bb      	ldrb	r3, [r7, #6]
 8000300:	2b0f      	cmp	r3, #15
 8000302:	d857      	bhi.n	80003b4 <MGPIO_voidSetPinMode+0x190>
                Copy_u8Pin -= 8; /* to make sure it will write at the right pin because if i say (15*4 = 60) so i did that to make sure it's right */
 8000304:	79bb      	ldrb	r3, [r7, #6]
 8000306:	3b08      	subs	r3, #8
 8000308:	71bb      	strb	r3, [r7, #6]
                GPIOB_CRH &= ~((0b1111) << (Copy_u8Pin * 4)); /* RESET the 4 BITS of the pin before using to make sure there is nothing on it*/
 800030a:	4b31      	ldr	r3, [pc, #196]	; (80003d0 <MGPIO_voidSetPinMode+0x1ac>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	79ba      	ldrb	r2, [r7, #6]
 8000310:	0092      	lsls	r2, r2, #2
 8000312:	210f      	movs	r1, #15
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	43d2      	mvns	r2, r2
 800031a:	4611      	mov	r1, r2
 800031c:	4a2c      	ldr	r2, [pc, #176]	; (80003d0 <MGPIO_voidSetPinMode+0x1ac>)
 800031e:	400b      	ands	r3, r1
 8000320:	6013      	str	r3, [r2, #0]
                GPIOB_CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); /* Writing on the register the mode i want */
 8000322:	4b2b      	ldr	r3, [pc, #172]	; (80003d0 <MGPIO_voidSetPinMode+0x1ac>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	7979      	ldrb	r1, [r7, #5]
 8000328:	79ba      	ldrb	r2, [r7, #6]
 800032a:	0092      	lsls	r2, r2, #2
 800032c:	fa01 f202 	lsl.w	r2, r1, r2
 8000330:	4611      	mov	r1, r2
 8000332:	4a27      	ldr	r2, [pc, #156]	; (80003d0 <MGPIO_voidSetPinMode+0x1ac>)
 8000334:	430b      	orrs	r3, r1
 8000336:	6013      	str	r3, [r2, #0]
            break;
 8000338:	e03c      	b.n	80003b4 <MGPIO_voidSetPinMode+0x190>
            if(Copy_u8Pin <= 7) /* Check if the pin from 0 to 7 (Because it's the CRL (low)) */
 800033a:	79bb      	ldrb	r3, [r7, #6]
 800033c:	2b07      	cmp	r3, #7
 800033e:	d817      	bhi.n	8000370 <MGPIO_voidSetPinMode+0x14c>
                GPIOC_CRL &= ~((0b1111) << (Copy_u8Pin * 4)); /* RESET the 4 BITS of the pin before using to make sure there is nothing on it*/
 8000340:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <MGPIO_voidSetPinMode+0x1b0>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	79ba      	ldrb	r2, [r7, #6]
 8000346:	0092      	lsls	r2, r2, #2
 8000348:	210f      	movs	r1, #15
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	43d2      	mvns	r2, r2
 8000350:	4611      	mov	r1, r2
 8000352:	4a20      	ldr	r2, [pc, #128]	; (80003d4 <MGPIO_voidSetPinMode+0x1b0>)
 8000354:	400b      	ands	r3, r1
 8000356:	6013      	str	r3, [r2, #0]
                GPIOC_CRL |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); /* Writing on the register the mode i want */
 8000358:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <MGPIO_voidSetPinMode+0x1b0>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	7979      	ldrb	r1, [r7, #5]
 800035e:	79ba      	ldrb	r2, [r7, #6]
 8000360:	0092      	lsls	r2, r2, #2
 8000362:	fa01 f202 	lsl.w	r2, r1, r2
 8000366:	4611      	mov	r1, r2
 8000368:	4a1a      	ldr	r2, [pc, #104]	; (80003d4 <MGPIO_voidSetPinMode+0x1b0>)
 800036a:	430b      	orrs	r3, r1
 800036c:	6013      	str	r3, [r2, #0]
            break;
 800036e:	e023      	b.n	80003b8 <MGPIO_voidSetPinMode+0x194>
            else if(Copy_u8Pin <= 15) /* Check if the pin from 8 to 15 (Because it's the CRH (High)) */
 8000370:	79bb      	ldrb	r3, [r7, #6]
 8000372:	2b0f      	cmp	r3, #15
 8000374:	d820      	bhi.n	80003b8 <MGPIO_voidSetPinMode+0x194>
                Copy_u8Pin -= 8; /* to make sure it will write at the right pin because if i say (15*4 = 60) so i did that to make sure it's right */
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	3b08      	subs	r3, #8
 800037a:	71bb      	strb	r3, [r7, #6]
                GPIOC_CRH &= ~((0b1111) << (Copy_u8Pin * 4)); /* RESET the 4 BITS of the pin before using to make sure there is nothing on it*/
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <MGPIO_voidSetPinMode+0x1b4>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	79ba      	ldrb	r2, [r7, #6]
 8000382:	0092      	lsls	r2, r2, #2
 8000384:	210f      	movs	r1, #15
 8000386:	fa01 f202 	lsl.w	r2, r1, r2
 800038a:	43d2      	mvns	r2, r2
 800038c:	4611      	mov	r1, r2
 800038e:	4a12      	ldr	r2, [pc, #72]	; (80003d8 <MGPIO_voidSetPinMode+0x1b4>)
 8000390:	400b      	ands	r3, r1
 8000392:	6013      	str	r3, [r2, #0]
                GPIOC_CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); /* Writing on the register the mode i want */
 8000394:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <MGPIO_voidSetPinMode+0x1b4>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	7979      	ldrb	r1, [r7, #5]
 800039a:	79ba      	ldrb	r2, [r7, #6]
 800039c:	0092      	lsls	r2, r2, #2
 800039e:	fa01 f202 	lsl.w	r2, r1, r2
 80003a2:	4611      	mov	r1, r2
 80003a4:	4a0c      	ldr	r2, [pc, #48]	; (80003d8 <MGPIO_voidSetPinMode+0x1b4>)
 80003a6:	430b      	orrs	r3, r1
 80003a8:	6013      	str	r3, [r2, #0]
            break;
 80003aa:	e005      	b.n	80003b8 <MGPIO_voidSetPinMode+0x194>
            break;
 80003ac:	bf00      	nop
 80003ae:	e004      	b.n	80003ba <MGPIO_voidSetPinMode+0x196>
            break;
 80003b0:	bf00      	nop
 80003b2:	e002      	b.n	80003ba <MGPIO_voidSetPinMode+0x196>
            break;
 80003b4:	bf00      	nop
 80003b6:	e000      	b.n	80003ba <MGPIO_voidSetPinMode+0x196>
            break;
 80003b8:	bf00      	nop
    }
    else
    {
        /* Invalid pin number error */
    }
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	40010800 	.word	0x40010800
 80003c8:	40010804 	.word	0x40010804
 80003cc:	40010c00 	.word	0x40010c00
 80003d0:	40010c04 	.word	0x40010c04
 80003d4:	40011000 	.word	0x40011000
 80003d8:	40011004 	.word	0x40011004

080003dc <MGPIO_voidSetPinValue>:

void MGPIO_voidSetPinValue(Gpio_PortType Copy_u8Port, Gpio_PinType Copy_u8Pin, Gpio_ValueType Copy_u8Value)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
 80003e6:	460b      	mov	r3, r1
 80003e8:	71bb      	strb	r3, [r7, #6]
 80003ea:	4613      	mov	r3, r2
 80003ec:	717b      	strb	r3, [r7, #5]
    if(Copy_u8Pin <= 15)  /* Check if the pin from 0 to 15 (all pins at the register) */
 80003ee:	79bb      	ldrb	r3, [r7, #6]
 80003f0:	2b0f      	cmp	r3, #15
 80003f2:	d867      	bhi.n	80004c4 <MGPIO_voidSetPinValue+0xe8>
    {
        switch (Copy_u8Port)  /* Switch to find the port i want */
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	2b02      	cmp	r3, #2
 80003f8:	d040      	beq.n	800047c <MGPIO_voidSetPinValue+0xa0>
 80003fa:	2b02      	cmp	r3, #2
 80003fc:	dc5b      	bgt.n	80004b6 <MGPIO_voidSetPinValue+0xda>
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d002      	beq.n	8000408 <MGPIO_voidSetPinValue+0x2c>
 8000402:	2b01      	cmp	r3, #1
 8000404:	d01d      	beq.n	8000442 <MGPIO_voidSetPinValue+0x66>
                CLR_BIT(GPIOC_ODR, Copy_u8Pin); /* Clearing the pin */
            }
            break;
        
        default:
            break;
 8000406:	e056      	b.n	80004b6 <MGPIO_voidSetPinValue+0xda>
            if(Copy_u8Value == GPIO_HIGH) /* Check if the pin value HIGI */
 8000408:	797b      	ldrb	r3, [r7, #5]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d10a      	bne.n	8000424 <MGPIO_voidSetPinValue+0x48>
                SET_BIT(GPIOA_ODR, Copy_u8Pin); /* Setting the pin */
 800040e:	4b30      	ldr	r3, [pc, #192]	; (80004d0 <MGPIO_voidSetPinValue+0xf4>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	79ba      	ldrb	r2, [r7, #6]
 8000414:	2101      	movs	r1, #1
 8000416:	fa01 f202 	lsl.w	r2, r1, r2
 800041a:	4611      	mov	r1, r2
 800041c:	4a2c      	ldr	r2, [pc, #176]	; (80004d0 <MGPIO_voidSetPinValue+0xf4>)
 800041e:	430b      	orrs	r3, r1
 8000420:	6013      	str	r3, [r2, #0]
            break;
 8000422:	e04a      	b.n	80004ba <MGPIO_voidSetPinValue+0xde>
            else if(Copy_u8Value == GPIO_LOW) /* Check if the pin value LOW */
 8000424:	797b      	ldrb	r3, [r7, #5]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d147      	bne.n	80004ba <MGPIO_voidSetPinValue+0xde>
                CLR_BIT(GPIOA_ODR, Copy_u8Pin); /* Clearing the pin */
 800042a:	4b29      	ldr	r3, [pc, #164]	; (80004d0 <MGPIO_voidSetPinValue+0xf4>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	79ba      	ldrb	r2, [r7, #6]
 8000430:	2101      	movs	r1, #1
 8000432:	fa01 f202 	lsl.w	r2, r1, r2
 8000436:	43d2      	mvns	r2, r2
 8000438:	4611      	mov	r1, r2
 800043a:	4a25      	ldr	r2, [pc, #148]	; (80004d0 <MGPIO_voidSetPinValue+0xf4>)
 800043c:	400b      	ands	r3, r1
 800043e:	6013      	str	r3, [r2, #0]
            break;
 8000440:	e03b      	b.n	80004ba <MGPIO_voidSetPinValue+0xde>
            if(Copy_u8Value == GPIO_HIGH) /* Check if the pin value HIGI */
 8000442:	797b      	ldrb	r3, [r7, #5]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d10a      	bne.n	800045e <MGPIO_voidSetPinValue+0x82>
                SET_BIT(GPIOB_ODR, Copy_u8Pin); /* Setting the pin */
 8000448:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <MGPIO_voidSetPinValue+0xf8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	79ba      	ldrb	r2, [r7, #6]
 800044e:	2101      	movs	r1, #1
 8000450:	fa01 f202 	lsl.w	r2, r1, r2
 8000454:	4611      	mov	r1, r2
 8000456:	4a1f      	ldr	r2, [pc, #124]	; (80004d4 <MGPIO_voidSetPinValue+0xf8>)
 8000458:	430b      	orrs	r3, r1
 800045a:	6013      	str	r3, [r2, #0]
            break;
 800045c:	e02f      	b.n	80004be <MGPIO_voidSetPinValue+0xe2>
            else if(Copy_u8Value == GPIO_LOW) /* Check if the pin value LOW */
 800045e:	797b      	ldrb	r3, [r7, #5]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d12c      	bne.n	80004be <MGPIO_voidSetPinValue+0xe2>
                CLR_BIT(GPIOB_ODR, Copy_u8Pin); /* Clearing the pin */
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <MGPIO_voidSetPinValue+0xf8>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	79ba      	ldrb	r2, [r7, #6]
 800046a:	2101      	movs	r1, #1
 800046c:	fa01 f202 	lsl.w	r2, r1, r2
 8000470:	43d2      	mvns	r2, r2
 8000472:	4611      	mov	r1, r2
 8000474:	4a17      	ldr	r2, [pc, #92]	; (80004d4 <MGPIO_voidSetPinValue+0xf8>)
 8000476:	400b      	ands	r3, r1
 8000478:	6013      	str	r3, [r2, #0]
            break;
 800047a:	e020      	b.n	80004be <MGPIO_voidSetPinValue+0xe2>
            if(Copy_u8Value == GPIO_HIGH) /* Check if the pin value HIGI */
 800047c:	797b      	ldrb	r3, [r7, #5]
 800047e:	2b01      	cmp	r3, #1
 8000480:	d10a      	bne.n	8000498 <MGPIO_voidSetPinValue+0xbc>
                SET_BIT(GPIOC_ODR, Copy_u8Pin); /* Setting the pin */
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MGPIO_voidSetPinValue+0xfc>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	79ba      	ldrb	r2, [r7, #6]
 8000488:	2101      	movs	r1, #1
 800048a:	fa01 f202 	lsl.w	r2, r1, r2
 800048e:	4611      	mov	r1, r2
 8000490:	4a11      	ldr	r2, [pc, #68]	; (80004d8 <MGPIO_voidSetPinValue+0xfc>)
 8000492:	430b      	orrs	r3, r1
 8000494:	6013      	str	r3, [r2, #0]
            break;
 8000496:	e014      	b.n	80004c2 <MGPIO_voidSetPinValue+0xe6>
            else if(Copy_u8Value == GPIO_LOW) /* Check if the pin value LOW */
 8000498:	797b      	ldrb	r3, [r7, #5]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d111      	bne.n	80004c2 <MGPIO_voidSetPinValue+0xe6>
                CLR_BIT(GPIOC_ODR, Copy_u8Pin); /* Clearing the pin */
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MGPIO_voidSetPinValue+0xfc>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	79ba      	ldrb	r2, [r7, #6]
 80004a4:	2101      	movs	r1, #1
 80004a6:	fa01 f202 	lsl.w	r2, r1, r2
 80004aa:	43d2      	mvns	r2, r2
 80004ac:	4611      	mov	r1, r2
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <MGPIO_voidSetPinValue+0xfc>)
 80004b0:	400b      	ands	r3, r1
 80004b2:	6013      	str	r3, [r2, #0]
            break;
 80004b4:	e005      	b.n	80004c2 <MGPIO_voidSetPinValue+0xe6>
            break;
 80004b6:	bf00      	nop
 80004b8:	e004      	b.n	80004c4 <MGPIO_voidSetPinValue+0xe8>
            break;
 80004ba:	bf00      	nop
 80004bc:	e002      	b.n	80004c4 <MGPIO_voidSetPinValue+0xe8>
            break;
 80004be:	bf00      	nop
 80004c0:	e000      	b.n	80004c4 <MGPIO_voidSetPinValue+0xe8>
            break;
 80004c2:	bf00      	nop
    }
    else
    {
        /* Invalid pin number error */
    }
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	4001080c 	.word	0x4001080c
 80004d4:	40010c0c 	.word	0x40010c0c
 80004d8:	4001100c 	.word	0x4001100c

080004dc <HLCD_voidSendCmd>:
#include "GPIO_interface.h"
#include "LCD_conf.h"
#include "LCD_private.h"

void HLCD_voidSendCmd(u8 A_u8CmdID)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
	/*iterator for for loop*/
	u8 L_u8Iterator = 0 ;
 80004e6:	2300      	movs	r3, #0
 80004e8:	77fb      	strb	r3, [r7, #31]
	    ARM_DELAY (2) ;
	
	#elif MODE == FOUR_BIT_CONNECTION
	
	    /**set read/write to low */
	    MGPIO_voidSetPinValue  (LCD_RW_PORT , LCD_RW_PIN , GPIO_LOW) ;
 80004ea:	2200      	movs	r2, #0
 80004ec:	210f      	movs	r1, #15
 80004ee:	2002      	movs	r0, #2
 80004f0:	f7ff ff74 	bl	80003dc <MGPIO_voidSetPinValue>
	    
	    /**send last four bits of data to last four bit at control register */
	    for (L_u8Iterator = 0 ; L_u8Iterator < 4 ; L_u8Iterator ++)
 80004f4:	2300      	movs	r3, #0
 80004f6:	77fb      	strb	r3, [r7, #31]
 80004f8:	e012      	b.n	8000520 <HLCD_voidSendCmd+0x44>
	    {
	    	MGPIO_voidSetPinValue (LCD_DATA_PORT                    ,
	    			               LCD_START_PIN + L_u8Iterator     ,
 80004fa:	7ffb      	ldrb	r3, [r7, #31]
 80004fc:	3303      	adds	r3, #3
 80004fe:	b2d9      	uxtb	r1, r3
	    					       GET_BIT(A_u8CmdID , (L_u8Iterator + 4)));
 8000500:	79fa      	ldrb	r2, [r7, #7]
 8000502:	7ffb      	ldrb	r3, [r7, #31]
 8000504:	3304      	adds	r3, #4
 8000506:	fa42 f303 	asr.w	r3, r2, r3
 800050a:	b2db      	uxtb	r3, r3
 800050c:	f003 0301 	and.w	r3, r3, #1
 8000510:	b2db      	uxtb	r3, r3
	    	MGPIO_voidSetPinValue (LCD_DATA_PORT                    ,
 8000512:	461a      	mov	r2, r3
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff ff61 	bl	80003dc <MGPIO_voidSetPinValue>
	    for (L_u8Iterator = 0 ; L_u8Iterator < 4 ; L_u8Iterator ++)
 800051a:	7ffb      	ldrb	r3, [r7, #31]
 800051c:	3301      	adds	r3, #1
 800051e:	77fb      	strb	r3, [r7, #31]
 8000520:	7ffb      	ldrb	r3, [r7, #31]
 8000522:	2b03      	cmp	r3, #3
 8000524:	d9e9      	bls.n	80004fa <HLCD_voidSendCmd+0x1e>
	    }
	    
	    /**set register select to low */
	    MGPIO_voidSetPinValue (LCD_RS_PORT , LCD_RS_PIN , GPIO_LOW) ;
 8000526:	2200      	movs	r2, #0
 8000528:	210d      	movs	r1, #13
 800052a:	2002      	movs	r0, #2
 800052c:	f7ff ff56 	bl	80003dc <MGPIO_voidSetPinValue>
	    
	    /**set enable to high */
	    MGPIO_voidSetPinValue  (LCD_EN_PORT , LCD_EN_PIN , GPIO_HIGH) ;
 8000530:	2201      	movs	r2, #1
 8000532:	210e      	movs	r1, #14
 8000534:	2002      	movs	r0, #2
 8000536:	f7ff ff51 	bl	80003dc <MGPIO_voidSetPinValue>

	    /* Wait for E to settle */
	    ARM_DELAY (2) ;
 800053a:	f242 7310 	movw	r3, #10000	; 0x2710
 800053e:	61bb      	str	r3, [r7, #24]
 8000540:	e000      	b.n	8000544 <HLCD_voidSendCmd+0x68>
 8000542:	bf00      	nop
 8000544:	69bb      	ldr	r3, [r7, #24]
 8000546:	1e5a      	subs	r2, r3, #1
 8000548:	61ba      	str	r2, [r7, #24]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1f9      	bne.n	8000542 <HLCD_voidSendCmd+0x66>
	    
	    /**set enable to low */
	    MGPIO_voidSetPinValue  (LCD_EN_PORT , LCD_EN_PIN , GPIO_LOW) ;
 800054e:	2200      	movs	r2, #0
 8000550:	210e      	movs	r1, #14
 8000552:	2002      	movs	r0, #2
 8000554:	f7ff ff42 	bl	80003dc <MGPIO_voidSetPinValue>
	    
	    /* Wait for E to settle */
	    ARM_DELAY (2) ;
 8000558:	f242 7310 	movw	r3, #10000	; 0x2710
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	e000      	b.n	8000562 <HLCD_voidSendCmd+0x86>
 8000560:	bf00      	nop
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	1e5a      	subs	r2, r3, #1
 8000566:	617a      	str	r2, [r7, #20]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d1f9      	bne.n	8000560 <HLCD_voidSendCmd+0x84>
	    
	    
	    /**set read/write to low */
	    MGPIO_voidSetPinValue  (LCD_RW_PORT , LCD_RW_PIN , GPIO_LOW) ;
 800056c:	2200      	movs	r2, #0
 800056e:	210f      	movs	r1, #15
 8000570:	2002      	movs	r0, #2
 8000572:	f7ff ff33 	bl	80003dc <MGPIO_voidSetPinValue>
	    
	    /**send last four bits of data to last four bit at control register */
	    for (L_u8Iterator = 0 ; L_u8Iterator < 8 ; L_u8Iterator ++)
 8000576:	2300      	movs	r3, #0
 8000578:	77fb      	strb	r3, [r7, #31]
 800057a:	e011      	b.n	80005a0 <HLCD_voidSendCmd+0xc4>
	    {
	    	MGPIO_voidSetPinValue (LCD_DATA_PORT                       ,
	    			               LCD_START_PIN + L_u8Iterator        ,
 800057c:	7ffb      	ldrb	r3, [r7, #31]
 800057e:	3303      	adds	r3, #3
 8000580:	b2d9      	uxtb	r1, r3
	    					       GET_BIT((A_u8CmdID) , L_u8Iterator)) ;
 8000582:	79fa      	ldrb	r2, [r7, #7]
 8000584:	7ffb      	ldrb	r3, [r7, #31]
 8000586:	fa42 f303 	asr.w	r3, r2, r3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	b2db      	uxtb	r3, r3
	    	MGPIO_voidSetPinValue (LCD_DATA_PORT                       ,
 8000592:	461a      	mov	r2, r3
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff ff21 	bl	80003dc <MGPIO_voidSetPinValue>
	    for (L_u8Iterator = 0 ; L_u8Iterator < 8 ; L_u8Iterator ++)
 800059a:	7ffb      	ldrb	r3, [r7, #31]
 800059c:	3301      	adds	r3, #1
 800059e:	77fb      	strb	r3, [r7, #31]
 80005a0:	7ffb      	ldrb	r3, [r7, #31]
 80005a2:	2b07      	cmp	r3, #7
 80005a4:	d9ea      	bls.n	800057c <HLCD_voidSendCmd+0xa0>
	    }
	    
	    /**set register select to low */
	    MGPIO_voidSetPinValue (LCD_RS_PORT , LCD_RS_PIN , GPIO_LOW) ;
 80005a6:	2200      	movs	r2, #0
 80005a8:	210d      	movs	r1, #13
 80005aa:	2002      	movs	r0, #2
 80005ac:	f7ff ff16 	bl	80003dc <MGPIO_voidSetPinValue>
	    
	    /**set enable to high */
	    MGPIO_voidSetPinValue  (LCD_EN_PORT , LCD_EN_PIN , GPIO_HIGH) ;
 80005b0:	2201      	movs	r2, #1
 80005b2:	210e      	movs	r1, #14
 80005b4:	2002      	movs	r0, #2
 80005b6:	f7ff ff11 	bl	80003dc <MGPIO_voidSetPinValue>
	    
	    /* Wait for E to settle */
	    ARM_DELAY (2) ;
 80005ba:	f242 7310 	movw	r3, #10000	; 0x2710
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	e000      	b.n	80005c4 <HLCD_voidSendCmd+0xe8>
 80005c2:	bf00      	nop
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	1e5a      	subs	r2, r3, #1
 80005c8:	613a      	str	r2, [r7, #16]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1f9      	bne.n	80005c2 <HLCD_voidSendCmd+0xe6>
	    
	    /**set enable to low */
	    MGPIO_voidSetPinValue  (LCD_EN_PORT , LCD_EN_PIN , GPIO_LOW) ;
 80005ce:	2200      	movs	r2, #0
 80005d0:	210e      	movs	r1, #14
 80005d2:	2002      	movs	r0, #2
 80005d4:	f7ff ff02 	bl	80003dc <MGPIO_voidSetPinValue>
	    
	    /* Wait for E to settle */
	    ARM_DELAY (2) ;
 80005d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	e000      	b.n	80005e2 <HLCD_voidSendCmd+0x106>
 80005e0:	bf00      	nop
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	1e5a      	subs	r2, r3, #1
 80005e6:	60fa      	str	r2, [r7, #12]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1f9      	bne.n	80005e0 <HLCD_voidSendCmd+0x104>
	    #else
	         #error "select write mode"
	    #endif
	    ARM_DELAY(1) ;
 80005ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	e000      	b.n	80005f6 <HLCD_voidSendCmd+0x11a>
 80005f4:	bf00      	nop
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	1e5a      	subs	r2, r3, #1
 80005fa:	60ba      	str	r2, [r7, #8]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1f9      	bne.n	80005f4 <HLCD_voidSendCmd+0x118>
}
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	3720      	adds	r7, #32
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <HLCD_voidInit>:
          #error "for GPIO_PORTA PINS 13 , 14 , 15 are forbidden"
      #endif
#endif

void HLCD_voidInit(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0
	/*iterator for for loop*/
	u8 L_u8Iterator = 0 ;
 8000610:	2300      	movs	r3, #0
 8000612:	71fb      	strb	r3, [r7, #7]
		/* Wait for command to settle */
	   // ARM_DELAY (2) ;
		
	#elif MODE == FOUR_BIT_CONNECTION
	    /** set direction of PORT data to be output */
	    for (L_u8Iterator = 0 ; L_u8Iterator < 4 ; L_u8Iterator ++)
 8000614:	2300      	movs	r3, #0
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	e00a      	b.n	8000630 <HLCD_voidInit+0x26>
	    {

	    	MGPIO_voidSetPinMode  ( LCD_DATA_PORT , LCD_START_PIN + L_u8Iterator , OUTPUT_SPEED_10MHZ_PP  );
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	3303      	adds	r3, #3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2201      	movs	r2, #1
 8000622:	4619      	mov	r1, r3
 8000624:	2000      	movs	r0, #0
 8000626:	f7ff fdfd 	bl	8000224 <MGPIO_voidSetPinMode>
	    for (L_u8Iterator = 0 ; L_u8Iterator < 4 ; L_u8Iterator ++)
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	3301      	adds	r3, #1
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b03      	cmp	r3, #3
 8000634:	d9f1      	bls.n	800061a <HLCD_voidInit+0x10>
	    }
		
		/** set direction of register select to be output */
	    MGPIO_voidSetPinMode  ( LCD_RS_PORT , LCD_RS_PIN , OUTPUT_SPEED_10MHZ_PP  );
 8000636:	2201      	movs	r2, #1
 8000638:	210d      	movs	r1, #13
 800063a:	2002      	movs	r0, #2
 800063c:	f7ff fdf2 	bl	8000224 <MGPIO_voidSetPinMode>

		/** set direction of Enable pin to be output */
	    MGPIO_voidSetPinMode  ( LCD_EN_PORT , LCD_EN_PIN , OUTPUT_SPEED_10MHZ_PP  );
 8000640:	2201      	movs	r2, #1
 8000642:	210e      	movs	r1, #14
 8000644:	2002      	movs	r0, #2
 8000646:	f7ff fded 	bl	8000224 <MGPIO_voidSetPinMode>

		/** set direction of read/write pin to be output */
	    MGPIO_voidSetPinMode  ( LCD_RW_PORT , LCD_RW_PIN , OUTPUT_SPEED_10MHZ_PP  );
 800064a:	2201      	movs	r2, #1
 800064c:	210f      	movs	r1, #15
 800064e:	2002      	movs	r0, #2
 8000650:	f7ff fde8 	bl	8000224 <MGPIO_voidSetPinMode>

	    /** Return home*/
	    HLCD_voidSendCmd (CMD_RETURN_HOME) ;
 8000654:	2002      	movs	r0, #2
 8000656:	f7ff ff41 	bl	80004dc <HLCD_voidSendCmd>
		
		/* Wait for command to settle */
	   // ARM_DELAY (10) ;
	    
	    /** function set */
	    HLCD_voidSendCmd (FOUR_BIT_CONNECTION) ;
 800065a:	2028      	movs	r0, #40	; 0x28
 800065c:	f7ff ff3e 	bl	80004dc <HLCD_voidSendCmd>
		
		///* Wait for command to settle */
	   // ARM_DELAY (1) ;
	    
	    /** Display ON/OFF Control */
	    HLCD_voidSendCmd (CMD_CURSOR_On_DISPLAY_ON) ;
 8000660:	200e      	movs	r0, #14
 8000662:	f7ff ff3b 	bl	80004dc <HLCD_voidSendCmd>
		
		/* Wait for command to settle */
	   // ARM_DELAY (1) ;
	    
	    /** Display Clear */
	    HLCD_voidSendCmd (CMD_CLEAR) ;
 8000666:	2001      	movs	r0, #1
 8000668:	f7ff ff38 	bl	80004dc <HLCD_voidSendCmd>
		
		/* Wait for command to settle */
	    //ARM_DELAY (10) ;
	    
	    /** Entry mode set */
	    HLCD_voidSendCmd (CMD_ENTRY_MODE) ;
 800066c:	2006      	movs	r0, #6
 800066e:	f7ff ff35 	bl	80004dc <HLCD_voidSendCmd>
		/* Wait for command to settle */
	    //ARM_DELAY (1) ;
	#else 
		#error "selecct right mode"
	#endif
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <HLCD_voidSendData>:
void HLCD_voidSendData(u8 A_u8Char)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b084      	sub	sp, #16
 800067e:	af00      	add	r7, sp, #0
 8000680:	4603      	mov	r3, r0
 8000682:	71fb      	strb	r3, [r7, #7]
	/*iterator for for loop*/
	u8 L_u8Iterator = 0 ;
 8000684:	2300      	movs	r3, #0
 8000686:	73fb      	strb	r3, [r7, #15]
		/* Wait for E to settle */
		//ARM_DELAY (2) ;
	
	#elif MODE == FOUR_BIT_CONNECTION
	    /**set read/write to low */
		MGPIO_voidSetPinValue  (LCD_RW_PORT , LCD_RW_PIN , GPIO_LOW) ;
 8000688:	2200      	movs	r2, #0
 800068a:	210f      	movs	r1, #15
 800068c:	2002      	movs	r0, #2
 800068e:	f7ff fea5 	bl	80003dc <MGPIO_voidSetPinValue>

	    /**send last four bits of data to last four bit at control register */
	    for (L_u8Iterator = 0 ; L_u8Iterator < 4 ; L_u8Iterator ++)
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
 8000696:	e012      	b.n	80006be <HLCD_voidSendData+0x44>
	    {
	    	MGPIO_voidSetPinValue (LCD_DATA_PORT                           ,
	    			               LCD_START_PIN + L_u8Iterator            ,
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	3303      	adds	r3, #3
 800069c:	b2d9      	uxtb	r1, r3
	    					       GET_BIT(A_u8Char , (L_u8Iterator + 4))) ;
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	3304      	adds	r3, #4
 80006a4:	fa42 f303 	asr.w	r3, r2, r3
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
	    	MGPIO_voidSetPinValue (LCD_DATA_PORT                           ,
 80006b0:	461a      	mov	r2, r3
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff fe92 	bl	80003dc <MGPIO_voidSetPinValue>
	    for (L_u8Iterator = 0 ; L_u8Iterator < 4 ; L_u8Iterator ++)
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	3301      	adds	r3, #1
 80006bc:	73fb      	strb	r3, [r7, #15]
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d9e9      	bls.n	8000698 <HLCD_voidSendData+0x1e>
	    }

	    /**set register select to high */
	    MGPIO_voidSetPinValue (LCD_RS_PORT , LCD_RS_PIN , GPIO_HIGH) ;
 80006c4:	2201      	movs	r2, #1
 80006c6:	210d      	movs	r1, #13
 80006c8:	2002      	movs	r0, #2
 80006ca:	f7ff fe87 	bl	80003dc <MGPIO_voidSetPinValue>

	    /**set enable to high */
	    MGPIO_voidSetPinValue  (LCD_EN_PORT , LCD_EN_PIN , GPIO_HIGH) ;
 80006ce:	2201      	movs	r2, #1
 80006d0:	210e      	movs	r1, #14
 80006d2:	2002      	movs	r0, #2
 80006d4:	f7ff fe82 	bl	80003dc <MGPIO_voidSetPinValue>

	    /* Wait for E to settle */
	   // ARM_DELAY (2) ;

	    /**set enable to low */
	    MGPIO_voidSetPinValue  (LCD_EN_PORT , LCD_EN_PIN , GPIO_LOW) ;
 80006d8:	2200      	movs	r2, #0
 80006da:	210e      	movs	r1, #14
 80006dc:	2002      	movs	r0, #2
 80006de:	f7ff fe7d 	bl	80003dc <MGPIO_voidSetPinValue>

	    /* Wait for E to settle */
	    //ARM_DELAY (2) ;

	    /**set read/write to low */
	    MGPIO_voidSetPinValue  (LCD_RW_PORT , LCD_RW_PIN , GPIO_LOW) ;
 80006e2:	2200      	movs	r2, #0
 80006e4:	210f      	movs	r1, #15
 80006e6:	2002      	movs	r0, #2
 80006e8:	f7ff fe78 	bl	80003dc <MGPIO_voidSetPinValue>

	    /**send last four bits of data to last four bit at control register */
	    for (L_u8Iterator = 0 ; L_u8Iterator < 8 ; L_u8Iterator ++)
 80006ec:	2300      	movs	r3, #0
 80006ee:	73fb      	strb	r3, [r7, #15]
 80006f0:	e011      	b.n	8000716 <HLCD_voidSendData+0x9c>
	    {
	    	MGPIO_voidSetPinValue (LCD_DATA_PORT                       ,
	    			               LCD_START_PIN + L_u8Iterator        ,
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	3303      	adds	r3, #3
 80006f6:	b2d9      	uxtb	r1, r3
	    					       GET_BIT((A_u8Char) , L_u8Iterator)) ;
 80006f8:	79fa      	ldrb	r2, [r7, #7]
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	fa42 f303 	asr.w	r3, r2, r3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	b2db      	uxtb	r3, r3
	    	MGPIO_voidSetPinValue (LCD_DATA_PORT                       ,
 8000708:	461a      	mov	r2, r3
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff fe66 	bl	80003dc <MGPIO_voidSetPinValue>
	    for (L_u8Iterator = 0 ; L_u8Iterator < 8 ; L_u8Iterator ++)
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	3301      	adds	r3, #1
 8000714:	73fb      	strb	r3, [r7, #15]
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	2b07      	cmp	r3, #7
 800071a:	d9ea      	bls.n	80006f2 <HLCD_voidSendData+0x78>
	    }

	    /**set register select to low */
	    MGPIO_voidSetPinValue (LCD_RS_PORT , LCD_RS_PIN , GPIO_HIGH) ;
 800071c:	2201      	movs	r2, #1
 800071e:	210d      	movs	r1, #13
 8000720:	2002      	movs	r0, #2
 8000722:	f7ff fe5b 	bl	80003dc <MGPIO_voidSetPinValue>

	    /**set enable to high */
	    MGPIO_voidSetPinValue  (LCD_EN_PORT , LCD_EN_PIN , GPIO_HIGH) ;
 8000726:	2201      	movs	r2, #1
 8000728:	210e      	movs	r1, #14
 800072a:	2002      	movs	r0, #2
 800072c:	f7ff fe56 	bl	80003dc <MGPIO_voidSetPinValue>

	    /* Wait for E to settle */
	  //  ARM_DELAY (2) ;

	    /**set enable to low */
	    MGPIO_voidSetPinValue  (LCD_EN_PORT , LCD_EN_PIN , GPIO_LOW) ;
 8000730:	2200      	movs	r2, #0
 8000732:	210e      	movs	r1, #14
 8000734:	2002      	movs	r0, #2
 8000736:	f7ff fe51 	bl	80003dc <MGPIO_voidSetPinValue>
	  //  ARM_DELAY (2) ;
	    #else
	         #error "select write mode"
	    #endif
	    //ARM_DELAY(1) ;
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <HLCD_voidDispStr>:

void HLCD_voidDispStr(u8* A_Pu8String)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b084      	sub	sp, #16
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
	/**Local loop index */
	u8 L_u8Index = 0 ;
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
	while (A_Pu8String [L_u8Index] != '\0')
 800074e:	e009      	b.n	8000764 <HLCD_voidDispStr+0x22>
	{
		/* Write Character on LCD */
		HLCD_voidSendData (A_Pu8String [L_u8Index]) ;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff8e 	bl	800067a <HLCD_voidSendData>
		
		/* Increment local loop index */
		L_u8Index ++ ;
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	3301      	adds	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]
	while (A_Pu8String [L_u8Index] != '\0')
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1ef      	bne.n	8000750 <HLCD_voidDispStr+0xe>
	}
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <HLCD_voidDispIntNum>:

void HLCD_voidDispIntNum(u32 A_u32Number)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	if (A_u32Number < (u32)MIN_INT_NUM && A_u32Number > (u32)MAX_INT_NUM)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <HLCD_voidDispIntNum+0x58>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d809      	bhi.n	80007a0 <HLCD_voidDispIntNum+0x24>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <HLCD_voidDispIntNum+0x5c>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d905      	bls.n	80007a0 <HLCD_voidDispIntNum+0x24>
	{
		/**
		 * if the integer is more than MAX_INT_NUM or less than MIN_INT_NUM
		          **** "Overflow !!!!" will be displayed
		 */
		HLCD_voidClrScreen () ;
 8000794:	f000 f826 	bl	80007e4 <HLCD_voidClrScreen>
		HLCD_voidDispStr ((u8*)"Overflow !!!!") ;
 8000798:	4810      	ldr	r0, [pc, #64]	; (80007dc <HLCD_voidDispIntNum+0x60>)
 800079a:	f7ff ffd2 	bl	8000742 <HLCD_voidDispStr>
 800079e:	e014      	b.n	80007ca <HLCD_voidDispIntNum+0x4e>
	}
	else
	{
		/**array to stored conversion character*/
	    s8 L_Ps8String [16] = {0} ;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]

		/** convert integer to string*/
	   sprintf (L_Ps8String , "%d" , (int*)A_u32Number) ;
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	490a      	ldr	r1, [pc, #40]	; (80007e0 <HLCD_voidDispIntNum+0x64>)
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fd71 	bl	80012a0 <siprintf>
		/**display number after convesion*/
	    HLCD_voidDispStr ((u8*)L_Ps8String) ;
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ffbd 	bl	8000742 <HLCD_voidDispStr>
	}
}
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	c4653600 	.word	0xc4653600
 80007d8:	3b9ac9ff 	.word	0x3b9ac9ff
 80007dc:	08001bac 	.word	0x08001bac
 80007e0:	08001bbc 	.word	0x08001bbc

080007e4 <HLCD_voidClrScreen>:
		/** DO Nothing */
	}
}

void HLCD_voidClrScreen (void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	/**clear data and move cursor to first position*/
	HLCD_voidSendCmd (CMD_CLEAR) ;
 80007e8:	2001      	movs	r0, #1
 80007ea:	f7ff fe77 	bl	80004dc <HLCD_voidSendCmd>
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <H_MotorDriver_voidInit>:



#include "MotorDriver_config.h"
#include "MotorDriver_interface.h"
void H_MotorDriver_voidInit(void) {
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
	MRCC_voidEnableClock(RCC_APB1,APB1_TIM2EN);
 80007f6:	2100      	movs	r1, #0
 80007f8:	2001      	movs	r0, #1
 80007fa:	f000 f969 	bl	8000ad0 <MRCC_voidEnableClock>
	MTIMERx_voidInit();
 80007fe:	f000 f9f9 	bl	8000bf4 <MTIMERx_voidInit>
	MTIMERx_voidPWMSetup(TIMER2,CH2);
 8000802:	2102      	movs	r1, #2
 8000804:	2002      	movs	r0, #2
 8000806:	f000 fa13 	bl	8000c30 <MTIMERx_voidPWMSetup>

	// Configure Control Pins for direction control
	MGPIO_voidSetPinMode(MOTION_MOTOR_ONE_PORT, MOTION_MOTOR_ONE_PIN_1, OUTPUT_SPEED_10MHZ_PP);
 800080a:	2201      	movs	r2, #1
 800080c:	2100      	movs	r1, #0
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff fd08 	bl	8000224 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(MOTION_MOTOR_ONE_PORT, MOTION_MOTOR_ONE_PIN_2, OUTPUT_SPEED_10MHZ_PP);
 8000814:	2201      	movs	r2, #1
 8000816:	2102      	movs	r1, #2
 8000818:	2000      	movs	r0, #0
 800081a:	f7ff fd03 	bl	8000224 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(GPIO_A, MOTOR_1_EN, OUTPUT_SPEED_10MHZ_AFOD);
 800081e:	220d      	movs	r2, #13
 8000820:	2101      	movs	r1, #1
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff fcfe 	bl	8000224 <MGPIO_voidSetPinMode>

	MGPIO_voidSetPinMode(MOTION_MOTOR_TWO_PORT, MOTION_MOTOR_TWO_PIN_1, OUTPUT_SPEED_10MHZ_PP);
 8000828:	2201      	movs	r2, #1
 800082a:	2105      	movs	r1, #5
 800082c:	2001      	movs	r0, #1
 800082e:	f7ff fcf9 	bl	8000224 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(MOTION_MOTOR_TWO_PORT, MOTION_MOTOR_TWO_PIN_2, OUTPUT_SPEED_10MHZ_PP);
 8000832:	2201      	movs	r2, #1
 8000834:	2106      	movs	r1, #6
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff fcf4 	bl	8000224 <MGPIO_voidSetPinMode>

	MGPIO_voidSetPinMode(MOTION_MOTOR_THREE_PORT, MOTION_MOTOR_THREE_PIN_1, OUTPUT_SPEED_10MHZ_PP);
 800083c:	2201      	movs	r2, #1
 800083e:	2100      	movs	r1, #0
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff fcef 	bl	8000224 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(MOTION_MOTOR_THREE_PORT, MOTION_MOTOR_THREE_PIN_2, OUTPUT_SPEED_10MHZ_PP);
 8000846:	2201      	movs	r2, #1
 8000848:	2101      	movs	r1, #1
 800084a:	2001      	movs	r0, #1
 800084c:	f7ff fcea 	bl	8000224 <MGPIO_voidSetPinMode>

	MGPIO_voidSetPinMode(MOTION_MOTOR_FOUR_PORT, MOTION_MOTOR_FOUR_PIN_1, OUTPUT_SPEED_10MHZ_PP);
 8000850:	2201      	movs	r2, #1
 8000852:	2107      	movs	r1, #7
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff fce5 	bl	8000224 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(MOTION_MOTOR_FOUR_PORT, MOTION_MOTOR_FOUR_PIN_2, OUTPUT_SPEED_10MHZ_PP);
 800085a:	2201      	movs	r2, #1
 800085c:	2108      	movs	r1, #8
 800085e:	2001      	movs	r0, #1
 8000860:	f7ff fce0 	bl	8000224 <MGPIO_voidSetPinMode>
	MNVIC_voidEnableInterrupt(28);
 8000864:	201c      	movs	r0, #28
 8000866:	f000 f8e5 	bl	8000a34 <MNVIC_voidEnableInterrupt>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}

0800086e <H_MotorDriver_voidForward>:



void H_MotorDriver_voidForward(void) {
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
	MTIMERx_voidSetPWMDuty(TIMER2 , CH2 , 55000);
 8000872:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 8000876:	2102      	movs	r1, #2
 8000878:	2002      	movs	r0, #2
 800087a:	f000 fa83 	bl	8000d84 <MTIMERx_voidSetPWMDuty>
			MSTK_voidSetBusyWait(500);
 800087e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000882:	f000 f987 	bl	8000b94 <MSTK_voidSetBusyWait>
			MTIMERx_voidSetPWMDuty(TIMER2 , CH2 , 45000);
 8000886:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 800088a:	2102      	movs	r1, #2
 800088c:	2002      	movs	r0, #2
 800088e:	f000 fa79 	bl	8000d84 <MTIMERx_voidSetPWMDuty>
				MSTK_voidSetBusyWait(500);
 8000892:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000896:	f000 f97d 	bl	8000b94 <MSTK_voidSetBusyWait>
				MTIMERx_voidSetPWMDuty(TIMER2 , CH2 , 35000);
 800089a:	f648 02b8 	movw	r2, #35000	; 0x88b8
 800089e:	2102      	movs	r1, #2
 80008a0:	2002      	movs	r0, #2
 80008a2:	f000 fa6f 	bl	8000d84 <MTIMERx_voidSetPWMDuty>
					MSTK_voidSetBusyWait(500);
 80008a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008aa:	f000 f973 	bl	8000b94 <MSTK_voidSetBusyWait>
					MTIMERx_voidSetPWMDuty(TIMER2 , CH2 , 25000);
 80008ae:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80008b2:	2102      	movs	r1, #2
 80008b4:	2002      	movs	r0, #2
 80008b6:	f000 fa65 	bl	8000d84 <MTIMERx_voidSetPWMDuty>
						MSTK_voidSetBusyWait(500);
 80008ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008be:	f000 f969 	bl	8000b94 <MSTK_voidSetBusyWait>
						MTIMERx_voidSetPWMDuty(TIMER2 , CH2 , 15000);
 80008c2:	f643 2298 	movw	r2, #15000	; 0x3a98
 80008c6:	2102      	movs	r1, #2
 80008c8:	2002      	movs	r0, #2
 80008ca:	f000 fa5b 	bl	8000d84 <MTIMERx_voidSetPWMDuty>
							MSTK_voidSetBusyWait(500);
 80008ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008d2:	f000 f95f 	bl	8000b94 <MSTK_voidSetBusyWait>
							MTIMERx_voidSetPWMDuty(TIMER2 , CH2 , 5000);
 80008d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80008da:	2102      	movs	r1, #2
 80008dc:	2002      	movs	r0, #2
 80008de:	f000 fa51 	bl	8000d84 <MTIMERx_voidSetPWMDuty>
								MSTK_voidSetBusyWait(500);
 80008e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e6:	f000 f955 	bl	8000b94 <MSTK_voidSetBusyWait>
								MTIMERx_voidSetPWMDuty(TIMER2 , CH2 , 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2102      	movs	r1, #2
 80008ee:	2002      	movs	r0, #2
 80008f0:	f000 fa48 	bl	8000d84 <MTIMERx_voidSetPWMDuty>
									MSTK_voidSetBusyWait(500);
 80008f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008f8:	f000 f94c 	bl	8000b94 <MSTK_voidSetBusyWait>

	//MGPIO_voidSetPinValue(GPIO_A, MOTOR_1_EN, GPIO_HIGH);

	MGPIO_voidSetPinValue(MOTION_MOTOR_ONE_PORT, MOTION_MOTOR_ONE_PIN_1, GPIO_LOW);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fd6b 	bl	80003dc <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(MOTION_MOTOR_ONE_PORT, MOTION_MOTOR_ONE_PIN_2, GPIO_HIGH);
 8000906:	2201      	movs	r2, #1
 8000908:	2102      	movs	r1, #2
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fd66 	bl	80003dc <MGPIO_voidSetPinValue>

	MGPIO_voidSetPinValue(MOTION_MOTOR_TWO_PORT, MOTION_MOTOR_TWO_PIN_1, GPIO_LOW);
 8000910:	2200      	movs	r2, #0
 8000912:	2105      	movs	r1, #5
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff fd61 	bl	80003dc <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(MOTION_MOTOR_TWO_PORT, MOTION_MOTOR_TWO_PIN_2, GPIO_HIGH);
 800091a:	2201      	movs	r2, #1
 800091c:	2106      	movs	r1, #6
 800091e:	2001      	movs	r0, #1
 8000920:	f7ff fd5c 	bl	80003dc <MGPIO_voidSetPinValue>

	MGPIO_voidSetPinValue(MOTION_MOTOR_THREE_PORT, MOTION_MOTOR_THREE_PIN_1, GPIO_LOW);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2001      	movs	r0, #1
 800092a:	f7ff fd57 	bl	80003dc <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(MOTION_MOTOR_THREE_PORT, MOTION_MOTOR_THREE_PIN_2, GPIO_HIGH);
 800092e:	2201      	movs	r2, #1
 8000930:	2101      	movs	r1, #1
 8000932:	2001      	movs	r0, #1
 8000934:	f7ff fd52 	bl	80003dc <MGPIO_voidSetPinValue>

	MGPIO_voidSetPinValue(MOTION_MOTOR_FOUR_PORT, MOTION_MOTOR_FOUR_PIN_1, GPIO_LOW);
 8000938:	2200      	movs	r2, #0
 800093a:	2107      	movs	r1, #7
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fd4d 	bl	80003dc <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(MOTION_MOTOR_FOUR_PORT, MOTION_MOTOR_FOUR_PIN_2, GPIO_HIGH);
 8000942:	2201      	movs	r2, #1
 8000944:	2108      	movs	r1, #8
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff fd48 	bl	80003dc <MGPIO_voidSetPinValue>

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <H_MotorDriver_voidStop>:


void H_MotorDriver_voidStop(void){
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0


	MTIMERx_voidSetPWMDuty(TIMER2 , CH2 , 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2102      	movs	r1, #2
 8000958:	2002      	movs	r0, #2
 800095a:	f000 fa13 	bl	8000d84 <MTIMERx_voidSetPWMDuty>
			MSTK_voidSetBusyWait(3000);
 800095e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000962:	f000 f917 	bl	8000b94 <MSTK_voidSetBusyWait>
			MTIMERx_voidSetPWMDuty(TIMER2 , CH2 , 50000);
 8000966:	f24c 3250 	movw	r2, #50000	; 0xc350
 800096a:	2102      	movs	r1, #2
 800096c:	2002      	movs	r0, #2
 800096e:	f000 fa09 	bl	8000d84 <MTIMERx_voidSetPWMDuty>
				MSTK_voidSetBusyWait(3000);
 8000972:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000976:	f000 f90d 	bl	8000b94 <MSTK_voidSetBusyWait>
				MTIMERx_voidSetPWMDuty(TIMER2 , CH2 , 15000);
 800097a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800097e:	2102      	movs	r1, #2
 8000980:	2002      	movs	r0, #2
 8000982:	f000 f9ff 	bl	8000d84 <MTIMERx_voidSetPWMDuty>
					MSTK_voidSetBusyWait(3000);
 8000986:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800098a:	f000 f903 	bl	8000b94 <MSTK_voidSetBusyWait>
					MTIMERx_voidSetPWMDuty(TIMER2 , CH2 , 25000);
 800098e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000992:	2102      	movs	r1, #2
 8000994:	2002      	movs	r0, #2
 8000996:	f000 f9f5 	bl	8000d84 <MTIMERx_voidSetPWMDuty>
						MSTK_voidSetBusyWait(3000);
 800099a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800099e:	f000 f8f9 	bl	8000b94 <MSTK_voidSetBusyWait>
						MTIMERx_voidSetPWMDuty(TIMER2 , CH2 , 35000);
 80009a2:	f648 02b8 	movw	r2, #35000	; 0x88b8
 80009a6:	2102      	movs	r1, #2
 80009a8:	2002      	movs	r0, #2
 80009aa:	f000 f9eb 	bl	8000d84 <MTIMERx_voidSetPWMDuty>
							MSTK_voidSetBusyWait(3000);
 80009ae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009b2:	f000 f8ef 	bl	8000b94 <MSTK_voidSetBusyWait>
							MTIMERx_voidSetPWMDuty(TIMER2 , CH2 , 45000);
 80009b6:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 80009ba:	2102      	movs	r1, #2
 80009bc:	2002      	movs	r0, #2
 80009be:	f000 f9e1 	bl	8000d84 <MTIMERx_voidSetPWMDuty>
								MSTK_voidSetBusyWait(3000);
 80009c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009c6:	f000 f8e5 	bl	8000b94 <MSTK_voidSetBusyWait>
								MTIMERx_voidSetPWMDuty(TIMER2 , CH2 , 59999);
 80009ca:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80009ce:	2102      	movs	r1, #2
 80009d0:	2002      	movs	r0, #2
 80009d2:	f000 f9d7 	bl	8000d84 <MTIMERx_voidSetPWMDuty>
									MSTK_voidSetBusyWait(3000);
 80009d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009da:	f000 f8db 	bl	8000b94 <MSTK_voidSetBusyWait>

	MGPIO_voidSetPinValue(MOTION_MOTOR_ONE_PORT, MOTION_MOTOR_ONE_PIN_1, GPIO_LOW);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fcfa 	bl	80003dc <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(MOTION_MOTOR_ONE_PORT, MOTION_MOTOR_ONE_PIN_2, GPIO_LOW);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2102      	movs	r1, #2
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff fcf5 	bl	80003dc <MGPIO_voidSetPinValue>

	MGPIO_voidSetPinValue(MOTION_MOTOR_TWO_PORT, MOTION_MOTOR_TWO_PIN_1, GPIO_LOW);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2105      	movs	r1, #5
 80009f6:	2001      	movs	r0, #1
 80009f8:	f7ff fcf0 	bl	80003dc <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(MOTION_MOTOR_TWO_PORT, MOTION_MOTOR_TWO_PIN_2, GPIO_LOW);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2106      	movs	r1, #6
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff fceb 	bl	80003dc <MGPIO_voidSetPinValue>

	MGPIO_voidSetPinValue(MOTION_MOTOR_THREE_PORT, MOTION_MOTOR_THREE_PIN_1, GPIO_LOW);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff fce6 	bl	80003dc <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(MOTION_MOTOR_THREE_PORT, MOTION_MOTOR_THREE_PIN_2, GPIO_LOW);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2101      	movs	r1, #1
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff fce1 	bl	80003dc <MGPIO_voidSetPinValue>

	MGPIO_voidSetPinValue(MOTION_MOTOR_FOUR_PORT, MOTION_MOTOR_FOUR_PIN_1, GPIO_LOW);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2107      	movs	r1, #7
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f7ff fcdc 	bl	80003dc <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(MOTION_MOTOR_FOUR_PORT, MOTION_MOTOR_FOUR_PIN_2, GPIO_LOW);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2108      	movs	r1, #8
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff fcd7 	bl	80003dc <MGPIO_voidSetPinValue>



}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <MNVIC_voidEnableInterrupt>:
    SCB_AIRCR = NVIC_GROUP_SUB_DISTRIBUTION;
}

/*Function to enable Interrupts in ISER0 & ISER1 Registers*/
void MNVIC_voidEnableInterrupt(u8 Copy_u8IntID)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
    if(Copy_u8IntID <= 31) /*Check form 0 to 31 because the ISER0 Register from 0 to 31 BITS*/
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b1f      	cmp	r3, #31
 8000a42:	d805      	bhi.n	8000a50 <MNVIC_voidEnableInterrupt+0x1c>
    {
        NVIC_ISER0 = (1 << Copy_u8IntID); /*Setting the bit in ISER0 Register like this to be faster because SET_BIT takes a lot of Instructions*/
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	2201      	movs	r2, #1
 8000a48:	409a      	lsls	r2, r3
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MNVIC_voidEnableInterrupt+0x3c>)
 8000a4c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        /* Return Error */
    }
}
 8000a4e:	e00a      	b.n	8000a66 <MNVIC_voidEnableInterrupt+0x32>
    else if(Copy_u8IntID <= 59) /*Check form 32 to 59 because the ISER1 Register from 32 to 63 BITS but i want just to 59*/
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	2b3b      	cmp	r3, #59	; 0x3b
 8000a54:	d807      	bhi.n	8000a66 <MNVIC_voidEnableInterrupt+0x32>
        Copy_u8IntID -= 32; /*Copy_u8IntID - 32 (to start from BIT 0 in the Register ISER1)*/
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	3b20      	subs	r3, #32
 8000a5a:	71fb      	strb	r3, [r7, #7]
        NVIC_ISER1 = (1 << Copy_u8IntID); /*Setting the bit in ISER1 Register like this to be faster because SET_BIT takes a lot of Instructions*/
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	409a      	lsls	r2, r3
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <MNVIC_voidEnableInterrupt+0x40>)
 8000a64:	601a      	str	r2, [r3, #0]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	e000e100 	.word	0xe000e100
 8000a74:	e000e104 	.word	0xe000e104

08000a78 <MRCC_voidInitSysClock>:
#include "RCC_config.h"
#include "RCC_interface.h"
#include "RCC_private.h"

void MRCC_voidInitSysClock(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
    #if     RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
        RCC_CR   = 0x00010000; /* Enable HSE with no bypass "CRYSTAL": HSEON = 1, HSEBYP = 0 */
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MRCC_voidInitSysClock+0x50>)
 8000a7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a82:	601a      	str	r2, [r3, #0]
        RCC_CFGR = 0x00000001; /* HSE selected as system clock : SW = 01 */
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MRCC_voidInitSysClock+0x54>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	601a      	str	r2, [r3, #0]
        /*Wait until HSE ready*/
		while (!GET_BIT(RCC_CR, HSERDY));
 8000a8a:	bf00      	nop
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MRCC_voidInitSysClock+0x50>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	0c5b      	lsrs	r3, r3, #17
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0f8      	beq.n	8000a8c <MRCC_voidInitSysClock+0x14>
	#else
		#error("WRONG CLOCK TYPE")
	#endif

	/* Configure AHB presaler */
	RCC_CFGR |= (RCC_AHB_PRESCALER << 4);
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MRCC_voidInitSysClock+0x54>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <MRCC_voidInitSysClock+0x54>)
 8000aa0:	f043 0310 	orr.w	r3, r3, #16
 8000aa4:	6013      	str	r3, [r2, #0]

	/* Configure APB1 presaler */
	RCC_CFGR |= (RCC_APB1_PRESCALER << 8);
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MRCC_voidInitSysClock+0x54>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <MRCC_voidInitSysClock+0x54>)
 8000aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab0:	6013      	str	r3, [r2, #0]

	/* Configure APB2 presaler */
	RCC_CFGR |= (RCC_APB2_PRESCALER << 11);
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MRCC_voidInitSysClock+0x54>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <MRCC_voidInitSysClock+0x54>)
 8000ab8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000abc:	6013      	str	r3, [r2, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40021004 	.word	0x40021004

08000ad0 <MRCC_voidEnableClock>:

void MRCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PerId)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	460a      	mov	r2, r1
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	4613      	mov	r3, r2
 8000ade:	71bb      	strb	r3, [r7, #6]
    if (Copy_u8PerId <= 31)
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	2b1f      	cmp	r3, #31
 8000ae4:	d82b      	bhi.n	8000b3e <MRCC_voidEnableClock+0x6e>
    {
        switch (Copy_u8BusId)
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d01c      	beq.n	8000b26 <MRCC_voidEnableClock+0x56>
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	dc25      	bgt.n	8000b3c <MRCC_voidEnableClock+0x6c>
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <MRCC_voidEnableClock+0x2a>
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d00b      	beq.n	8000b10 <MRCC_voidEnableClock+0x40>
        case RCC_APB2 :
            SET_BIT(RCC_APB2ENR, Copy_u8PerId);
            break;
        default:
        /* Return Error */
            break;
 8000af8:	e020      	b.n	8000b3c <MRCC_voidEnableClock+0x6c>
            SET_BIT(RCC_AHBENR, Copy_u8PerId);
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MRCC_voidEnableClock+0x78>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	79ba      	ldrb	r2, [r7, #6]
 8000b00:	2101      	movs	r1, #1
 8000b02:	fa01 f202 	lsl.w	r2, r1, r2
 8000b06:	4611      	mov	r1, r2
 8000b08:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <MRCC_voidEnableClock+0x78>)
 8000b0a:	430b      	orrs	r3, r1
 8000b0c:	6013      	str	r3, [r2, #0]
            break;
 8000b0e:	e016      	b.n	8000b3e <MRCC_voidEnableClock+0x6e>
            SET_BIT(RCC_APB1ENR, Copy_u8PerId);
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MRCC_voidEnableClock+0x7c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	79ba      	ldrb	r2, [r7, #6]
 8000b16:	2101      	movs	r1, #1
 8000b18:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <MRCC_voidEnableClock+0x7c>)
 8000b20:	430b      	orrs	r3, r1
 8000b22:	6013      	str	r3, [r2, #0]
            break;
 8000b24:	e00b      	b.n	8000b3e <MRCC_voidEnableClock+0x6e>
            SET_BIT(RCC_APB2ENR, Copy_u8PerId);
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MRCC_voidEnableClock+0x80>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	79ba      	ldrb	r2, [r7, #6]
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b32:	4611      	mov	r1, r2
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <MRCC_voidEnableClock+0x80>)
 8000b36:	430b      	orrs	r3, r1
 8000b38:	6013      	str	r3, [r2, #0]
            break;
 8000b3a:	e000      	b.n	8000b3e <MRCC_voidEnableClock+0x6e>
            break;
 8000b3c:	bf00      	nop
        }
    }
    else{
        /* Return Error */
    }
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	40021014 	.word	0x40021014
 8000b4c:	4002101c 	.word	0x4002101c
 8000b50:	40021018 	.word	0x40021018

08000b54 <MSTK_voidInit>:
/* Argument : Void                                                            */
/* Returns  : Void                                                            */
/* Role     : Stop the timer, Disable interrupt,and Set tick equals AHB/8     */
/* ************************************************************************** */
void MSTK_voidInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
	/* Stop Timer */
	CLR_BIT(STK->CTRL, CTRL_ENABLE);
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <MSTK_voidInit+0x3c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <MSTK_voidInit+0x3c>)
 8000b5e:	f023 0301 	bic.w	r3, r3, #1
 8000b62:	6013      	str	r3, [r2, #0]
	STK->LOAD = Null;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <MSTK_voidInit+0x3c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
	STK->VAL = Null;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MSTK_voidInit+0x3c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
	/* Disable Interrupt */
	CLR_BIT(STK->CTRL, CTRL_TICK_INT);
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <MSTK_voidInit+0x3c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <MSTK_voidInit+0x3c>)
 8000b76:	f023 0302 	bic.w	r3, r3, #2
 8000b7a:	6013      	str	r3, [r2, #0]
	/* Set the source AHB/8 or AHB */
#if SOURCE == AHB_TICK_BY_8
	CLR_BIT(STK->CTRL, CTRL_CLKSOURCE);
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <MSTK_voidInit+0x3c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a03      	ldr	r2, [pc, #12]	; (8000b90 <MSTK_voidInit+0x3c>)
 8000b82:	f023 0304 	bic.w	r3, r3, #4
 8000b86:	6013      	str	r3, [r2, #0]
#elif SOURCE == AHB_TICK
    SET_BIT(STK->CTRL, CTRL_CLKSOURCE);
#endif
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <MSTK_voidSetBusyWait>:
/* Argument : Number of ticks                                                 */
/* Returns  : Void                                                            */
/* Role     : Stay in the function for (number of tick x 1 Ms)                */
/* ************************************************************************** */
void MSTK_voidSetBusyWait(u32 A_u32Ticks)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	/* Reset timer value and clear flag */
	STK->VAL = 0;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MSTK_voidSetBusyWait+0x5c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
	/* Save the value of time */
	STK->LOAD = A_u32Ticks*1000;
 8000ba2:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <MSTK_voidSetBusyWait+0x5c>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000baa:	fb01 f303 	mul.w	r3, r1, r3
 8000bae:	6053      	str	r3, [r2, #4]
	/* Start Timer */
	SET_BIT(STK->CTRL, CTRL_ENABLE);
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MSTK_voidSetBusyWait+0x5c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <MSTK_voidSetBusyWait+0x5c>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	6013      	str	r3, [r2, #0]
	/* Start Delay */
	while (GET_BIT(STK->CTRL, CTRL_COUNT_FLAG) == FLAG_DOWN)
 8000bbc:	bf00      	nop
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MSTK_voidSetBusyWait+0x5c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	0c1b      	lsrs	r3, r3, #16
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d0f8      	beq.n	8000bbe <MSTK_voidSetBusyWait+0x2a>
		;
	/* Stop Timer */
	CLR_BIT(STK->CTRL, CTRL_ENABLE);
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MSTK_voidSetBusyWait+0x5c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <MSTK_voidSetBusyWait+0x5c>)
 8000bd2:	f023 0301 	bic.w	r3, r3, #1
 8000bd6:	6013      	str	r3, [r2, #0]
	STK->LOAD = Null;
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <MSTK_voidSetBusyWait+0x5c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
	STK->VAL = Null;
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <MSTK_voidSetBusyWait+0x5c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <MTIMERx_voidInit>:
#include "TIMERx_config.h"
#include "TIMERx_private.h"
#include "TIMERx_interface.h"

void MTIMERx_voidInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
#if TIMER_2_ENABLE == TIMER_ENABLE
	TIM2->PSC = TIMWER_2_PRESCALER;
 8000bf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIMER_2_MAX_VALUE;
 8000c00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c04:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= (TIMER_2_DIRECTION << 4);
 8000c0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000c16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6013      	str	r3, [r2, #0]
	TIM5->PSC = TIMWER_5_PRESCALER;
	TIM5->ARR = TIMER_5_MAX_VALUE;
	TIM5->CR1 |= (TIMER_5_DIRECTION << 4);
	TIM5->CR1 |= TIM_CR1_CEN;
#endif
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
	...

08000c30 <MTIMERx_voidPWMSetup>:
	TIMER->PSC = copy_u32Psc;
	TIMER->ARR = copy_u32MaxValue;
}

void MTIMERx_voidPWMSetup(u8 copy_u8TimerID, u8 copy_u8ChannelID)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	460a      	mov	r2, r1
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	71bb      	strb	r3, [r7, #6]

	volatile GPTM_t *TIMER = MTIMERx_GetTimerID(copy_u8TimerID);
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f8d0 	bl	8000de8 <MTIMERx_GetTimerID>
 8000c48:	60f8      	str	r0, [r7, #12]

	TIMER->CR1 &= ~(TIM_CR1_CEN);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f023 0201 	bic.w	r2, r3, #1
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	601a      	str	r2, [r3, #0]
	TIMER->CR1 |=  TIM_CR1_ARPE;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	601a      	str	r2, [r3, #0]
	switch (copy_u8ChannelID)
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d87a      	bhi.n	8000d60 <MTIMERx_voidPWMSetup+0x130>
 8000c6a:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <MTIMERx_voidPWMSetup+0x40>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000c81 	.word	0x08000c81
 8000c74:	08000cb9 	.word	0x08000cb9
 8000c78:	08000cf1 	.word	0x08000cf1
 8000c7c:	08000d29 	.word	0x08000d29
	{
		case CH1:
			TIMER->CCMR1 &= ~(TIM_CCMR1_CC1S);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f023 0203 	bic.w	r2, r3, #3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	619a      	str	r2, [r3, #24]
			TIMER->CCMR1 &= ~(TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f023 0268 	bic.w	r2, r3, #104	; 0x68
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	619a      	str	r2, [r3, #24]
			TIMER->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f043 0268 	orr.w	r2, r3, #104	; 0x68
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	619a      	str	r2, [r3, #24]
			TIMER->CCER |= TIM_CCER_CC1E;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6a1b      	ldr	r3, [r3, #32]
 8000ca8:	f043 0201 	orr.w	r2, r3, #1
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	621a      	str	r2, [r3, #32]
			TIMER->CCR1 = 0;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000cb6:	e054      	b.n	8000d62 <MTIMERx_voidPWMSetup+0x132>
		case CH2:
			TIMER->CCMR1 &= ~(TIM_CCMR1_CC2S);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	619a      	str	r2, [r3, #24]
			TIMER->CCMR1 &= ~(TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2PE);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f423 42d0 	bic.w	r2, r3, #26624	; 0x6800
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	619a      	str	r2, [r3, #24]
			TIMER->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2PE;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f443 42d0 	orr.w	r2, r3, #26624	; 0x6800
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	619a      	str	r2, [r3, #24]
			TIMER->CCER |= TIM_CCER_CC2E;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6a1b      	ldr	r3, [r3, #32]
 8000ce0:	f043 0210 	orr.w	r2, r3, #16
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	621a      	str	r2, [r3, #32]
			TIMER->CCR2 = 0;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2200      	movs	r2, #0
 8000cec:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000cee:	e038      	b.n	8000d62 <MTIMERx_voidPWMSetup+0x132>
		case CH3:
			TIMER->CCMR2 &= ~(TIM_CCMR2_CC3S);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	69db      	ldr	r3, [r3, #28]
 8000cf4:	f023 0203 	bic.w	r2, r3, #3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	61da      	str	r2, [r3, #28]
			TIMER->CCMR2 &= ~(TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3PE);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	f023 0268 	bic.w	r2, r3, #104	; 0x68
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	61da      	str	r2, [r3, #28]
			TIMER->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3PE;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	f043 0268 	orr.w	r2, r3, #104	; 0x68
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	61da      	str	r2, [r3, #28]
			TIMER->CCER |= TIM_CCER_CC3E;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	6a1b      	ldr	r3, [r3, #32]
 8000d18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	621a      	str	r2, [r3, #32]
			TIMER->CCR3 = 0;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2200      	movs	r2, #0
 8000d24:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000d26:	e01c      	b.n	8000d62 <MTIMERx_voidPWMSetup+0x132>
		case CH4:
			TIMER->CCMR2 &= ~(TIM_CCMR2_CC4S);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	61da      	str	r2, [r3, #28]
			TIMER->CCMR2 &= ~(TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4PE);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	f423 42d0 	bic.w	r2, r3, #26624	; 0x6800
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	61da      	str	r2, [r3, #28]
			TIMER->CCMR2 |= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4PE;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	f443 42d0 	orr.w	r2, r3, #26624	; 0x6800
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	61da      	str	r2, [r3, #28]
			TIMER->CCER |= TIM_CCER_CC4E;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6a1b      	ldr	r3, [r3, #32]
 8000d50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	621a      	str	r2, [r3, #32]
			TIMER->CCR4 = 0;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000d5e:	e000      	b.n	8000d62 <MTIMERx_voidPWMSetup+0x132>
		default:
			break;
 8000d60:	bf00      	nop
	}
	/* Enable timer */
	TIMER->EGR |= TIM_EGR_UG;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	f043 0201 	orr.w	r2, r3, #1
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	615a      	str	r2, [r3, #20]
	TIMER->CR1 |= TIM_CR1_CEN;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f043 0201 	orr.w	r2, r3, #1
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	601a      	str	r2, [r3, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop

08000d84 <MTIMERx_voidSetPWMDuty>:

void MTIMERx_voidSetPWMDuty(u8 copy_u8TimerID, u8 copy_u8ChannelID, u32 copy_u32Duty)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	603a      	str	r2, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	460b      	mov	r3, r1
 8000d92:	71bb      	strb	r3, [r7, #6]
	volatile GPTM_t *TIMER = MTIMERx_GetTimerID(copy_u8TimerID);
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 f826 	bl	8000de8 <MTIMERx_GetTimerID>
 8000d9c:	60f8      	str	r0, [r7, #12]

	switch (copy_u8ChannelID)
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d81a      	bhi.n	8000ddc <MTIMERx_voidSetPWMDuty+0x58>
 8000da6:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <MTIMERx_voidSetPWMDuty+0x28>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000dbd 	.word	0x08000dbd
 8000db0:	08000dc5 	.word	0x08000dc5
 8000db4:	08000dcd 	.word	0x08000dcd
 8000db8:	08000dd5 	.word	0x08000dd5
	{
	case CH1: TIMER->CCR1 = copy_u32Duty; break;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	635a      	str	r2, [r3, #52]	; 0x34
 8000dc2:	e00c      	b.n	8000dde <MTIMERx_voidSetPWMDuty+0x5a>
	case CH2: TIMER->CCR2 = copy_u32Duty; break;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	639a      	str	r2, [r3, #56]	; 0x38
 8000dca:	e008      	b.n	8000dde <MTIMERx_voidSetPWMDuty+0x5a>
	case CH3: TIMER->CCR3 = copy_u32Duty; break;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dd2:	e004      	b.n	8000dde <MTIMERx_voidSetPWMDuty+0x5a>
	case CH4: TIMER->CCR4 = copy_u32Duty; break;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	641a      	str	r2, [r3, #64]	; 0x40
 8000dda:	e000      	b.n	8000dde <MTIMERx_voidSetPWMDuty+0x5a>
	default: break;
 8000ddc:	bf00      	nop
	}
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop

08000de8 <MTIMERx_GetTimerID>:
	}

}

volatile GPTM_t* MTIMERx_GetTimerID(u8 copy_u8TimerID)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
	volatile GPTM_t* timer_ptr = NULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]

    switch (copy_u8TimerID)
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	3b02      	subs	r3, #2
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d817      	bhi.n	8000e2e <MTIMERx_GetTimerID+0x46>
 8000dfe:	a201      	add	r2, pc, #4	; (adr r2, 8000e04 <MTIMERx_GetTimerID+0x1c>)
 8000e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e04:	08000e15 	.word	0x08000e15
 8000e08:	08000e1d 	.word	0x08000e1d
 8000e0c:	08000e23 	.word	0x08000e23
 8000e10:	08000e29 	.word	0x08000e29
    {
        case TIMER2: timer_ptr = TIM2; break;
 8000e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	e009      	b.n	8000e30 <MTIMERx_GetTimerID+0x48>
        case TIMER3: timer_ptr = TIM3; break;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <MTIMERx_GetTimerID+0x54>)
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	e006      	b.n	8000e30 <MTIMERx_GetTimerID+0x48>
        case TIMER4: timer_ptr = TIM4; break;
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <MTIMERx_GetTimerID+0x58>)
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	e003      	b.n	8000e30 <MTIMERx_GetTimerID+0x48>
        case TIMER5: timer_ptr = TIM5; break;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MTIMERx_GetTimerID+0x5c>)
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	e000      	b.n	8000e30 <MTIMERx_GetTimerID+0x48>
        default: break;
 8000e2e:	bf00      	nop
    }
    return timer_ptr;
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	40000400 	.word	0x40000400
 8000e40:	40000800 	.word	0x40000800
 8000e44:	40000c00 	.word	0x40000c00

08000e48 <TIM2_IRQHandler>:

}



void TIM2_IRQHandler(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0

	if((TIM2->SR & TIM_SR_UIF) != 0)
 8000e4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00e      	beq.n	8000e78 <TIM2_IRQHandler+0x30>
	{
		TIM2->SR &= ~(TIM_SR_UIF);
 8000e5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e64:	f023 0301 	bic.w	r3, r3, #1
 8000e68:	6113      	str	r3, [r2, #16]
		if(ovf_callback != NULL)
 8000e6a:	4b30      	ldr	r3, [pc, #192]	; (8000f2c <TIM2_IRQHandler+0xe4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <TIM2_IRQHandler+0x30>
		{
			ovf_callback();
 8000e72:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <TIM2_IRQHandler+0xe4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4798      	blx	r3
		}
	}

    /* CH1 ISR */
	if ((TIM2->SR & TIM_SR_CC1IF) != 0)
 8000e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00e      	beq.n	8000ea4 <TIM2_IRQHandler+0x5c>
    {
        // CC1IF bit (clear interrupt flag)
        TIM2->SR &= ~(TIM_SR_CC1IF);
 8000e86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e90:	f023 0302 	bic.w	r3, r3, #2
 8000e94:	6113      	str	r3, [r2, #16]

        if (input_capture_callback[0][0] != NULL)
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <TIM2_IRQHandler+0xe8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <TIM2_IRQHandler+0x5c>
        {
            input_capture_callback[0][0]();
 8000e9e:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <TIM2_IRQHandler+0xe8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4798      	blx	r3
        }
    }

	/* CH2 ISR */
    if ((TIM2->SR & TIM_SR_CC2IF) != 0) {
 8000ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00e      	beq.n	8000ed0 <TIM2_IRQHandler+0x88>
        // CC2IF bit (clear interrupt flag)
        TIM2->SR &= ~(TIM_SR_CC2IF);
 8000eb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ebc:	f023 0304 	bic.w	r3, r3, #4
 8000ec0:	6113      	str	r3, [r2, #16]

        if (input_capture_callback[0][1] != NULL) {
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <TIM2_IRQHandler+0xe8>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <TIM2_IRQHandler+0x88>
            input_capture_callback[0][1]();
 8000eca:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <TIM2_IRQHandler+0xe8>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	4798      	blx	r3
        }
    }

    /* CH3 ISR */
    if ((TIM2->SR & TIM_SR_CC3IF) != 0) {
 8000ed0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00e      	beq.n	8000efc <TIM2_IRQHandler+0xb4>
        // CC3IF bit (clear interrupt flag)
        TIM2->SR &= ~(TIM_SR_CC3IF);
 8000ede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee8:	f023 0308 	bic.w	r3, r3, #8
 8000eec:	6113      	str	r3, [r2, #16]

        if (input_capture_callback[0][2] != NULL) {
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <TIM2_IRQHandler+0xe8>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <TIM2_IRQHandler+0xb4>
            input_capture_callback[0][2]();
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <TIM2_IRQHandler+0xe8>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	4798      	blx	r3
        }
    }

    /* CH4 ISR */
    if ((TIM2->SR & TIM_SR_CC4IF) != 0) {
 8000efc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	f003 0310 	and.w	r3, r3, #16
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00e      	beq.n	8000f28 <TIM2_IRQHandler+0xe0>
        // CC4IF bit (clear interrupt flag)
        TIM2->SR &= ~(TIM_SR_CC4IF);
 8000f0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f14:	f023 0310 	bic.w	r3, r3, #16
 8000f18:	6113      	str	r3, [r2, #16]

        if (input_capture_callback[0][3] != NULL) {
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <TIM2_IRQHandler+0xe8>)
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <TIM2_IRQHandler+0xe0>
            input_capture_callback[0][3]();
 8000f22:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <TIM2_IRQHandler+0xe8>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	4798      	blx	r3
        }
    }
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000100 	.word	0x20000100
 8000f30:	200000c0 	.word	0x200000c0

08000f34 <MUSART_VidInit>:

#define THRESHOLD_VALUE  9000000UL

void (*MUSART1_CallBack)(void);

void MUSART_VidInit ( void ){
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0

	u32 LOC_u64Mantissa = ( F_CPU ) / ( 16 * USART1_BAUD_RATE ) ;
 8000f3a:	2368      	movs	r3, #104	; 0x68
 8000f3c:	607b      	str	r3, [r7, #4]

	u32 LOC_u64Fraction = ( ( ( F_CPU * 100 ) / ( 16 * USART1_BAUD_RATE )  ) % 100 ) * 16 ;
 8000f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f42:	603b      	str	r3, [r7, #0]

	if( LOC_u64Fraction > 1500 ){ LOC_u64Mantissa += 1 ; LOC_u64Fraction  = 0 ; }
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d904      	bls.n	8000f58 <MUSART_VidInit+0x24>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3301      	adds	r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	2300      	movs	r3, #0
 8000f56:	603b      	str	r3, [r7, #0]

	#if USART1_STATUS == USART1_ENABLE

		MUSART1 -> SR = 0 ;
 8000f58:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]

		#if   USART1_WORD_LENGTH == _8BIT_WORD_LENGTH

					CLR_BIT( MUSART1 -> CR1 , 12 );
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	4a24      	ldr	r2, [pc, #144]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f68:	60d3      	str	r3, [r2, #12]

		#endif

		#if   USART1_PARITY == PARITY_DISABLE

					CLR_BIT( MUSART1 -> CR1 , 10 );
 8000f6a:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	4a21      	ldr	r2, [pc, #132]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000f70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f74:	60d3      	str	r3, [r2, #12]

		#endif

		#if  USART1_INTERRUPT == INT_DISABLE

					CLR_BIT( MUSART1 -> CR1 , 5 );
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000f7c:	f023 0320 	bic.w	r3, r3, #32
 8000f80:	60d3      	str	r3, [r2, #12]
					CLR_BIT( MUSART1 -> CR1 , 6 );
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f8c:	60d3      	str	r3, [r2, #12]
					CLR_BIT( MUSART1 -> CR1 , 7 );
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f98:	60d3      	str	r3, [r2, #12]

		#endif

		#if   USART1_TRANSMITTER == TRANSMITTER_ENABLE

					SET_BIT( MUSART1 -> CR1 , 3 );
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	4a15      	ldr	r2, [pc, #84]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	60d3      	str	r3, [r2, #12]

		#endif

		#if   USART1_RECEIVER == RECEIVER_ENABLE

					SET_BIT( MUSART1 -> CR1 , 2 );
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	60d3      	str	r3, [r2, #12]

		#endif

		#if   USART1_STOP_BITS == ONE_STOP_BIT

					CLR_BIT( MUSART1 -> CR2 , 12 ); CLR_BIT( MUSART1 -> CR2 , 13 );
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000fb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fbc:	6113      	str	r3, [r2, #16]
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000fc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fc8:	6113      	str	r3, [r2, #16]
					SET_BIT( MUSART1 -> CR2 , 12 ); SET_BIT( MUSART1 -> CR2 , 13 );


		#endif

		MUSART1 -> BRR = ( LOC_u64Mantissa << 4  ) | ( LOC_u64Fraction / 100 ) ;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	011a      	lsls	r2, r3, #4
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	4909      	ldr	r1, [pc, #36]	; (8000ff8 <MUSART_VidInit+0xc4>)
 8000fd2:	fba1 1303 	umull	r1, r3, r1, r3
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	4906      	ldr	r1, [pc, #24]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	608b      	str	r3, [r1, #8]
		SET_BIT( MUSART1 -> CR1 , 13 );
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <MUSART_VidInit+0xc0>)
 8000fe4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fe8:	60d3      	str	r3, [r2, #12]
	#elif USART1_STATUS == USART1_DISABLE
		CLR_BIT( MUSART1 -> CR1 , 0 );

	#endif

}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40013800 	.word	0x40013800
 8000ff8:	51eb851f 	.word	0x51eb851f

08000ffc <MUSART1_u8RecCharSynch>:

	}

}

u8 MUSART1_u8RecCharSynch ( void ){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0

	u8  LOC_u8Data  = 0 ;
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]
	u32 LOC_TimeOut = 0 ;
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]

	CLR_BIT ( MUSART1 -> SR, 5);
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MUSART1_u8RecCharSynch+0x58>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a11      	ldr	r2, [pc, #68]	; (8001054 <MUSART1_u8RecCharSynch+0x58>)
 8001010:	f023 0320 	bic.w	r3, r3, #32
 8001014:	6013      	str	r3, [r2, #0]

	while( ( GET_BIT ( MUSART1 -> SR, 5) == 0 ) && ( LOC_TimeOut < THRESHOLD_VALUE ) )
 8001016:	e002      	b.n	800101e <MUSART1_u8RecCharSynch+0x22>
	{
		LOC_TimeOut++;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	603b      	str	r3, [r7, #0]
	while( ( GET_BIT ( MUSART1 -> SR, 5) == 0 ) && ( LOC_TimeOut < THRESHOLD_VALUE ) )
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <MUSART1_u8RecCharSynch+0x58>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d103      	bne.n	8001034 <MUSART1_u8RecCharSynch+0x38>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <MUSART1_u8RecCharSynch+0x5c>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d9f1      	bls.n	8001018 <MUSART1_u8RecCharSynch+0x1c>
	}

	if( LOC_TimeOut == THRESHOLD_VALUE )
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	4a09      	ldr	r2, [pc, #36]	; (800105c <MUSART1_u8RecCharSynch+0x60>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d102      	bne.n	8001042 <MUSART1_u8RecCharSynch+0x46>
	{
		LOC_u8Data = 255;
 800103c:	23ff      	movs	r3, #255	; 0xff
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	e002      	b.n	8001048 <MUSART1_u8RecCharSynch+0x4c>
	}
	else
	{

		LOC_u8Data = MUSART1 -> DR;
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <MUSART1_u8RecCharSynch+0x58>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	71fb      	strb	r3, [r7, #7]
	}

	return LOC_u8Data;
 8001048:	79fb      	ldrb	r3, [r7, #7]

}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	40013800 	.word	0x40013800
 8001058:	0089543f 	.word	0x0089543f
 800105c:	00895440 	.word	0x00895440

08001060 <USART1_IRQHandler>:

	MUSART1_CallBack = ptr ;

}

void USART1_IRQHandler(void){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

	MUSART1 -> SR = 0 ;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <USART1_IRQHandler+0x14>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
	MUSART1_CallBack();
 800106a:	4b03      	ldr	r3, [pc, #12]	; (8001078 <USART1_IRQHandler+0x18>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4798      	blx	r3

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40013800 	.word	0x40013800
 8001078:	20000104 	.word	0x20000104

0800107c <main>:
#include "USART_INTERFACE.h"
#include "MotorDriver_interface.h"
#include "TIMERx_interface.h"

int main(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0


	    MRCC_voidInitSysClock();
 8001082:	f7ff fcf9 	bl	8000a78 <MRCC_voidInitSysClock>
		MRCC_voidEnableClock(RCC_APB2,APB2_AFIOEN);
 8001086:	2100      	movs	r1, #0
 8001088:	2002      	movs	r0, #2
 800108a:	f7ff fd21 	bl	8000ad0 <MRCC_voidEnableClock>
		MRCC_voidEnableClock(RCC_APB2,APB2_GPIOAEN);
 800108e:	2102      	movs	r1, #2
 8001090:	2002      	movs	r0, #2
 8001092:	f7ff fd1d 	bl	8000ad0 <MRCC_voidEnableClock>
		MRCC_voidEnableClock(RCC_APB2,APB2_GPIOBEN);
 8001096:	2103      	movs	r1, #3
 8001098:	2002      	movs	r0, #2
 800109a:	f7ff fd19 	bl	8000ad0 <MRCC_voidEnableClock>
		MRCC_voidEnableClock(RCC_APB2,APB2_GPIOCEN);
 800109e:	2104      	movs	r1, #4
 80010a0:	2002      	movs	r0, #2
 80010a2:	f7ff fd15 	bl	8000ad0 <MRCC_voidEnableClock>
		MRCC_voidEnableClock(RCC_APB1,APB1_TIM2EN);
 80010a6:	2100      	movs	r1, #0
 80010a8:	2001      	movs	r0, #1
 80010aa:	f7ff fd11 	bl	8000ad0 <MRCC_voidEnableClock>
		MRCC_voidEnableClock(RCC_APB2, APB2_USART1EN);
 80010ae:	210e      	movs	r1, #14
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff fd0d 	bl	8000ad0 <MRCC_voidEnableClock>

		MNVIC_voidEnableInterrupt(37); // Enable UART
 80010b6:	2025      	movs	r0, #37	; 0x25
 80010b8:	f7ff fcbc 	bl	8000a34 <MNVIC_voidEnableInterrupt>
		MNVIC_voidEnableInterrupt(28); //Enable Timer
 80010bc:	201c      	movs	r0, #28
 80010be:	f7ff fcb9 	bl	8000a34 <MNVIC_voidEnableInterrupt>


		MGPIO_voidSetPinMode(GPIO_A,PIN9,OUTPUT_SPEED_2MHZ_AFPP);//TX
 80010c2:	220a      	movs	r2, #10
 80010c4:	2109      	movs	r1, #9
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff f8ac 	bl	8000224 <MGPIO_voidSetPinMode>
		MGPIO_voidSetPinMode(GPIO_A,PIN9,INPUT_FLOATING);//RX
 80010cc:	2204      	movs	r2, #4
 80010ce:	2109      	movs	r1, #9
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff f8a7 	bl	8000224 <MGPIO_voidSetPinMode>


		HLCD_voidInit();
 80010d6:	f7ff fa98 	bl	800060a <HLCD_voidInit>
		MUSART_VidInit();
 80010da:	f7ff ff2b 	bl	8000f34 <MUSART_VidInit>
		MSTK_voidInit();
 80010de:	f7ff fd39 	bl	8000b54 <MSTK_voidInit>
		H_MotorDriver_voidInit();
 80010e2:	f7ff fb86 	bl	80007f2 <H_MotorDriver_voidInit>
		u8 read_data = 0;  // variable to store data received
 80010e6:	2300      	movs	r3, #0
 80010e8:	71fb      	strb	r3, [r7, #7]
		volatile u8 forward_state = 0; // Flag for forward motors
 80010ea:	2300      	movs	r3, #0
 80010ec:	71bb      	strb	r3, [r7, #6]
		volatile u8 stop_state = 0; // Flag for stop motors
 80010ee:	2300      	movs	r3, #0
 80010f0:	717b      	strb	r3, [r7, #5]

		H_MotorDriver_voidForward();
 80010f2:	f7ff fbbc 	bl	800086e <H_MotorDriver_voidForward>


   while(1){

	    read_data =  MUSART1_u8RecCharSynch();
 80010f6:	f7ff ff81 	bl	8000ffc <MUSART1_u8RecCharSynch>
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
	     HLCD_voidDispIntNum(read_data);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fb3b 	bl	800077c <HLCD_voidDispIntNum>
	     HLCD_voidClrScreen();
 8001106:	f7ff fb6d 	bl	80007e4 <HLCD_voidClrScreen>

	     if(read_data == 65 && stop_state == 0){ //car crash happen
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b41      	cmp	r3, #65	; 0x41
 800110e:	d10a      	bne.n	8001126 <main+0xaa>
 8001110:	797b      	ldrb	r3, [r7, #5]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d106      	bne.n	8001126 <main+0xaa>
              forward_state = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	71bb      	strb	r3, [r7, #6]
             //MGPIO_voidSetPinValue(GPIO_A,PIN8,GPIO_HIGH);
	    	 H_MotorDriver_voidStop();
 800111c:	f7ff fc18 	bl	8000950 <H_MotorDriver_voidStop>
	    	 stop_state = 1;
 8001120:	2301      	movs	r3, #1
 8001122:	717b      	strb	r3, [r7, #5]
 8001124:	e031      	b.n	800118a <main+0x10e>
	     }
	     else if ((read_data == 83) && (forward_state == 0)) { //safe mode
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b53      	cmp	r3, #83	; 0x53
 800112a:	d10a      	bne.n	8001142 <main+0xc6>
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d106      	bne.n	8001142 <main+0xc6>

             stop_state = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	717b      	strb	r3, [r7, #5]

	    	 H_MotorDriver_voidForward();
 8001138:	f7ff fb99 	bl	800086e <H_MotorDriver_voidForward>
             forward_state = 1;
 800113c:	2301      	movs	r3, #1
 800113e:	71bb      	strb	r3, [r7, #6]
 8001140:	e023      	b.n	800118a <main+0x10e>


	     }
	     else if (read_data == 66 && stop_state == 0){
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b42      	cmp	r3, #66	; 0x42
 8001146:	d10a      	bne.n	800115e <main+0xe2>
 8001148:	797b      	ldrb	r3, [r7, #5]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d106      	bne.n	800115e <main+0xe2>
	    	 forward_state = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	71bb      	strb	r3, [r7, #6]

	    	 H_MotorDriver_voidStop();
 8001154:	f7ff fbfc 	bl	8000950 <H_MotorDriver_voidStop>
	    	 stop_state = 1;
 8001158:	2301      	movs	r3, #1
 800115a:	717b      	strb	r3, [r7, #5]
 800115c:	e015      	b.n	800118a <main+0x10e>
	     }
	     else if (read_data == 67 && stop_state == 0){
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b43      	cmp	r3, #67	; 0x43
 8001162:	d10a      	bne.n	800117a <main+0xfe>
 8001164:	797b      	ldrb	r3, [r7, #5]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d106      	bne.n	800117a <main+0xfe>
	    	 forward_state = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	71bb      	strb	r3, [r7, #6]

	    	 H_MotorDriver_voidStop();
 8001170:	f7ff fbee 	bl	8000950 <H_MotorDriver_voidStop>
	    	 stop_state = 1;
 8001174:	2301      	movs	r3, #1
 8001176:	717b      	strb	r3, [r7, #5]
 8001178:	e007      	b.n	800118a <main+0x10e>
	     }
	     else if(read_data == 0 || read_data == ' '){
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <main+0x10a>
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b20      	cmp	r3, #32
 8001184:	d1b7      	bne.n	80010f6 <main+0x7a>

	    	 H_MotorDriver_voidForward();
 8001186:	f7ff fb72 	bl	800086e <H_MotorDriver_voidForward>
	    read_data =  MUSART1_u8RecCharSynch();
 800118a:	e7b4      	b.n	80010f6 <main+0x7a>

0800118c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001194:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <_sbrk+0x5c>)
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <_sbrk+0x60>)
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <_sbrk+0x64>)
 80011aa:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <_sbrk+0x68>)
 80011ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d207      	bcs.n	80011cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011bc:	f000 f846 	bl	800124c <__errno>
 80011c0:	4603      	mov	r3, r0
 80011c2:	220c      	movs	r2, #12
 80011c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	e009      	b.n	80011e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <_sbrk+0x64>)
 80011dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20002800 	.word	0x20002800
 80011ec:	00000400 	.word	0x00000400
 80011f0:	20000108 	.word	0x20000108
 80011f4:	20000120 	.word	0x20000120

080011f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <LoopForever+0x6>)
  ldr r1, =_edata
 8001202:	490d      	ldr	r1, [pc, #52]	; (8001238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <LoopForever+0xe>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001218:	4c0a      	ldr	r4, [pc, #40]	; (8001244 <LoopForever+0x16>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001226:	f000 f817 	bl	8001258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800122a:	f7ff ff27 	bl	800107c <main>

0800122e <LoopForever>:

LoopForever:
  b LoopForever
 800122e:	e7fe      	b.n	800122e <LoopForever>
  ldr   r0, =_estack
 8001230:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800123c:	08001bfc 	.word	0x08001bfc
  ldr r2, =_sbss
 8001240:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001244:	2000011c 	.word	0x2000011c

08001248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC1_2_IRQHandler>
	...

0800124c <__errno>:
 800124c:	4b01      	ldr	r3, [pc, #4]	; (8001254 <__errno+0x8>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000

08001258 <__libc_init_array>:
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	2600      	movs	r6, #0
 800125c:	4d0c      	ldr	r5, [pc, #48]	; (8001290 <__libc_init_array+0x38>)
 800125e:	4c0d      	ldr	r4, [pc, #52]	; (8001294 <__libc_init_array+0x3c>)
 8001260:	1b64      	subs	r4, r4, r5
 8001262:	10a4      	asrs	r4, r4, #2
 8001264:	42a6      	cmp	r6, r4
 8001266:	d109      	bne.n	800127c <__libc_init_array+0x24>
 8001268:	f000 fc94 	bl	8001b94 <_init>
 800126c:	2600      	movs	r6, #0
 800126e:	4d0a      	ldr	r5, [pc, #40]	; (8001298 <__libc_init_array+0x40>)
 8001270:	4c0a      	ldr	r4, [pc, #40]	; (800129c <__libc_init_array+0x44>)
 8001272:	1b64      	subs	r4, r4, r5
 8001274:	10a4      	asrs	r4, r4, #2
 8001276:	42a6      	cmp	r6, r4
 8001278:	d105      	bne.n	8001286 <__libc_init_array+0x2e>
 800127a:	bd70      	pop	{r4, r5, r6, pc}
 800127c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001280:	4798      	blx	r3
 8001282:	3601      	adds	r6, #1
 8001284:	e7ee      	b.n	8001264 <__libc_init_array+0xc>
 8001286:	f855 3b04 	ldr.w	r3, [r5], #4
 800128a:	4798      	blx	r3
 800128c:	3601      	adds	r6, #1
 800128e:	e7f2      	b.n	8001276 <__libc_init_array+0x1e>
 8001290:	08001bf4 	.word	0x08001bf4
 8001294:	08001bf4 	.word	0x08001bf4
 8001298:	08001bf4 	.word	0x08001bf4
 800129c:	08001bf8 	.word	0x08001bf8

080012a0 <siprintf>:
 80012a0:	b40e      	push	{r1, r2, r3}
 80012a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80012a6:	b500      	push	{lr}
 80012a8:	b09c      	sub	sp, #112	; 0x70
 80012aa:	ab1d      	add	r3, sp, #116	; 0x74
 80012ac:	9002      	str	r0, [sp, #8]
 80012ae:	9006      	str	r0, [sp, #24]
 80012b0:	9107      	str	r1, [sp, #28]
 80012b2:	9104      	str	r1, [sp, #16]
 80012b4:	4808      	ldr	r0, [pc, #32]	; (80012d8 <siprintf+0x38>)
 80012b6:	4909      	ldr	r1, [pc, #36]	; (80012dc <siprintf+0x3c>)
 80012b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80012bc:	9105      	str	r1, [sp, #20]
 80012be:	6800      	ldr	r0, [r0, #0]
 80012c0:	a902      	add	r1, sp, #8
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	f000 f868 	bl	8001398 <_svfiprintf_r>
 80012c8:	2200      	movs	r2, #0
 80012ca:	9b02      	ldr	r3, [sp, #8]
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	b01c      	add	sp, #112	; 0x70
 80012d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80012d4:	b003      	add	sp, #12
 80012d6:	4770      	bx	lr
 80012d8:	20000000 	.word	0x20000000
 80012dc:	ffff0208 	.word	0xffff0208

080012e0 <__ssputs_r>:
 80012e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012e4:	688e      	ldr	r6, [r1, #8]
 80012e6:	4682      	mov	sl, r0
 80012e8:	429e      	cmp	r6, r3
 80012ea:	460c      	mov	r4, r1
 80012ec:	4690      	mov	r8, r2
 80012ee:	461f      	mov	r7, r3
 80012f0:	d838      	bhi.n	8001364 <__ssputs_r+0x84>
 80012f2:	898a      	ldrh	r2, [r1, #12]
 80012f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80012f8:	d032      	beq.n	8001360 <__ssputs_r+0x80>
 80012fa:	6825      	ldr	r5, [r4, #0]
 80012fc:	6909      	ldr	r1, [r1, #16]
 80012fe:	3301      	adds	r3, #1
 8001300:	eba5 0901 	sub.w	r9, r5, r1
 8001304:	6965      	ldr	r5, [r4, #20]
 8001306:	444b      	add	r3, r9
 8001308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800130c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001310:	106d      	asrs	r5, r5, #1
 8001312:	429d      	cmp	r5, r3
 8001314:	bf38      	it	cc
 8001316:	461d      	movcc	r5, r3
 8001318:	0553      	lsls	r3, r2, #21
 800131a:	d531      	bpl.n	8001380 <__ssputs_r+0xa0>
 800131c:	4629      	mov	r1, r5
 800131e:	f000 fb6f 	bl	8001a00 <_malloc_r>
 8001322:	4606      	mov	r6, r0
 8001324:	b950      	cbnz	r0, 800133c <__ssputs_r+0x5c>
 8001326:	230c      	movs	r3, #12
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f8ca 3000 	str.w	r3, [sl]
 8001330:	89a3      	ldrh	r3, [r4, #12]
 8001332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001336:	81a3      	strh	r3, [r4, #12]
 8001338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800133c:	464a      	mov	r2, r9
 800133e:	6921      	ldr	r1, [r4, #16]
 8001340:	f000 face 	bl	80018e0 <memcpy>
 8001344:	89a3      	ldrh	r3, [r4, #12]
 8001346:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800134a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134e:	81a3      	strh	r3, [r4, #12]
 8001350:	6126      	str	r6, [r4, #16]
 8001352:	444e      	add	r6, r9
 8001354:	6026      	str	r6, [r4, #0]
 8001356:	463e      	mov	r6, r7
 8001358:	6165      	str	r5, [r4, #20]
 800135a:	eba5 0509 	sub.w	r5, r5, r9
 800135e:	60a5      	str	r5, [r4, #8]
 8001360:	42be      	cmp	r6, r7
 8001362:	d900      	bls.n	8001366 <__ssputs_r+0x86>
 8001364:	463e      	mov	r6, r7
 8001366:	4632      	mov	r2, r6
 8001368:	4641      	mov	r1, r8
 800136a:	6820      	ldr	r0, [r4, #0]
 800136c:	f000 fac6 	bl	80018fc <memmove>
 8001370:	68a3      	ldr	r3, [r4, #8]
 8001372:	2000      	movs	r0, #0
 8001374:	1b9b      	subs	r3, r3, r6
 8001376:	60a3      	str	r3, [r4, #8]
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	4433      	add	r3, r6
 800137c:	6023      	str	r3, [r4, #0]
 800137e:	e7db      	b.n	8001338 <__ssputs_r+0x58>
 8001380:	462a      	mov	r2, r5
 8001382:	f000 fbb1 	bl	8001ae8 <_realloc_r>
 8001386:	4606      	mov	r6, r0
 8001388:	2800      	cmp	r0, #0
 800138a:	d1e1      	bne.n	8001350 <__ssputs_r+0x70>
 800138c:	4650      	mov	r0, sl
 800138e:	6921      	ldr	r1, [r4, #16]
 8001390:	f000 face 	bl	8001930 <_free_r>
 8001394:	e7c7      	b.n	8001326 <__ssputs_r+0x46>
	...

08001398 <_svfiprintf_r>:
 8001398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800139c:	4698      	mov	r8, r3
 800139e:	898b      	ldrh	r3, [r1, #12]
 80013a0:	4607      	mov	r7, r0
 80013a2:	061b      	lsls	r3, r3, #24
 80013a4:	460d      	mov	r5, r1
 80013a6:	4614      	mov	r4, r2
 80013a8:	b09d      	sub	sp, #116	; 0x74
 80013aa:	d50e      	bpl.n	80013ca <_svfiprintf_r+0x32>
 80013ac:	690b      	ldr	r3, [r1, #16]
 80013ae:	b963      	cbnz	r3, 80013ca <_svfiprintf_r+0x32>
 80013b0:	2140      	movs	r1, #64	; 0x40
 80013b2:	f000 fb25 	bl	8001a00 <_malloc_r>
 80013b6:	6028      	str	r0, [r5, #0]
 80013b8:	6128      	str	r0, [r5, #16]
 80013ba:	b920      	cbnz	r0, 80013c6 <_svfiprintf_r+0x2e>
 80013bc:	230c      	movs	r3, #12
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	e0d1      	b.n	800156a <_svfiprintf_r+0x1d2>
 80013c6:	2340      	movs	r3, #64	; 0x40
 80013c8:	616b      	str	r3, [r5, #20]
 80013ca:	2300      	movs	r3, #0
 80013cc:	9309      	str	r3, [sp, #36]	; 0x24
 80013ce:	2320      	movs	r3, #32
 80013d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80013d4:	2330      	movs	r3, #48	; 0x30
 80013d6:	f04f 0901 	mov.w	r9, #1
 80013da:	f8cd 800c 	str.w	r8, [sp, #12]
 80013de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001584 <_svfiprintf_r+0x1ec>
 80013e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80013e6:	4623      	mov	r3, r4
 80013e8:	469a      	mov	sl, r3
 80013ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80013ee:	b10a      	cbz	r2, 80013f4 <_svfiprintf_r+0x5c>
 80013f0:	2a25      	cmp	r2, #37	; 0x25
 80013f2:	d1f9      	bne.n	80013e8 <_svfiprintf_r+0x50>
 80013f4:	ebba 0b04 	subs.w	fp, sl, r4
 80013f8:	d00b      	beq.n	8001412 <_svfiprintf_r+0x7a>
 80013fa:	465b      	mov	r3, fp
 80013fc:	4622      	mov	r2, r4
 80013fe:	4629      	mov	r1, r5
 8001400:	4638      	mov	r0, r7
 8001402:	f7ff ff6d 	bl	80012e0 <__ssputs_r>
 8001406:	3001      	adds	r0, #1
 8001408:	f000 80aa 	beq.w	8001560 <_svfiprintf_r+0x1c8>
 800140c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800140e:	445a      	add	r2, fp
 8001410:	9209      	str	r2, [sp, #36]	; 0x24
 8001412:	f89a 3000 	ldrb.w	r3, [sl]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 80a2 	beq.w	8001560 <_svfiprintf_r+0x1c8>
 800141c:	2300      	movs	r3, #0
 800141e:	f04f 32ff 	mov.w	r2, #4294967295
 8001422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001426:	f10a 0a01 	add.w	sl, sl, #1
 800142a:	9304      	str	r3, [sp, #16]
 800142c:	9307      	str	r3, [sp, #28]
 800142e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001432:	931a      	str	r3, [sp, #104]	; 0x68
 8001434:	4654      	mov	r4, sl
 8001436:	2205      	movs	r2, #5
 8001438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800143c:	4851      	ldr	r0, [pc, #324]	; (8001584 <_svfiprintf_r+0x1ec>)
 800143e:	f000 fa41 	bl	80018c4 <memchr>
 8001442:	9a04      	ldr	r2, [sp, #16]
 8001444:	b9d8      	cbnz	r0, 800147e <_svfiprintf_r+0xe6>
 8001446:	06d0      	lsls	r0, r2, #27
 8001448:	bf44      	itt	mi
 800144a:	2320      	movmi	r3, #32
 800144c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001450:	0711      	lsls	r1, r2, #28
 8001452:	bf44      	itt	mi
 8001454:	232b      	movmi	r3, #43	; 0x2b
 8001456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800145a:	f89a 3000 	ldrb.w	r3, [sl]
 800145e:	2b2a      	cmp	r3, #42	; 0x2a
 8001460:	d015      	beq.n	800148e <_svfiprintf_r+0xf6>
 8001462:	4654      	mov	r4, sl
 8001464:	2000      	movs	r0, #0
 8001466:	f04f 0c0a 	mov.w	ip, #10
 800146a:	9a07      	ldr	r2, [sp, #28]
 800146c:	4621      	mov	r1, r4
 800146e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001472:	3b30      	subs	r3, #48	; 0x30
 8001474:	2b09      	cmp	r3, #9
 8001476:	d94e      	bls.n	8001516 <_svfiprintf_r+0x17e>
 8001478:	b1b0      	cbz	r0, 80014a8 <_svfiprintf_r+0x110>
 800147a:	9207      	str	r2, [sp, #28]
 800147c:	e014      	b.n	80014a8 <_svfiprintf_r+0x110>
 800147e:	eba0 0308 	sub.w	r3, r0, r8
 8001482:	fa09 f303 	lsl.w	r3, r9, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	46a2      	mov	sl, r4
 800148a:	9304      	str	r3, [sp, #16]
 800148c:	e7d2      	b.n	8001434 <_svfiprintf_r+0x9c>
 800148e:	9b03      	ldr	r3, [sp, #12]
 8001490:	1d19      	adds	r1, r3, #4
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	9103      	str	r1, [sp, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	bfbb      	ittet	lt
 800149a:	425b      	neglt	r3, r3
 800149c:	f042 0202 	orrlt.w	r2, r2, #2
 80014a0:	9307      	strge	r3, [sp, #28]
 80014a2:	9307      	strlt	r3, [sp, #28]
 80014a4:	bfb8      	it	lt
 80014a6:	9204      	strlt	r2, [sp, #16]
 80014a8:	7823      	ldrb	r3, [r4, #0]
 80014aa:	2b2e      	cmp	r3, #46	; 0x2e
 80014ac:	d10c      	bne.n	80014c8 <_svfiprintf_r+0x130>
 80014ae:	7863      	ldrb	r3, [r4, #1]
 80014b0:	2b2a      	cmp	r3, #42	; 0x2a
 80014b2:	d135      	bne.n	8001520 <_svfiprintf_r+0x188>
 80014b4:	9b03      	ldr	r3, [sp, #12]
 80014b6:	3402      	adds	r4, #2
 80014b8:	1d1a      	adds	r2, r3, #4
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	9203      	str	r2, [sp, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	bfb8      	it	lt
 80014c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80014c6:	9305      	str	r3, [sp, #20]
 80014c8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001588 <_svfiprintf_r+0x1f0>
 80014cc:	2203      	movs	r2, #3
 80014ce:	4650      	mov	r0, sl
 80014d0:	7821      	ldrb	r1, [r4, #0]
 80014d2:	f000 f9f7 	bl	80018c4 <memchr>
 80014d6:	b140      	cbz	r0, 80014ea <_svfiprintf_r+0x152>
 80014d8:	2340      	movs	r3, #64	; 0x40
 80014da:	eba0 000a 	sub.w	r0, r0, sl
 80014de:	fa03 f000 	lsl.w	r0, r3, r0
 80014e2:	9b04      	ldr	r3, [sp, #16]
 80014e4:	3401      	adds	r4, #1
 80014e6:	4303      	orrs	r3, r0
 80014e8:	9304      	str	r3, [sp, #16]
 80014ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014ee:	2206      	movs	r2, #6
 80014f0:	4826      	ldr	r0, [pc, #152]	; (800158c <_svfiprintf_r+0x1f4>)
 80014f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80014f6:	f000 f9e5 	bl	80018c4 <memchr>
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d038      	beq.n	8001570 <_svfiprintf_r+0x1d8>
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <_svfiprintf_r+0x1f8>)
 8001500:	bb1b      	cbnz	r3, 800154a <_svfiprintf_r+0x1b2>
 8001502:	9b03      	ldr	r3, [sp, #12]
 8001504:	3307      	adds	r3, #7
 8001506:	f023 0307 	bic.w	r3, r3, #7
 800150a:	3308      	adds	r3, #8
 800150c:	9303      	str	r3, [sp, #12]
 800150e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001510:	4433      	add	r3, r6
 8001512:	9309      	str	r3, [sp, #36]	; 0x24
 8001514:	e767      	b.n	80013e6 <_svfiprintf_r+0x4e>
 8001516:	460c      	mov	r4, r1
 8001518:	2001      	movs	r0, #1
 800151a:	fb0c 3202 	mla	r2, ip, r2, r3
 800151e:	e7a5      	b.n	800146c <_svfiprintf_r+0xd4>
 8001520:	2300      	movs	r3, #0
 8001522:	f04f 0c0a 	mov.w	ip, #10
 8001526:	4619      	mov	r1, r3
 8001528:	3401      	adds	r4, #1
 800152a:	9305      	str	r3, [sp, #20]
 800152c:	4620      	mov	r0, r4
 800152e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001532:	3a30      	subs	r2, #48	; 0x30
 8001534:	2a09      	cmp	r2, #9
 8001536:	d903      	bls.n	8001540 <_svfiprintf_r+0x1a8>
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0c5      	beq.n	80014c8 <_svfiprintf_r+0x130>
 800153c:	9105      	str	r1, [sp, #20]
 800153e:	e7c3      	b.n	80014c8 <_svfiprintf_r+0x130>
 8001540:	4604      	mov	r4, r0
 8001542:	2301      	movs	r3, #1
 8001544:	fb0c 2101 	mla	r1, ip, r1, r2
 8001548:	e7f0      	b.n	800152c <_svfiprintf_r+0x194>
 800154a:	ab03      	add	r3, sp, #12
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	462a      	mov	r2, r5
 8001550:	4638      	mov	r0, r7
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <_svfiprintf_r+0x1fc>)
 8001554:	a904      	add	r1, sp, #16
 8001556:	f3af 8000 	nop.w
 800155a:	1c42      	adds	r2, r0, #1
 800155c:	4606      	mov	r6, r0
 800155e:	d1d6      	bne.n	800150e <_svfiprintf_r+0x176>
 8001560:	89ab      	ldrh	r3, [r5, #12]
 8001562:	065b      	lsls	r3, r3, #25
 8001564:	f53f af2c 	bmi.w	80013c0 <_svfiprintf_r+0x28>
 8001568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800156a:	b01d      	add	sp, #116	; 0x74
 800156c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001570:	ab03      	add	r3, sp, #12
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	462a      	mov	r2, r5
 8001576:	4638      	mov	r0, r7
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <_svfiprintf_r+0x1fc>)
 800157a:	a904      	add	r1, sp, #16
 800157c:	f000 f87c 	bl	8001678 <_printf_i>
 8001580:	e7eb      	b.n	800155a <_svfiprintf_r+0x1c2>
 8001582:	bf00      	nop
 8001584:	08001bbf 	.word	0x08001bbf
 8001588:	08001bc5 	.word	0x08001bc5
 800158c:	08001bc9 	.word	0x08001bc9
 8001590:	00000000 	.word	0x00000000
 8001594:	080012e1 	.word	0x080012e1

08001598 <_printf_common>:
 8001598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800159c:	4616      	mov	r6, r2
 800159e:	4699      	mov	r9, r3
 80015a0:	688a      	ldr	r2, [r1, #8]
 80015a2:	690b      	ldr	r3, [r1, #16]
 80015a4:	4607      	mov	r7, r0
 80015a6:	4293      	cmp	r3, r2
 80015a8:	bfb8      	it	lt
 80015aa:	4613      	movlt	r3, r2
 80015ac:	6033      	str	r3, [r6, #0]
 80015ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80015b2:	460c      	mov	r4, r1
 80015b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80015b8:	b10a      	cbz	r2, 80015be <_printf_common+0x26>
 80015ba:	3301      	adds	r3, #1
 80015bc:	6033      	str	r3, [r6, #0]
 80015be:	6823      	ldr	r3, [r4, #0]
 80015c0:	0699      	lsls	r1, r3, #26
 80015c2:	bf42      	ittt	mi
 80015c4:	6833      	ldrmi	r3, [r6, #0]
 80015c6:	3302      	addmi	r3, #2
 80015c8:	6033      	strmi	r3, [r6, #0]
 80015ca:	6825      	ldr	r5, [r4, #0]
 80015cc:	f015 0506 	ands.w	r5, r5, #6
 80015d0:	d106      	bne.n	80015e0 <_printf_common+0x48>
 80015d2:	f104 0a19 	add.w	sl, r4, #25
 80015d6:	68e3      	ldr	r3, [r4, #12]
 80015d8:	6832      	ldr	r2, [r6, #0]
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	42ab      	cmp	r3, r5
 80015de:	dc28      	bgt.n	8001632 <_printf_common+0x9a>
 80015e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80015e4:	1e13      	subs	r3, r2, #0
 80015e6:	6822      	ldr	r2, [r4, #0]
 80015e8:	bf18      	it	ne
 80015ea:	2301      	movne	r3, #1
 80015ec:	0692      	lsls	r2, r2, #26
 80015ee:	d42d      	bmi.n	800164c <_printf_common+0xb4>
 80015f0:	4649      	mov	r1, r9
 80015f2:	4638      	mov	r0, r7
 80015f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80015f8:	47c0      	blx	r8
 80015fa:	3001      	adds	r0, #1
 80015fc:	d020      	beq.n	8001640 <_printf_common+0xa8>
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	68e5      	ldr	r5, [r4, #12]
 8001602:	f003 0306 	and.w	r3, r3, #6
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf18      	it	ne
 800160a:	2500      	movne	r5, #0
 800160c:	6832      	ldr	r2, [r6, #0]
 800160e:	f04f 0600 	mov.w	r6, #0
 8001612:	68a3      	ldr	r3, [r4, #8]
 8001614:	bf08      	it	eq
 8001616:	1aad      	subeq	r5, r5, r2
 8001618:	6922      	ldr	r2, [r4, #16]
 800161a:	bf08      	it	eq
 800161c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001620:	4293      	cmp	r3, r2
 8001622:	bfc4      	itt	gt
 8001624:	1a9b      	subgt	r3, r3, r2
 8001626:	18ed      	addgt	r5, r5, r3
 8001628:	341a      	adds	r4, #26
 800162a:	42b5      	cmp	r5, r6
 800162c:	d11a      	bne.n	8001664 <_printf_common+0xcc>
 800162e:	2000      	movs	r0, #0
 8001630:	e008      	b.n	8001644 <_printf_common+0xac>
 8001632:	2301      	movs	r3, #1
 8001634:	4652      	mov	r2, sl
 8001636:	4649      	mov	r1, r9
 8001638:	4638      	mov	r0, r7
 800163a:	47c0      	blx	r8
 800163c:	3001      	adds	r0, #1
 800163e:	d103      	bne.n	8001648 <_printf_common+0xb0>
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001648:	3501      	adds	r5, #1
 800164a:	e7c4      	b.n	80015d6 <_printf_common+0x3e>
 800164c:	2030      	movs	r0, #48	; 0x30
 800164e:	18e1      	adds	r1, r4, r3
 8001650:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800165a:	4422      	add	r2, r4
 800165c:	3302      	adds	r3, #2
 800165e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001662:	e7c5      	b.n	80015f0 <_printf_common+0x58>
 8001664:	2301      	movs	r3, #1
 8001666:	4622      	mov	r2, r4
 8001668:	4649      	mov	r1, r9
 800166a:	4638      	mov	r0, r7
 800166c:	47c0      	blx	r8
 800166e:	3001      	adds	r0, #1
 8001670:	d0e6      	beq.n	8001640 <_printf_common+0xa8>
 8001672:	3601      	adds	r6, #1
 8001674:	e7d9      	b.n	800162a <_printf_common+0x92>
	...

08001678 <_printf_i>:
 8001678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800167c:	7e0f      	ldrb	r7, [r1, #24]
 800167e:	4691      	mov	r9, r2
 8001680:	2f78      	cmp	r7, #120	; 0x78
 8001682:	4680      	mov	r8, r0
 8001684:	460c      	mov	r4, r1
 8001686:	469a      	mov	sl, r3
 8001688:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800168a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800168e:	d807      	bhi.n	80016a0 <_printf_i+0x28>
 8001690:	2f62      	cmp	r7, #98	; 0x62
 8001692:	d80a      	bhi.n	80016aa <_printf_i+0x32>
 8001694:	2f00      	cmp	r7, #0
 8001696:	f000 80d9 	beq.w	800184c <_printf_i+0x1d4>
 800169a:	2f58      	cmp	r7, #88	; 0x58
 800169c:	f000 80a4 	beq.w	80017e8 <_printf_i+0x170>
 80016a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80016a8:	e03a      	b.n	8001720 <_printf_i+0xa8>
 80016aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80016ae:	2b15      	cmp	r3, #21
 80016b0:	d8f6      	bhi.n	80016a0 <_printf_i+0x28>
 80016b2:	a101      	add	r1, pc, #4	; (adr r1, 80016b8 <_printf_i+0x40>)
 80016b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80016b8:	08001711 	.word	0x08001711
 80016bc:	08001725 	.word	0x08001725
 80016c0:	080016a1 	.word	0x080016a1
 80016c4:	080016a1 	.word	0x080016a1
 80016c8:	080016a1 	.word	0x080016a1
 80016cc:	080016a1 	.word	0x080016a1
 80016d0:	08001725 	.word	0x08001725
 80016d4:	080016a1 	.word	0x080016a1
 80016d8:	080016a1 	.word	0x080016a1
 80016dc:	080016a1 	.word	0x080016a1
 80016e0:	080016a1 	.word	0x080016a1
 80016e4:	08001833 	.word	0x08001833
 80016e8:	08001755 	.word	0x08001755
 80016ec:	08001815 	.word	0x08001815
 80016f0:	080016a1 	.word	0x080016a1
 80016f4:	080016a1 	.word	0x080016a1
 80016f8:	08001855 	.word	0x08001855
 80016fc:	080016a1 	.word	0x080016a1
 8001700:	08001755 	.word	0x08001755
 8001704:	080016a1 	.word	0x080016a1
 8001708:	080016a1 	.word	0x080016a1
 800170c:	0800181d 	.word	0x0800181d
 8001710:	682b      	ldr	r3, [r5, #0]
 8001712:	1d1a      	adds	r2, r3, #4
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	602a      	str	r2, [r5, #0]
 8001718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800171c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001720:	2301      	movs	r3, #1
 8001722:	e0a4      	b.n	800186e <_printf_i+0x1f6>
 8001724:	6820      	ldr	r0, [r4, #0]
 8001726:	6829      	ldr	r1, [r5, #0]
 8001728:	0606      	lsls	r6, r0, #24
 800172a:	f101 0304 	add.w	r3, r1, #4
 800172e:	d50a      	bpl.n	8001746 <_printf_i+0xce>
 8001730:	680e      	ldr	r6, [r1, #0]
 8001732:	602b      	str	r3, [r5, #0]
 8001734:	2e00      	cmp	r6, #0
 8001736:	da03      	bge.n	8001740 <_printf_i+0xc8>
 8001738:	232d      	movs	r3, #45	; 0x2d
 800173a:	4276      	negs	r6, r6
 800173c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001740:	230a      	movs	r3, #10
 8001742:	485e      	ldr	r0, [pc, #376]	; (80018bc <_printf_i+0x244>)
 8001744:	e019      	b.n	800177a <_printf_i+0x102>
 8001746:	680e      	ldr	r6, [r1, #0]
 8001748:	f010 0f40 	tst.w	r0, #64	; 0x40
 800174c:	602b      	str	r3, [r5, #0]
 800174e:	bf18      	it	ne
 8001750:	b236      	sxthne	r6, r6
 8001752:	e7ef      	b.n	8001734 <_printf_i+0xbc>
 8001754:	682b      	ldr	r3, [r5, #0]
 8001756:	6820      	ldr	r0, [r4, #0]
 8001758:	1d19      	adds	r1, r3, #4
 800175a:	6029      	str	r1, [r5, #0]
 800175c:	0601      	lsls	r1, r0, #24
 800175e:	d501      	bpl.n	8001764 <_printf_i+0xec>
 8001760:	681e      	ldr	r6, [r3, #0]
 8001762:	e002      	b.n	800176a <_printf_i+0xf2>
 8001764:	0646      	lsls	r6, r0, #25
 8001766:	d5fb      	bpl.n	8001760 <_printf_i+0xe8>
 8001768:	881e      	ldrh	r6, [r3, #0]
 800176a:	2f6f      	cmp	r7, #111	; 0x6f
 800176c:	bf0c      	ite	eq
 800176e:	2308      	moveq	r3, #8
 8001770:	230a      	movne	r3, #10
 8001772:	4852      	ldr	r0, [pc, #328]	; (80018bc <_printf_i+0x244>)
 8001774:	2100      	movs	r1, #0
 8001776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800177a:	6865      	ldr	r5, [r4, #4]
 800177c:	2d00      	cmp	r5, #0
 800177e:	bfa8      	it	ge
 8001780:	6821      	ldrge	r1, [r4, #0]
 8001782:	60a5      	str	r5, [r4, #8]
 8001784:	bfa4      	itt	ge
 8001786:	f021 0104 	bicge.w	r1, r1, #4
 800178a:	6021      	strge	r1, [r4, #0]
 800178c:	b90e      	cbnz	r6, 8001792 <_printf_i+0x11a>
 800178e:	2d00      	cmp	r5, #0
 8001790:	d04d      	beq.n	800182e <_printf_i+0x1b6>
 8001792:	4615      	mov	r5, r2
 8001794:	fbb6 f1f3 	udiv	r1, r6, r3
 8001798:	fb03 6711 	mls	r7, r3, r1, r6
 800179c:	5dc7      	ldrb	r7, [r0, r7]
 800179e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80017a2:	4637      	mov	r7, r6
 80017a4:	42bb      	cmp	r3, r7
 80017a6:	460e      	mov	r6, r1
 80017a8:	d9f4      	bls.n	8001794 <_printf_i+0x11c>
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d10b      	bne.n	80017c6 <_printf_i+0x14e>
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	07de      	lsls	r6, r3, #31
 80017b2:	d508      	bpl.n	80017c6 <_printf_i+0x14e>
 80017b4:	6923      	ldr	r3, [r4, #16]
 80017b6:	6861      	ldr	r1, [r4, #4]
 80017b8:	4299      	cmp	r1, r3
 80017ba:	bfde      	ittt	le
 80017bc:	2330      	movle	r3, #48	; 0x30
 80017be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80017c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80017c6:	1b52      	subs	r2, r2, r5
 80017c8:	6122      	str	r2, [r4, #16]
 80017ca:	464b      	mov	r3, r9
 80017cc:	4621      	mov	r1, r4
 80017ce:	4640      	mov	r0, r8
 80017d0:	f8cd a000 	str.w	sl, [sp]
 80017d4:	aa03      	add	r2, sp, #12
 80017d6:	f7ff fedf 	bl	8001598 <_printf_common>
 80017da:	3001      	adds	r0, #1
 80017dc:	d14c      	bne.n	8001878 <_printf_i+0x200>
 80017de:	f04f 30ff 	mov.w	r0, #4294967295
 80017e2:	b004      	add	sp, #16
 80017e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017e8:	4834      	ldr	r0, [pc, #208]	; (80018bc <_printf_i+0x244>)
 80017ea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80017ee:	6829      	ldr	r1, [r5, #0]
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80017f6:	6029      	str	r1, [r5, #0]
 80017f8:	061d      	lsls	r5, r3, #24
 80017fa:	d514      	bpl.n	8001826 <_printf_i+0x1ae>
 80017fc:	07df      	lsls	r7, r3, #31
 80017fe:	bf44      	itt	mi
 8001800:	f043 0320 	orrmi.w	r3, r3, #32
 8001804:	6023      	strmi	r3, [r4, #0]
 8001806:	b91e      	cbnz	r6, 8001810 <_printf_i+0x198>
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	f023 0320 	bic.w	r3, r3, #32
 800180e:	6023      	str	r3, [r4, #0]
 8001810:	2310      	movs	r3, #16
 8001812:	e7af      	b.n	8001774 <_printf_i+0xfc>
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	f043 0320 	orr.w	r3, r3, #32
 800181a:	6023      	str	r3, [r4, #0]
 800181c:	2378      	movs	r3, #120	; 0x78
 800181e:	4828      	ldr	r0, [pc, #160]	; (80018c0 <_printf_i+0x248>)
 8001820:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001824:	e7e3      	b.n	80017ee <_printf_i+0x176>
 8001826:	0659      	lsls	r1, r3, #25
 8001828:	bf48      	it	mi
 800182a:	b2b6      	uxthmi	r6, r6
 800182c:	e7e6      	b.n	80017fc <_printf_i+0x184>
 800182e:	4615      	mov	r5, r2
 8001830:	e7bb      	b.n	80017aa <_printf_i+0x132>
 8001832:	682b      	ldr	r3, [r5, #0]
 8001834:	6826      	ldr	r6, [r4, #0]
 8001836:	1d18      	adds	r0, r3, #4
 8001838:	6961      	ldr	r1, [r4, #20]
 800183a:	6028      	str	r0, [r5, #0]
 800183c:	0635      	lsls	r5, r6, #24
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	d501      	bpl.n	8001846 <_printf_i+0x1ce>
 8001842:	6019      	str	r1, [r3, #0]
 8001844:	e002      	b.n	800184c <_printf_i+0x1d4>
 8001846:	0670      	lsls	r0, r6, #25
 8001848:	d5fb      	bpl.n	8001842 <_printf_i+0x1ca>
 800184a:	8019      	strh	r1, [r3, #0]
 800184c:	2300      	movs	r3, #0
 800184e:	4615      	mov	r5, r2
 8001850:	6123      	str	r3, [r4, #16]
 8001852:	e7ba      	b.n	80017ca <_printf_i+0x152>
 8001854:	682b      	ldr	r3, [r5, #0]
 8001856:	2100      	movs	r1, #0
 8001858:	1d1a      	adds	r2, r3, #4
 800185a:	602a      	str	r2, [r5, #0]
 800185c:	681d      	ldr	r5, [r3, #0]
 800185e:	6862      	ldr	r2, [r4, #4]
 8001860:	4628      	mov	r0, r5
 8001862:	f000 f82f 	bl	80018c4 <memchr>
 8001866:	b108      	cbz	r0, 800186c <_printf_i+0x1f4>
 8001868:	1b40      	subs	r0, r0, r5
 800186a:	6060      	str	r0, [r4, #4]
 800186c:	6863      	ldr	r3, [r4, #4]
 800186e:	6123      	str	r3, [r4, #16]
 8001870:	2300      	movs	r3, #0
 8001872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001876:	e7a8      	b.n	80017ca <_printf_i+0x152>
 8001878:	462a      	mov	r2, r5
 800187a:	4649      	mov	r1, r9
 800187c:	4640      	mov	r0, r8
 800187e:	6923      	ldr	r3, [r4, #16]
 8001880:	47d0      	blx	sl
 8001882:	3001      	adds	r0, #1
 8001884:	d0ab      	beq.n	80017de <_printf_i+0x166>
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	079b      	lsls	r3, r3, #30
 800188a:	d413      	bmi.n	80018b4 <_printf_i+0x23c>
 800188c:	68e0      	ldr	r0, [r4, #12]
 800188e:	9b03      	ldr	r3, [sp, #12]
 8001890:	4298      	cmp	r0, r3
 8001892:	bfb8      	it	lt
 8001894:	4618      	movlt	r0, r3
 8001896:	e7a4      	b.n	80017e2 <_printf_i+0x16a>
 8001898:	2301      	movs	r3, #1
 800189a:	4632      	mov	r2, r6
 800189c:	4649      	mov	r1, r9
 800189e:	4640      	mov	r0, r8
 80018a0:	47d0      	blx	sl
 80018a2:	3001      	adds	r0, #1
 80018a4:	d09b      	beq.n	80017de <_printf_i+0x166>
 80018a6:	3501      	adds	r5, #1
 80018a8:	68e3      	ldr	r3, [r4, #12]
 80018aa:	9903      	ldr	r1, [sp, #12]
 80018ac:	1a5b      	subs	r3, r3, r1
 80018ae:	42ab      	cmp	r3, r5
 80018b0:	dcf2      	bgt.n	8001898 <_printf_i+0x220>
 80018b2:	e7eb      	b.n	800188c <_printf_i+0x214>
 80018b4:	2500      	movs	r5, #0
 80018b6:	f104 0619 	add.w	r6, r4, #25
 80018ba:	e7f5      	b.n	80018a8 <_printf_i+0x230>
 80018bc:	08001bd0 	.word	0x08001bd0
 80018c0:	08001be1 	.word	0x08001be1

080018c4 <memchr>:
 80018c4:	4603      	mov	r3, r0
 80018c6:	b510      	push	{r4, lr}
 80018c8:	b2c9      	uxtb	r1, r1
 80018ca:	4402      	add	r2, r0
 80018cc:	4293      	cmp	r3, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	d101      	bne.n	80018d6 <memchr+0x12>
 80018d2:	2000      	movs	r0, #0
 80018d4:	e003      	b.n	80018de <memchr+0x1a>
 80018d6:	7804      	ldrb	r4, [r0, #0]
 80018d8:	3301      	adds	r3, #1
 80018da:	428c      	cmp	r4, r1
 80018dc:	d1f6      	bne.n	80018cc <memchr+0x8>
 80018de:	bd10      	pop	{r4, pc}

080018e0 <memcpy>:
 80018e0:	440a      	add	r2, r1
 80018e2:	4291      	cmp	r1, r2
 80018e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80018e8:	d100      	bne.n	80018ec <memcpy+0xc>
 80018ea:	4770      	bx	lr
 80018ec:	b510      	push	{r4, lr}
 80018ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80018f2:	4291      	cmp	r1, r2
 80018f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80018f8:	d1f9      	bne.n	80018ee <memcpy+0xe>
 80018fa:	bd10      	pop	{r4, pc}

080018fc <memmove>:
 80018fc:	4288      	cmp	r0, r1
 80018fe:	b510      	push	{r4, lr}
 8001900:	eb01 0402 	add.w	r4, r1, r2
 8001904:	d902      	bls.n	800190c <memmove+0x10>
 8001906:	4284      	cmp	r4, r0
 8001908:	4623      	mov	r3, r4
 800190a:	d807      	bhi.n	800191c <memmove+0x20>
 800190c:	1e43      	subs	r3, r0, #1
 800190e:	42a1      	cmp	r1, r4
 8001910:	d008      	beq.n	8001924 <memmove+0x28>
 8001912:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001916:	f803 2f01 	strb.w	r2, [r3, #1]!
 800191a:	e7f8      	b.n	800190e <memmove+0x12>
 800191c:	4601      	mov	r1, r0
 800191e:	4402      	add	r2, r0
 8001920:	428a      	cmp	r2, r1
 8001922:	d100      	bne.n	8001926 <memmove+0x2a>
 8001924:	bd10      	pop	{r4, pc}
 8001926:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800192a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800192e:	e7f7      	b.n	8001920 <memmove+0x24>

08001930 <_free_r>:
 8001930:	b538      	push	{r3, r4, r5, lr}
 8001932:	4605      	mov	r5, r0
 8001934:	2900      	cmp	r1, #0
 8001936:	d040      	beq.n	80019ba <_free_r+0x8a>
 8001938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800193c:	1f0c      	subs	r4, r1, #4
 800193e:	2b00      	cmp	r3, #0
 8001940:	bfb8      	it	lt
 8001942:	18e4      	addlt	r4, r4, r3
 8001944:	f000 f910 	bl	8001b68 <__malloc_lock>
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <_free_r+0x8c>)
 800194a:	6813      	ldr	r3, [r2, #0]
 800194c:	b933      	cbnz	r3, 800195c <_free_r+0x2c>
 800194e:	6063      	str	r3, [r4, #4]
 8001950:	6014      	str	r4, [r2, #0]
 8001952:	4628      	mov	r0, r5
 8001954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001958:	f000 b90c 	b.w	8001b74 <__malloc_unlock>
 800195c:	42a3      	cmp	r3, r4
 800195e:	d908      	bls.n	8001972 <_free_r+0x42>
 8001960:	6820      	ldr	r0, [r4, #0]
 8001962:	1821      	adds	r1, r4, r0
 8001964:	428b      	cmp	r3, r1
 8001966:	bf01      	itttt	eq
 8001968:	6819      	ldreq	r1, [r3, #0]
 800196a:	685b      	ldreq	r3, [r3, #4]
 800196c:	1809      	addeq	r1, r1, r0
 800196e:	6021      	streq	r1, [r4, #0]
 8001970:	e7ed      	b.n	800194e <_free_r+0x1e>
 8001972:	461a      	mov	r2, r3
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	b10b      	cbz	r3, 800197c <_free_r+0x4c>
 8001978:	42a3      	cmp	r3, r4
 800197a:	d9fa      	bls.n	8001972 <_free_r+0x42>
 800197c:	6811      	ldr	r1, [r2, #0]
 800197e:	1850      	adds	r0, r2, r1
 8001980:	42a0      	cmp	r0, r4
 8001982:	d10b      	bne.n	800199c <_free_r+0x6c>
 8001984:	6820      	ldr	r0, [r4, #0]
 8001986:	4401      	add	r1, r0
 8001988:	1850      	adds	r0, r2, r1
 800198a:	4283      	cmp	r3, r0
 800198c:	6011      	str	r1, [r2, #0]
 800198e:	d1e0      	bne.n	8001952 <_free_r+0x22>
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4401      	add	r1, r0
 8001996:	6011      	str	r1, [r2, #0]
 8001998:	6053      	str	r3, [r2, #4]
 800199a:	e7da      	b.n	8001952 <_free_r+0x22>
 800199c:	d902      	bls.n	80019a4 <_free_r+0x74>
 800199e:	230c      	movs	r3, #12
 80019a0:	602b      	str	r3, [r5, #0]
 80019a2:	e7d6      	b.n	8001952 <_free_r+0x22>
 80019a4:	6820      	ldr	r0, [r4, #0]
 80019a6:	1821      	adds	r1, r4, r0
 80019a8:	428b      	cmp	r3, r1
 80019aa:	bf01      	itttt	eq
 80019ac:	6819      	ldreq	r1, [r3, #0]
 80019ae:	685b      	ldreq	r3, [r3, #4]
 80019b0:	1809      	addeq	r1, r1, r0
 80019b2:	6021      	streq	r1, [r4, #0]
 80019b4:	6063      	str	r3, [r4, #4]
 80019b6:	6054      	str	r4, [r2, #4]
 80019b8:	e7cb      	b.n	8001952 <_free_r+0x22>
 80019ba:	bd38      	pop	{r3, r4, r5, pc}
 80019bc:	2000010c 	.word	0x2000010c

080019c0 <sbrk_aligned>:
 80019c0:	b570      	push	{r4, r5, r6, lr}
 80019c2:	4e0e      	ldr	r6, [pc, #56]	; (80019fc <sbrk_aligned+0x3c>)
 80019c4:	460c      	mov	r4, r1
 80019c6:	6831      	ldr	r1, [r6, #0]
 80019c8:	4605      	mov	r5, r0
 80019ca:	b911      	cbnz	r1, 80019d2 <sbrk_aligned+0x12>
 80019cc:	f000 f8bc 	bl	8001b48 <_sbrk_r>
 80019d0:	6030      	str	r0, [r6, #0]
 80019d2:	4621      	mov	r1, r4
 80019d4:	4628      	mov	r0, r5
 80019d6:	f000 f8b7 	bl	8001b48 <_sbrk_r>
 80019da:	1c43      	adds	r3, r0, #1
 80019dc:	d00a      	beq.n	80019f4 <sbrk_aligned+0x34>
 80019de:	1cc4      	adds	r4, r0, #3
 80019e0:	f024 0403 	bic.w	r4, r4, #3
 80019e4:	42a0      	cmp	r0, r4
 80019e6:	d007      	beq.n	80019f8 <sbrk_aligned+0x38>
 80019e8:	1a21      	subs	r1, r4, r0
 80019ea:	4628      	mov	r0, r5
 80019ec:	f000 f8ac 	bl	8001b48 <_sbrk_r>
 80019f0:	3001      	adds	r0, #1
 80019f2:	d101      	bne.n	80019f8 <sbrk_aligned+0x38>
 80019f4:	f04f 34ff 	mov.w	r4, #4294967295
 80019f8:	4620      	mov	r0, r4
 80019fa:	bd70      	pop	{r4, r5, r6, pc}
 80019fc:	20000110 	.word	0x20000110

08001a00 <_malloc_r>:
 8001a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a04:	1ccd      	adds	r5, r1, #3
 8001a06:	f025 0503 	bic.w	r5, r5, #3
 8001a0a:	3508      	adds	r5, #8
 8001a0c:	2d0c      	cmp	r5, #12
 8001a0e:	bf38      	it	cc
 8001a10:	250c      	movcc	r5, #12
 8001a12:	2d00      	cmp	r5, #0
 8001a14:	4607      	mov	r7, r0
 8001a16:	db01      	blt.n	8001a1c <_malloc_r+0x1c>
 8001a18:	42a9      	cmp	r1, r5
 8001a1a:	d905      	bls.n	8001a28 <_malloc_r+0x28>
 8001a1c:	230c      	movs	r3, #12
 8001a1e:	2600      	movs	r6, #0
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	4630      	mov	r0, r6
 8001a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a28:	4e2e      	ldr	r6, [pc, #184]	; (8001ae4 <_malloc_r+0xe4>)
 8001a2a:	f000 f89d 	bl	8001b68 <__malloc_lock>
 8001a2e:	6833      	ldr	r3, [r6, #0]
 8001a30:	461c      	mov	r4, r3
 8001a32:	bb34      	cbnz	r4, 8001a82 <_malloc_r+0x82>
 8001a34:	4629      	mov	r1, r5
 8001a36:	4638      	mov	r0, r7
 8001a38:	f7ff ffc2 	bl	80019c0 <sbrk_aligned>
 8001a3c:	1c43      	adds	r3, r0, #1
 8001a3e:	4604      	mov	r4, r0
 8001a40:	d14d      	bne.n	8001ade <_malloc_r+0xde>
 8001a42:	6834      	ldr	r4, [r6, #0]
 8001a44:	4626      	mov	r6, r4
 8001a46:	2e00      	cmp	r6, #0
 8001a48:	d140      	bne.n	8001acc <_malloc_r+0xcc>
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	4631      	mov	r1, r6
 8001a4e:	4638      	mov	r0, r7
 8001a50:	eb04 0803 	add.w	r8, r4, r3
 8001a54:	f000 f878 	bl	8001b48 <_sbrk_r>
 8001a58:	4580      	cmp	r8, r0
 8001a5a:	d13a      	bne.n	8001ad2 <_malloc_r+0xd2>
 8001a5c:	6821      	ldr	r1, [r4, #0]
 8001a5e:	3503      	adds	r5, #3
 8001a60:	1a6d      	subs	r5, r5, r1
 8001a62:	f025 0503 	bic.w	r5, r5, #3
 8001a66:	3508      	adds	r5, #8
 8001a68:	2d0c      	cmp	r5, #12
 8001a6a:	bf38      	it	cc
 8001a6c:	250c      	movcc	r5, #12
 8001a6e:	4638      	mov	r0, r7
 8001a70:	4629      	mov	r1, r5
 8001a72:	f7ff ffa5 	bl	80019c0 <sbrk_aligned>
 8001a76:	3001      	adds	r0, #1
 8001a78:	d02b      	beq.n	8001ad2 <_malloc_r+0xd2>
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	442b      	add	r3, r5
 8001a7e:	6023      	str	r3, [r4, #0]
 8001a80:	e00e      	b.n	8001aa0 <_malloc_r+0xa0>
 8001a82:	6822      	ldr	r2, [r4, #0]
 8001a84:	1b52      	subs	r2, r2, r5
 8001a86:	d41e      	bmi.n	8001ac6 <_malloc_r+0xc6>
 8001a88:	2a0b      	cmp	r2, #11
 8001a8a:	d916      	bls.n	8001aba <_malloc_r+0xba>
 8001a8c:	1961      	adds	r1, r4, r5
 8001a8e:	42a3      	cmp	r3, r4
 8001a90:	6025      	str	r5, [r4, #0]
 8001a92:	bf18      	it	ne
 8001a94:	6059      	strne	r1, [r3, #4]
 8001a96:	6863      	ldr	r3, [r4, #4]
 8001a98:	bf08      	it	eq
 8001a9a:	6031      	streq	r1, [r6, #0]
 8001a9c:	5162      	str	r2, [r4, r5]
 8001a9e:	604b      	str	r3, [r1, #4]
 8001aa0:	4638      	mov	r0, r7
 8001aa2:	f104 060b 	add.w	r6, r4, #11
 8001aa6:	f000 f865 	bl	8001b74 <__malloc_unlock>
 8001aaa:	f026 0607 	bic.w	r6, r6, #7
 8001aae:	1d23      	adds	r3, r4, #4
 8001ab0:	1af2      	subs	r2, r6, r3
 8001ab2:	d0b6      	beq.n	8001a22 <_malloc_r+0x22>
 8001ab4:	1b9b      	subs	r3, r3, r6
 8001ab6:	50a3      	str	r3, [r4, r2]
 8001ab8:	e7b3      	b.n	8001a22 <_malloc_r+0x22>
 8001aba:	6862      	ldr	r2, [r4, #4]
 8001abc:	42a3      	cmp	r3, r4
 8001abe:	bf0c      	ite	eq
 8001ac0:	6032      	streq	r2, [r6, #0]
 8001ac2:	605a      	strne	r2, [r3, #4]
 8001ac4:	e7ec      	b.n	8001aa0 <_malloc_r+0xa0>
 8001ac6:	4623      	mov	r3, r4
 8001ac8:	6864      	ldr	r4, [r4, #4]
 8001aca:	e7b2      	b.n	8001a32 <_malloc_r+0x32>
 8001acc:	4634      	mov	r4, r6
 8001ace:	6876      	ldr	r6, [r6, #4]
 8001ad0:	e7b9      	b.n	8001a46 <_malloc_r+0x46>
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	4638      	mov	r0, r7
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	f000 f84c 	bl	8001b74 <__malloc_unlock>
 8001adc:	e7a1      	b.n	8001a22 <_malloc_r+0x22>
 8001ade:	6025      	str	r5, [r4, #0]
 8001ae0:	e7de      	b.n	8001aa0 <_malloc_r+0xa0>
 8001ae2:	bf00      	nop
 8001ae4:	2000010c 	.word	0x2000010c

08001ae8 <_realloc_r>:
 8001ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aec:	4680      	mov	r8, r0
 8001aee:	4614      	mov	r4, r2
 8001af0:	460e      	mov	r6, r1
 8001af2:	b921      	cbnz	r1, 8001afe <_realloc_r+0x16>
 8001af4:	4611      	mov	r1, r2
 8001af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001afa:	f7ff bf81 	b.w	8001a00 <_malloc_r>
 8001afe:	b92a      	cbnz	r2, 8001b0c <_realloc_r+0x24>
 8001b00:	f7ff ff16 	bl	8001930 <_free_r>
 8001b04:	4625      	mov	r5, r4
 8001b06:	4628      	mov	r0, r5
 8001b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b0c:	f000 f838 	bl	8001b80 <_malloc_usable_size_r>
 8001b10:	4284      	cmp	r4, r0
 8001b12:	4607      	mov	r7, r0
 8001b14:	d802      	bhi.n	8001b1c <_realloc_r+0x34>
 8001b16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001b1a:	d812      	bhi.n	8001b42 <_realloc_r+0x5a>
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	4640      	mov	r0, r8
 8001b20:	f7ff ff6e 	bl	8001a00 <_malloc_r>
 8001b24:	4605      	mov	r5, r0
 8001b26:	2800      	cmp	r0, #0
 8001b28:	d0ed      	beq.n	8001b06 <_realloc_r+0x1e>
 8001b2a:	42bc      	cmp	r4, r7
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	4631      	mov	r1, r6
 8001b30:	bf28      	it	cs
 8001b32:	463a      	movcs	r2, r7
 8001b34:	f7ff fed4 	bl	80018e0 <memcpy>
 8001b38:	4631      	mov	r1, r6
 8001b3a:	4640      	mov	r0, r8
 8001b3c:	f7ff fef8 	bl	8001930 <_free_r>
 8001b40:	e7e1      	b.n	8001b06 <_realloc_r+0x1e>
 8001b42:	4635      	mov	r5, r6
 8001b44:	e7df      	b.n	8001b06 <_realloc_r+0x1e>
	...

08001b48 <_sbrk_r>:
 8001b48:	b538      	push	{r3, r4, r5, lr}
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	4d05      	ldr	r5, [pc, #20]	; (8001b64 <_sbrk_r+0x1c>)
 8001b4e:	4604      	mov	r4, r0
 8001b50:	4608      	mov	r0, r1
 8001b52:	602b      	str	r3, [r5, #0]
 8001b54:	f7ff fb1a 	bl	800118c <_sbrk>
 8001b58:	1c43      	adds	r3, r0, #1
 8001b5a:	d102      	bne.n	8001b62 <_sbrk_r+0x1a>
 8001b5c:	682b      	ldr	r3, [r5, #0]
 8001b5e:	b103      	cbz	r3, 8001b62 <_sbrk_r+0x1a>
 8001b60:	6023      	str	r3, [r4, #0]
 8001b62:	bd38      	pop	{r3, r4, r5, pc}
 8001b64:	20000114 	.word	0x20000114

08001b68 <__malloc_lock>:
 8001b68:	4801      	ldr	r0, [pc, #4]	; (8001b70 <__malloc_lock+0x8>)
 8001b6a:	f000 b811 	b.w	8001b90 <__retarget_lock_acquire_recursive>
 8001b6e:	bf00      	nop
 8001b70:	20000118 	.word	0x20000118

08001b74 <__malloc_unlock>:
 8001b74:	4801      	ldr	r0, [pc, #4]	; (8001b7c <__malloc_unlock+0x8>)
 8001b76:	f000 b80c 	b.w	8001b92 <__retarget_lock_release_recursive>
 8001b7a:	bf00      	nop
 8001b7c:	20000118 	.word	0x20000118

08001b80 <_malloc_usable_size_r>:
 8001b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b84:	1f18      	subs	r0, r3, #4
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bfbc      	itt	lt
 8001b8a:	580b      	ldrlt	r3, [r1, r0]
 8001b8c:	18c0      	addlt	r0, r0, r3
 8001b8e:	4770      	bx	lr

08001b90 <__retarget_lock_acquire_recursive>:
 8001b90:	4770      	bx	lr

08001b92 <__retarget_lock_release_recursive>:
 8001b92:	4770      	bx	lr

08001b94 <_init>:
 8001b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b96:	bf00      	nop
 8001b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b9a:	bc08      	pop	{r3}
 8001b9c:	469e      	mov	lr, r3
 8001b9e:	4770      	bx	lr

08001ba0 <_fini>:
 8001ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba2:	bf00      	nop
 8001ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ba6:	bc08      	pop	{r3}
 8001ba8:	469e      	mov	lr, r3
 8001baa:	4770      	bx	lr
