
sayed_ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021b8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080022e8  080022e8  000122e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002330  08002330  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002330  08002330  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002330  08002330  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002330  08002330  00012330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002334  08002334  00012334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000078  080023b0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  080023b0  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001eb7  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ab3  00000000  00000000  00021f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000398  00000000  00000000  00022a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002e0  00000000  00000000  00022da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001ef9  00000000  00000000  00023088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c08  00000000  00000000  00024f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ca5c  00000000  00000000  00026b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000335e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001010  00000000  00000000  00033638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000078 	.word	0x20000078
 800014c:	00000000 	.word	0x00000000
 8000150:	080022d0 	.word	0x080022d0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000007c 	.word	0x2000007c
 800016c:	080022d0 	.word	0x080022d0

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__aeabi_f2uiz>:
 800062c:	0042      	lsls	r2, r0, #1
 800062e:	d20e      	bcs.n	800064e <__aeabi_f2uiz+0x22>
 8000630:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000634:	d30b      	bcc.n	800064e <__aeabi_f2uiz+0x22>
 8000636:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800063a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800063e:	d409      	bmi.n	8000654 <__aeabi_f2uiz+0x28>
 8000640:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000648:	fa23 f002 	lsr.w	r0, r3, r2
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr
 8000654:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000658:	d101      	bne.n	800065e <__aeabi_f2uiz+0x32>
 800065a:	0242      	lsls	r2, r0, #9
 800065c:	d102      	bne.n	8000664 <__aeabi_f2uiz+0x38>
 800065e:	f04f 30ff 	mov.w	r0, #4294967295
 8000662:	4770      	bx	lr
 8000664:	f04f 0000 	mov.w	r0, #0
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <EXTI0_IRQHandler>:
    EXTI_CallBack[Copy_u8Line] = ptr; /*Making the global array hold the ptr value in the line i want*/
}

/*ISR Function i can say its >> (Handler Function for EXTI0 (IRQ >> means (Interrupt Request)))*/
void EXTI0_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
    EXTI_CallBack[0](); /*Calling the EXTI_CallBack and calling it means executing it and executing it means executing the next line*/
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <EXTI0_IRQHandler+0x1c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4798      	blx	r3
    SET_BIT(EXTI_PR, 0); /*Clearing the pending bit(pending flag) in ISR for EXTI0*/
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <EXTI0_IRQHandler+0x20>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a04      	ldr	r2, [pc, #16]	; (800068c <EXTI0_IRQHandler+0x20>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6013      	str	r3, [r2, #0]
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000094 	.word	0x20000094
 800068c:	40010414 	.word	0x40010414

08000690 <EXTI1_IRQHandler>:

/*ISR Function i can say its >> (Handler Function for EXTI1 (IRQ >> means (Interrupt Request)))*/
void EXTI1_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
    EXTI_CallBack[1](); /*Calling the EXTI_CallBack and calling it means executing it and executing it means executing the next line*/
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <EXTI1_IRQHandler+0x1c>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4798      	blx	r3
    SET_BIT(EXTI_PR, 1); /*Clearing the pending bit(pending flag) in ISR for EXTI1*/
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <EXTI1_IRQHandler+0x20>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <EXTI1_IRQHandler+0x20>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	6013      	str	r3, [r2, #0]
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000094 	.word	0x20000094
 80006b0:	40010414 	.word	0x40010414

080006b4 <EXTI2_IRQHandler>:

/*ISR Function i can say its >> (Handler Function for EXTI2 (IRQ >> means (Interrupt Request)))*/
void EXTI2_IRQHandler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
    EXTI_CallBack[2](); /*Calling the EXTI_CallBack and calling it means executing it and executing it means executing the next line*/
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <EXTI2_IRQHandler+0x1c>)
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	4798      	blx	r3
    SET_BIT(EXTI_PR, 2); /*Clearing the pending bit(pending flag) in ISR for EXTI2*/
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <EXTI2_IRQHandler+0x20>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <EXTI2_IRQHandler+0x20>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6013      	str	r3, [r2, #0]
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000094 	.word	0x20000094
 80006d4:	40010414 	.word	0x40010414

080006d8 <EXTI3_IRQHandler>:

/*ISR Function i can say its >> (Handler Function for EXTI3 (IRQ >> means (Interrupt Request)))*/
void EXTI3_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
    EXTI_CallBack[3](); /*Calling the EXTI_CallBack and calling it means executing it and executing it means executing the next line*/
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <EXTI3_IRQHandler+0x1c>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	4798      	blx	r3
    SET_BIT(EXTI_PR, 3); /*Clearing the pending bit(pending flag) in ISR for EXTI3*/
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <EXTI3_IRQHandler+0x20>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <EXTI3_IRQHandler+0x20>)
 80006e8:	f043 0308 	orr.w	r3, r3, #8
 80006ec:	6013      	str	r3, [r2, #0]
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000094 	.word	0x20000094
 80006f8:	40010414 	.word	0x40010414

080006fc <EXTI4_IRQHandler>:

/*ISR Function i can say its >> (Handler Function for EXTI4 (IRQ >> means (Interrupt Request)))*/
void EXTI4_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
    EXTI_CallBack[4](); /*Calling the EXTI_CallBack and calling it means executing it and executing it means executing the next line*/
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <EXTI4_IRQHandler+0x1c>)
 8000702:	691b      	ldr	r3, [r3, #16]
 8000704:	4798      	blx	r3
    SET_BIT(EXTI_PR, 4); /*Clearing the pending bit(pending flag) in ISR for EXTI4*/
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <EXTI4_IRQHandler+0x20>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a04      	ldr	r2, [pc, #16]	; (800071c <EXTI4_IRQHandler+0x20>)
 800070c:	f043 0310 	orr.w	r3, r3, #16
 8000710:	6013      	str	r3, [r2, #0]
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000094 	.word	0x20000094
 800071c:	40010414 	.word	0x40010414

08000720 <MGPIO_voidSetPinMode>:
#include "GPIO_interface.h"
#include "GPIO_private.h"

/*Function to set the direction*/
void MGPIO_voidSetPinMode(Gpio_PortType Copy_u8Port, Gpio_PinType Copy_u8Pin, u8 Copy_u8Mode)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
 800072a:	460b      	mov	r3, r1
 800072c:	71bb      	strb	r3, [r7, #6]
 800072e:	4613      	mov	r3, r2
 8000730:	717b      	strb	r3, [r7, #5]
    if(Copy_u8Pin <= 15)  /* Check if the pin from 0 to 15 (all pins at the register) */
 8000732:	79bb      	ldrb	r3, [r7, #6]
 8000734:	2b0f      	cmp	r3, #15
 8000736:	f200 80be 	bhi.w	80008b6 <MGPIO_voidSetPinMode+0x196>
    {
        switch (Copy_u8Port)  /* Switch to find the port i want */
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b02      	cmp	r3, #2
 800073e:	d07a      	beq.n	8000836 <MGPIO_voidSetPinMode+0x116>
 8000740:	2b02      	cmp	r3, #2
 8000742:	f300 80b1 	bgt.w	80008a8 <MGPIO_voidSetPinMode+0x188>
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <MGPIO_voidSetPinMode+0x30>
 800074a:	2b01      	cmp	r3, #1
 800074c:	d03a      	beq.n	80007c4 <MGPIO_voidSetPinMode+0xa4>
                GPIOC_CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); /* Writing on the register the mode i want */
            }
            break;
        
        default:
            break;
 800074e:	e0ab      	b.n	80008a8 <MGPIO_voidSetPinMode+0x188>
            if(Copy_u8Pin <= 7) /* Check if the pin from 0 to 7 (Because it's the CRL (low)) */
 8000750:	79bb      	ldrb	r3, [r7, #6]
 8000752:	2b07      	cmp	r3, #7
 8000754:	d817      	bhi.n	8000786 <MGPIO_voidSetPinMode+0x66>
                GPIOA_CRL &= ~((0b1111) << (Copy_u8Pin * 4)); /* RESET the 4 BITS of the pin before using to make sure there is nothing on it*/
 8000756:	4b5a      	ldr	r3, [pc, #360]	; (80008c0 <MGPIO_voidSetPinMode+0x1a0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	79ba      	ldrb	r2, [r7, #6]
 800075c:	0092      	lsls	r2, r2, #2
 800075e:	210f      	movs	r1, #15
 8000760:	fa01 f202 	lsl.w	r2, r1, r2
 8000764:	43d2      	mvns	r2, r2
 8000766:	4611      	mov	r1, r2
 8000768:	4a55      	ldr	r2, [pc, #340]	; (80008c0 <MGPIO_voidSetPinMode+0x1a0>)
 800076a:	400b      	ands	r3, r1
 800076c:	6013      	str	r3, [r2, #0]
                GPIOA_CRL |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); /* Writing on the register the mode i want */
 800076e:	4b54      	ldr	r3, [pc, #336]	; (80008c0 <MGPIO_voidSetPinMode+0x1a0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	7979      	ldrb	r1, [r7, #5]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	0092      	lsls	r2, r2, #2
 8000778:	fa01 f202 	lsl.w	r2, r1, r2
 800077c:	4611      	mov	r1, r2
 800077e:	4a50      	ldr	r2, [pc, #320]	; (80008c0 <MGPIO_voidSetPinMode+0x1a0>)
 8000780:	430b      	orrs	r3, r1
 8000782:	6013      	str	r3, [r2, #0]
            break;
 8000784:	e092      	b.n	80008ac <MGPIO_voidSetPinMode+0x18c>
            else if(Copy_u8Pin <= 15) /* Check if the pin from 8 to 15 (Because it's the CRH (High)) */
 8000786:	79bb      	ldrb	r3, [r7, #6]
 8000788:	2b0f      	cmp	r3, #15
 800078a:	f200 808f 	bhi.w	80008ac <MGPIO_voidSetPinMode+0x18c>
                Copy_u8Pin -= 8; /* to make sure it will write at the right pin because if i say (15*4 = 60) so i did that to make sure it's right */
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	3b08      	subs	r3, #8
 8000792:	71bb      	strb	r3, [r7, #6]
                GPIOA_CRH &= ~((0b1111) << (Copy_u8Pin * 4)); /* RESET the 4 BITS of the pin before using to make sure there is nothing on it*/
 8000794:	4b4b      	ldr	r3, [pc, #300]	; (80008c4 <MGPIO_voidSetPinMode+0x1a4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	79ba      	ldrb	r2, [r7, #6]
 800079a:	0092      	lsls	r2, r2, #2
 800079c:	210f      	movs	r1, #15
 800079e:	fa01 f202 	lsl.w	r2, r1, r2
 80007a2:	43d2      	mvns	r2, r2
 80007a4:	4611      	mov	r1, r2
 80007a6:	4a47      	ldr	r2, [pc, #284]	; (80008c4 <MGPIO_voidSetPinMode+0x1a4>)
 80007a8:	400b      	ands	r3, r1
 80007aa:	6013      	str	r3, [r2, #0]
                GPIOA_CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); /* Writing on the register the mode i want */
 80007ac:	4b45      	ldr	r3, [pc, #276]	; (80008c4 <MGPIO_voidSetPinMode+0x1a4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	7979      	ldrb	r1, [r7, #5]
 80007b2:	79ba      	ldrb	r2, [r7, #6]
 80007b4:	0092      	lsls	r2, r2, #2
 80007b6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a41      	ldr	r2, [pc, #260]	; (80008c4 <MGPIO_voidSetPinMode+0x1a4>)
 80007be:	430b      	orrs	r3, r1
 80007c0:	6013      	str	r3, [r2, #0]
            break;
 80007c2:	e073      	b.n	80008ac <MGPIO_voidSetPinMode+0x18c>
            if(Copy_u8Pin <= 7) /* Check if the pin from 0 to 7 (Because it's the CRL (low)) */
 80007c4:	79bb      	ldrb	r3, [r7, #6]
 80007c6:	2b07      	cmp	r3, #7
 80007c8:	d817      	bhi.n	80007fa <MGPIO_voidSetPinMode+0xda>
                GPIOB_CRL &= ~((0b1111) << (Copy_u8Pin * 4)); /* RESET the 4 BITS of the pin before using to make sure there is nothing on it*/
 80007ca:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <MGPIO_voidSetPinMode+0x1a8>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	79ba      	ldrb	r2, [r7, #6]
 80007d0:	0092      	lsls	r2, r2, #2
 80007d2:	210f      	movs	r1, #15
 80007d4:	fa01 f202 	lsl.w	r2, r1, r2
 80007d8:	43d2      	mvns	r2, r2
 80007da:	4611      	mov	r1, r2
 80007dc:	4a3a      	ldr	r2, [pc, #232]	; (80008c8 <MGPIO_voidSetPinMode+0x1a8>)
 80007de:	400b      	ands	r3, r1
 80007e0:	6013      	str	r3, [r2, #0]
                GPIOB_CRL |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); /* Writing on the register the mode i want */
 80007e2:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <MGPIO_voidSetPinMode+0x1a8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	7979      	ldrb	r1, [r7, #5]
 80007e8:	79ba      	ldrb	r2, [r7, #6]
 80007ea:	0092      	lsls	r2, r2, #2
 80007ec:	fa01 f202 	lsl.w	r2, r1, r2
 80007f0:	4611      	mov	r1, r2
 80007f2:	4a35      	ldr	r2, [pc, #212]	; (80008c8 <MGPIO_voidSetPinMode+0x1a8>)
 80007f4:	430b      	orrs	r3, r1
 80007f6:	6013      	str	r3, [r2, #0]
            break;
 80007f8:	e05a      	b.n	80008b0 <MGPIO_voidSetPinMode+0x190>
            else if(Copy_u8Pin <= 15) /* Check if the pin from 8 to 15 (Because it's the CRH (High)) */
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d857      	bhi.n	80008b0 <MGPIO_voidSetPinMode+0x190>
                Copy_u8Pin -= 8; /* to make sure it will write at the right pin because if i say (15*4 = 60) so i did that to make sure it's right */
 8000800:	79bb      	ldrb	r3, [r7, #6]
 8000802:	3b08      	subs	r3, #8
 8000804:	71bb      	strb	r3, [r7, #6]
                GPIOB_CRH &= ~((0b1111) << (Copy_u8Pin * 4)); /* RESET the 4 BITS of the pin before using to make sure there is nothing on it*/
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <MGPIO_voidSetPinMode+0x1ac>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	79ba      	ldrb	r2, [r7, #6]
 800080c:	0092      	lsls	r2, r2, #2
 800080e:	210f      	movs	r1, #15
 8000810:	fa01 f202 	lsl.w	r2, r1, r2
 8000814:	43d2      	mvns	r2, r2
 8000816:	4611      	mov	r1, r2
 8000818:	4a2c      	ldr	r2, [pc, #176]	; (80008cc <MGPIO_voidSetPinMode+0x1ac>)
 800081a:	400b      	ands	r3, r1
 800081c:	6013      	str	r3, [r2, #0]
                GPIOB_CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); /* Writing on the register the mode i want */
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MGPIO_voidSetPinMode+0x1ac>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	7979      	ldrb	r1, [r7, #5]
 8000824:	79ba      	ldrb	r2, [r7, #6]
 8000826:	0092      	lsls	r2, r2, #2
 8000828:	fa01 f202 	lsl.w	r2, r1, r2
 800082c:	4611      	mov	r1, r2
 800082e:	4a27      	ldr	r2, [pc, #156]	; (80008cc <MGPIO_voidSetPinMode+0x1ac>)
 8000830:	430b      	orrs	r3, r1
 8000832:	6013      	str	r3, [r2, #0]
            break;
 8000834:	e03c      	b.n	80008b0 <MGPIO_voidSetPinMode+0x190>
            if(Copy_u8Pin <= 7) /* Check if the pin from 0 to 7 (Because it's the CRL (low)) */
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	2b07      	cmp	r3, #7
 800083a:	d817      	bhi.n	800086c <MGPIO_voidSetPinMode+0x14c>
                GPIOC_CRL &= ~((0b1111) << (Copy_u8Pin * 4)); /* RESET the 4 BITS of the pin before using to make sure there is nothing on it*/
 800083c:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <MGPIO_voidSetPinMode+0x1b0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	79ba      	ldrb	r2, [r7, #6]
 8000842:	0092      	lsls	r2, r2, #2
 8000844:	210f      	movs	r1, #15
 8000846:	fa01 f202 	lsl.w	r2, r1, r2
 800084a:	43d2      	mvns	r2, r2
 800084c:	4611      	mov	r1, r2
 800084e:	4a20      	ldr	r2, [pc, #128]	; (80008d0 <MGPIO_voidSetPinMode+0x1b0>)
 8000850:	400b      	ands	r3, r1
 8000852:	6013      	str	r3, [r2, #0]
                GPIOC_CRL |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); /* Writing on the register the mode i want */
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MGPIO_voidSetPinMode+0x1b0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	7979      	ldrb	r1, [r7, #5]
 800085a:	79ba      	ldrb	r2, [r7, #6]
 800085c:	0092      	lsls	r2, r2, #2
 800085e:	fa01 f202 	lsl.w	r2, r1, r2
 8000862:	4611      	mov	r1, r2
 8000864:	4a1a      	ldr	r2, [pc, #104]	; (80008d0 <MGPIO_voidSetPinMode+0x1b0>)
 8000866:	430b      	orrs	r3, r1
 8000868:	6013      	str	r3, [r2, #0]
            break;
 800086a:	e023      	b.n	80008b4 <MGPIO_voidSetPinMode+0x194>
            else if(Copy_u8Pin <= 15) /* Check if the pin from 8 to 15 (Because it's the CRH (High)) */
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	2b0f      	cmp	r3, #15
 8000870:	d820      	bhi.n	80008b4 <MGPIO_voidSetPinMode+0x194>
                Copy_u8Pin -= 8; /* to make sure it will write at the right pin because if i say (15*4 = 60) so i did that to make sure it's right */
 8000872:	79bb      	ldrb	r3, [r7, #6]
 8000874:	3b08      	subs	r3, #8
 8000876:	71bb      	strb	r3, [r7, #6]
                GPIOC_CRH &= ~((0b1111) << (Copy_u8Pin * 4)); /* RESET the 4 BITS of the pin before using to make sure there is nothing on it*/
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MGPIO_voidSetPinMode+0x1b4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	79ba      	ldrb	r2, [r7, #6]
 800087e:	0092      	lsls	r2, r2, #2
 8000880:	210f      	movs	r1, #15
 8000882:	fa01 f202 	lsl.w	r2, r1, r2
 8000886:	43d2      	mvns	r2, r2
 8000888:	4611      	mov	r1, r2
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MGPIO_voidSetPinMode+0x1b4>)
 800088c:	400b      	ands	r3, r1
 800088e:	6013      	str	r3, [r2, #0]
                GPIOC_CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4)); /* Writing on the register the mode i want */
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MGPIO_voidSetPinMode+0x1b4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	7979      	ldrb	r1, [r7, #5]
 8000896:	79ba      	ldrb	r2, [r7, #6]
 8000898:	0092      	lsls	r2, r2, #2
 800089a:	fa01 f202 	lsl.w	r2, r1, r2
 800089e:	4611      	mov	r1, r2
 80008a0:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <MGPIO_voidSetPinMode+0x1b4>)
 80008a2:	430b      	orrs	r3, r1
 80008a4:	6013      	str	r3, [r2, #0]
            break;
 80008a6:	e005      	b.n	80008b4 <MGPIO_voidSetPinMode+0x194>
            break;
 80008a8:	bf00      	nop
 80008aa:	e004      	b.n	80008b6 <MGPIO_voidSetPinMode+0x196>
            break;
 80008ac:	bf00      	nop
 80008ae:	e002      	b.n	80008b6 <MGPIO_voidSetPinMode+0x196>
            break;
 80008b0:	bf00      	nop
 80008b2:	e000      	b.n	80008b6 <MGPIO_voidSetPinMode+0x196>
            break;
 80008b4:	bf00      	nop
    }
    else
    {
        /* Invalid pin number error */
    }
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	40010800 	.word	0x40010800
 80008c4:	40010804 	.word	0x40010804
 80008c8:	40010c00 	.word	0x40010c00
 80008cc:	40010c04 	.word	0x40010c04
 80008d0:	40011000 	.word	0x40011000
 80008d4:	40011004 	.word	0x40011004

080008d8 <MGPIO_voidSetPinValue>:

void MGPIO_voidSetPinValue(Gpio_PortType Copy_u8Port, Gpio_PinType Copy_u8Pin, Gpio_ValueType Copy_u8Value)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
 80008e2:	460b      	mov	r3, r1
 80008e4:	71bb      	strb	r3, [r7, #6]
 80008e6:	4613      	mov	r3, r2
 80008e8:	717b      	strb	r3, [r7, #5]
    if(Copy_u8Pin <= 15)  /* Check if the pin from 0 to 15 (all pins at the register) */
 80008ea:	79bb      	ldrb	r3, [r7, #6]
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	d867      	bhi.n	80009c0 <MGPIO_voidSetPinValue+0xe8>
    {
        switch (Copy_u8Port)  /* Switch to find the port i want */
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d040      	beq.n	8000978 <MGPIO_voidSetPinValue+0xa0>
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	dc5b      	bgt.n	80009b2 <MGPIO_voidSetPinValue+0xda>
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <MGPIO_voidSetPinValue+0x2c>
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d01d      	beq.n	800093e <MGPIO_voidSetPinValue+0x66>
                CLR_BIT(GPIOC_ODR, Copy_u8Pin); /* Clearing the pin */
            }
            break;
        
        default:
            break;
 8000902:	e056      	b.n	80009b2 <MGPIO_voidSetPinValue+0xda>
            if(Copy_u8Value == GPIO_HIGH) /* Check if the pin value HIGI */
 8000904:	797b      	ldrb	r3, [r7, #5]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d10a      	bne.n	8000920 <MGPIO_voidSetPinValue+0x48>
                SET_BIT(GPIOA_ODR, Copy_u8Pin); /* Setting the pin */
 800090a:	4b30      	ldr	r3, [pc, #192]	; (80009cc <MGPIO_voidSetPinValue+0xf4>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	79ba      	ldrb	r2, [r7, #6]
 8000910:	2101      	movs	r1, #1
 8000912:	fa01 f202 	lsl.w	r2, r1, r2
 8000916:	4611      	mov	r1, r2
 8000918:	4a2c      	ldr	r2, [pc, #176]	; (80009cc <MGPIO_voidSetPinValue+0xf4>)
 800091a:	430b      	orrs	r3, r1
 800091c:	6013      	str	r3, [r2, #0]
            break;
 800091e:	e04a      	b.n	80009b6 <MGPIO_voidSetPinValue+0xde>
            else if(Copy_u8Value == GPIO_LOW) /* Check if the pin value LOW */
 8000920:	797b      	ldrb	r3, [r7, #5]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d147      	bne.n	80009b6 <MGPIO_voidSetPinValue+0xde>
                CLR_BIT(GPIOA_ODR, Copy_u8Pin); /* Clearing the pin */
 8000926:	4b29      	ldr	r3, [pc, #164]	; (80009cc <MGPIO_voidSetPinValue+0xf4>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	79ba      	ldrb	r2, [r7, #6]
 800092c:	2101      	movs	r1, #1
 800092e:	fa01 f202 	lsl.w	r2, r1, r2
 8000932:	43d2      	mvns	r2, r2
 8000934:	4611      	mov	r1, r2
 8000936:	4a25      	ldr	r2, [pc, #148]	; (80009cc <MGPIO_voidSetPinValue+0xf4>)
 8000938:	400b      	ands	r3, r1
 800093a:	6013      	str	r3, [r2, #0]
            break;
 800093c:	e03b      	b.n	80009b6 <MGPIO_voidSetPinValue+0xde>
            if(Copy_u8Value == GPIO_HIGH) /* Check if the pin value HIGI */
 800093e:	797b      	ldrb	r3, [r7, #5]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d10a      	bne.n	800095a <MGPIO_voidSetPinValue+0x82>
                SET_BIT(GPIOB_ODR, Copy_u8Pin); /* Setting the pin */
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <MGPIO_voidSetPinValue+0xf8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	79ba      	ldrb	r2, [r7, #6]
 800094a:	2101      	movs	r1, #1
 800094c:	fa01 f202 	lsl.w	r2, r1, r2
 8000950:	4611      	mov	r1, r2
 8000952:	4a1f      	ldr	r2, [pc, #124]	; (80009d0 <MGPIO_voidSetPinValue+0xf8>)
 8000954:	430b      	orrs	r3, r1
 8000956:	6013      	str	r3, [r2, #0]
            break;
 8000958:	e02f      	b.n	80009ba <MGPIO_voidSetPinValue+0xe2>
            else if(Copy_u8Value == GPIO_LOW) /* Check if the pin value LOW */
 800095a:	797b      	ldrb	r3, [r7, #5]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d12c      	bne.n	80009ba <MGPIO_voidSetPinValue+0xe2>
                CLR_BIT(GPIOB_ODR, Copy_u8Pin); /* Clearing the pin */
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MGPIO_voidSetPinValue+0xf8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	79ba      	ldrb	r2, [r7, #6]
 8000966:	2101      	movs	r1, #1
 8000968:	fa01 f202 	lsl.w	r2, r1, r2
 800096c:	43d2      	mvns	r2, r2
 800096e:	4611      	mov	r1, r2
 8000970:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <MGPIO_voidSetPinValue+0xf8>)
 8000972:	400b      	ands	r3, r1
 8000974:	6013      	str	r3, [r2, #0]
            break;
 8000976:	e020      	b.n	80009ba <MGPIO_voidSetPinValue+0xe2>
            if(Copy_u8Value == GPIO_HIGH) /* Check if the pin value HIGI */
 8000978:	797b      	ldrb	r3, [r7, #5]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d10a      	bne.n	8000994 <MGPIO_voidSetPinValue+0xbc>
                SET_BIT(GPIOC_ODR, Copy_u8Pin); /* Setting the pin */
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MGPIO_voidSetPinValue+0xfc>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	79ba      	ldrb	r2, [r7, #6]
 8000984:	2101      	movs	r1, #1
 8000986:	fa01 f202 	lsl.w	r2, r1, r2
 800098a:	4611      	mov	r1, r2
 800098c:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <MGPIO_voidSetPinValue+0xfc>)
 800098e:	430b      	orrs	r3, r1
 8000990:	6013      	str	r3, [r2, #0]
            break;
 8000992:	e014      	b.n	80009be <MGPIO_voidSetPinValue+0xe6>
            else if(Copy_u8Value == GPIO_LOW) /* Check if the pin value LOW */
 8000994:	797b      	ldrb	r3, [r7, #5]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d111      	bne.n	80009be <MGPIO_voidSetPinValue+0xe6>
                CLR_BIT(GPIOC_ODR, Copy_u8Pin); /* Clearing the pin */
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MGPIO_voidSetPinValue+0xfc>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	79ba      	ldrb	r2, [r7, #6]
 80009a0:	2101      	movs	r1, #1
 80009a2:	fa01 f202 	lsl.w	r2, r1, r2
 80009a6:	43d2      	mvns	r2, r2
 80009a8:	4611      	mov	r1, r2
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <MGPIO_voidSetPinValue+0xfc>)
 80009ac:	400b      	ands	r3, r1
 80009ae:	6013      	str	r3, [r2, #0]
            break;
 80009b0:	e005      	b.n	80009be <MGPIO_voidSetPinValue+0xe6>
            break;
 80009b2:	bf00      	nop
 80009b4:	e004      	b.n	80009c0 <MGPIO_voidSetPinValue+0xe8>
            break;
 80009b6:	bf00      	nop
 80009b8:	e002      	b.n	80009c0 <MGPIO_voidSetPinValue+0xe8>
            break;
 80009ba:	bf00      	nop
 80009bc:	e000      	b.n	80009c0 <MGPIO_voidSetPinValue+0xe8>
            break;
 80009be:	bf00      	nop
    }
    else
    {
        /* Invalid pin number error */
    }
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	4001080c 	.word	0x4001080c
 80009d0:	40010c0c 	.word	0x40010c0c
 80009d4:	4001100c 	.word	0x4001100c

080009d8 <HLCD_voidSendCmd>:
#include "GPIO_interface.h"
#include "LCD_conf.h"
#include "LCD_private.h"

void HLCD_voidSendCmd(u8 A_u8CmdID)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	/*iterator for for loop*/
	u8 L_u8Iterator = 0 ;
 80009e2:	2300      	movs	r3, #0
 80009e4:	77fb      	strb	r3, [r7, #31]
	    ARM_DELAY (2) ;
	
	#elif MODE == FOUR_BIT_CONNECTION
	
	    /**set read/write to low */
	    MGPIO_voidSetPinValue  (LCD_RW_PORT , LCD_RW_PIN , GPIO_LOW) ;
 80009e6:	2200      	movs	r2, #0
 80009e8:	210f      	movs	r1, #15
 80009ea:	2002      	movs	r0, #2
 80009ec:	f7ff ff74 	bl	80008d8 <MGPIO_voidSetPinValue>
	    
	    /**send last four bits of data to last four bit at control register */
	    for (L_u8Iterator = 0 ; L_u8Iterator < 4 ; L_u8Iterator ++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	77fb      	strb	r3, [r7, #31]
 80009f4:	e012      	b.n	8000a1c <HLCD_voidSendCmd+0x44>
	    {
	    	MGPIO_voidSetPinValue (LCD_DATA_PORT                    ,
	    			               LCD_START_PIN + L_u8Iterator     ,
 80009f6:	7ffb      	ldrb	r3, [r7, #31]
 80009f8:	3303      	adds	r3, #3
 80009fa:	b2d9      	uxtb	r1, r3
	    					       GET_BIT(A_u8CmdID , (L_u8Iterator + 4)));
 80009fc:	79fa      	ldrb	r2, [r7, #7]
 80009fe:	7ffb      	ldrb	r3, [r7, #31]
 8000a00:	3304      	adds	r3, #4
 8000a02:	fa42 f303 	asr.w	r3, r2, r3
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	b2db      	uxtb	r3, r3
	    	MGPIO_voidSetPinValue (LCD_DATA_PORT                    ,
 8000a0e:	461a      	mov	r2, r3
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff ff61 	bl	80008d8 <MGPIO_voidSetPinValue>
	    for (L_u8Iterator = 0 ; L_u8Iterator < 4 ; L_u8Iterator ++)
 8000a16:	7ffb      	ldrb	r3, [r7, #31]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	77fb      	strb	r3, [r7, #31]
 8000a1c:	7ffb      	ldrb	r3, [r7, #31]
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d9e9      	bls.n	80009f6 <HLCD_voidSendCmd+0x1e>
	    }
	    
	    /**set register select to low */
	    MGPIO_voidSetPinValue (LCD_RS_PORT , LCD_RS_PIN , GPIO_LOW) ;
 8000a22:	2200      	movs	r2, #0
 8000a24:	210d      	movs	r1, #13
 8000a26:	2002      	movs	r0, #2
 8000a28:	f7ff ff56 	bl	80008d8 <MGPIO_voidSetPinValue>
	    
	    /**set enable to high */
	    MGPIO_voidSetPinValue  (LCD_EN_PORT , LCD_EN_PIN , GPIO_HIGH) ;
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	210e      	movs	r1, #14
 8000a30:	2002      	movs	r0, #2
 8000a32:	f7ff ff51 	bl	80008d8 <MGPIO_voidSetPinValue>

	    /* Wait for E to settle */
	    ARM_DELAY (2) ;
 8000a36:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a3a:	61bb      	str	r3, [r7, #24]
 8000a3c:	e000      	b.n	8000a40 <HLCD_voidSendCmd+0x68>
 8000a3e:	bf00      	nop
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	1e5a      	subs	r2, r3, #1
 8000a44:	61ba      	str	r2, [r7, #24]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d1f9      	bne.n	8000a3e <HLCD_voidSendCmd+0x66>
	    
	    /**set enable to low */
	    MGPIO_voidSetPinValue  (LCD_EN_PORT , LCD_EN_PIN , GPIO_LOW) ;
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	210e      	movs	r1, #14
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f7ff ff42 	bl	80008d8 <MGPIO_voidSetPinValue>
	    
	    /* Wait for E to settle */
	    ARM_DELAY (2) ;
 8000a54:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	e000      	b.n	8000a5e <HLCD_voidSendCmd+0x86>
 8000a5c:	bf00      	nop
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	1e5a      	subs	r2, r3, #1
 8000a62:	617a      	str	r2, [r7, #20]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1f9      	bne.n	8000a5c <HLCD_voidSendCmd+0x84>
	    
	    
	    /**set read/write to low */
	    MGPIO_voidSetPinValue  (LCD_RW_PORT , LCD_RW_PIN , GPIO_LOW) ;
 8000a68:	2200      	movs	r2, #0
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	f7ff ff33 	bl	80008d8 <MGPIO_voidSetPinValue>
	    
	    /**send last four bits of data to last four bit at control register */
	    for (L_u8Iterator = 0 ; L_u8Iterator < 8 ; L_u8Iterator ++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	77fb      	strb	r3, [r7, #31]
 8000a76:	e011      	b.n	8000a9c <HLCD_voidSendCmd+0xc4>
	    {
	    	MGPIO_voidSetPinValue (LCD_DATA_PORT                       ,
	    			               LCD_START_PIN + L_u8Iterator        ,
 8000a78:	7ffb      	ldrb	r3, [r7, #31]
 8000a7a:	3303      	adds	r3, #3
 8000a7c:	b2d9      	uxtb	r1, r3
	    					       GET_BIT((A_u8CmdID) , L_u8Iterator)) ;
 8000a7e:	79fa      	ldrb	r2, [r7, #7]
 8000a80:	7ffb      	ldrb	r3, [r7, #31]
 8000a82:	fa42 f303 	asr.w	r3, r2, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
	    	MGPIO_voidSetPinValue (LCD_DATA_PORT                       ,
 8000a8e:	461a      	mov	r2, r3
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff ff21 	bl	80008d8 <MGPIO_voidSetPinValue>
	    for (L_u8Iterator = 0 ; L_u8Iterator < 8 ; L_u8Iterator ++)
 8000a96:	7ffb      	ldrb	r3, [r7, #31]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	77fb      	strb	r3, [r7, #31]
 8000a9c:	7ffb      	ldrb	r3, [r7, #31]
 8000a9e:	2b07      	cmp	r3, #7
 8000aa0:	d9ea      	bls.n	8000a78 <HLCD_voidSendCmd+0xa0>
	    }
	    
	    /**set register select to low */
	    MGPIO_voidSetPinValue (LCD_RS_PORT , LCD_RS_PIN , GPIO_LOW) ;
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	210d      	movs	r1, #13
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f7ff ff16 	bl	80008d8 <MGPIO_voidSetPinValue>
	    
	    /**set enable to high */
	    MGPIO_voidSetPinValue  (LCD_EN_PORT , LCD_EN_PIN , GPIO_HIGH) ;
 8000aac:	2201      	movs	r2, #1
 8000aae:	210e      	movs	r1, #14
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f7ff ff11 	bl	80008d8 <MGPIO_voidSetPinValue>
	    
	    /* Wait for E to settle */
	    ARM_DELAY (2) ;
 8000ab6:	f242 7310 	movw	r3, #10000	; 0x2710
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	e000      	b.n	8000ac0 <HLCD_voidSendCmd+0xe8>
 8000abe:	bf00      	nop
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	1e5a      	subs	r2, r3, #1
 8000ac4:	613a      	str	r2, [r7, #16]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1f9      	bne.n	8000abe <HLCD_voidSendCmd+0xe6>
	    
	    /**set enable to low */
	    MGPIO_voidSetPinValue  (LCD_EN_PORT , LCD_EN_PIN , GPIO_LOW) ;
 8000aca:	2200      	movs	r2, #0
 8000acc:	210e      	movs	r1, #14
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f7ff ff02 	bl	80008d8 <MGPIO_voidSetPinValue>
	    
	    /* Wait for E to settle */
	    ARM_DELAY (2) ;
 8000ad4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	e000      	b.n	8000ade <HLCD_voidSendCmd+0x106>
 8000adc:	bf00      	nop
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	1e5a      	subs	r2, r3, #1
 8000ae2:	60fa      	str	r2, [r7, #12]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1f9      	bne.n	8000adc <HLCD_voidSendCmd+0x104>
	    #else
	         #error "select write mode"
	    #endif
	    ARM_DELAY(1) ;
 8000ae8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	e000      	b.n	8000af2 <HLCD_voidSendCmd+0x11a>
 8000af0:	bf00      	nop
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	1e5a      	subs	r2, r3, #1
 8000af6:	60ba      	str	r2, [r7, #8]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d1f9      	bne.n	8000af0 <HLCD_voidSendCmd+0x118>
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HLCD_voidInit>:
          #error "for GPIO_PORTA PINS 13 , 14 , 15 are forbidden"
      #endif
#endif

void HLCD_voidInit(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
	/*iterator for for loop*/
	u8 L_u8Iterator = 0 ;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	71fb      	strb	r3, [r7, #7]
		/* Wait for command to settle */
	   // ARM_DELAY (2) ;
		
	#elif MODE == FOUR_BIT_CONNECTION
	    /** set direction of PORT data to be output */
	    for (L_u8Iterator = 0 ; L_u8Iterator < 4 ; L_u8Iterator ++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	71fb      	strb	r3, [r7, #7]
 8000b14:	e00a      	b.n	8000b2c <HLCD_voidInit+0x26>
	    {

	    	MGPIO_voidSetPinMode  ( LCD_DATA_PORT , LCD_START_PIN + L_u8Iterator , OUTPUT_SPEED_10MHZ_PP  );
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	3303      	adds	r3, #3
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4619      	mov	r1, r3
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff fdfd 	bl	8000720 <MGPIO_voidSetPinMode>
	    for (L_u8Iterator = 0 ; L_u8Iterator < 4 ; L_u8Iterator ++)
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	71fb      	strb	r3, [r7, #7]
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	d9f1      	bls.n	8000b16 <HLCD_voidInit+0x10>
	    }
		
		/** set direction of register select to be output */
	    MGPIO_voidSetPinMode  ( LCD_RS_PORT , LCD_RS_PIN , OUTPUT_SPEED_10MHZ_PP  );
 8000b32:	2201      	movs	r2, #1
 8000b34:	210d      	movs	r1, #13
 8000b36:	2002      	movs	r0, #2
 8000b38:	f7ff fdf2 	bl	8000720 <MGPIO_voidSetPinMode>

		/** set direction of Enable pin to be output */
	    MGPIO_voidSetPinMode  ( LCD_EN_PORT , LCD_EN_PIN , OUTPUT_SPEED_10MHZ_PP  );
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	210e      	movs	r1, #14
 8000b40:	2002      	movs	r0, #2
 8000b42:	f7ff fded 	bl	8000720 <MGPIO_voidSetPinMode>

		/** set direction of read/write pin to be output */
	    MGPIO_voidSetPinMode  ( LCD_RW_PORT , LCD_RW_PIN , OUTPUT_SPEED_10MHZ_PP  );
 8000b46:	2201      	movs	r2, #1
 8000b48:	210f      	movs	r1, #15
 8000b4a:	2002      	movs	r0, #2
 8000b4c:	f7ff fde8 	bl	8000720 <MGPIO_voidSetPinMode>

	    /** Return home*/
	    HLCD_voidSendCmd (CMD_RETURN_HOME) ;
 8000b50:	2002      	movs	r0, #2
 8000b52:	f7ff ff41 	bl	80009d8 <HLCD_voidSendCmd>
		
		/* Wait for command to settle */
	   // ARM_DELAY (10) ;
	    
	    /** function set */
	    HLCD_voidSendCmd (FOUR_BIT_CONNECTION) ;
 8000b56:	2028      	movs	r0, #40	; 0x28
 8000b58:	f7ff ff3e 	bl	80009d8 <HLCD_voidSendCmd>
		
		///* Wait for command to settle */
	   // ARM_DELAY (1) ;
	    
	    /** Display ON/OFF Control */
	    HLCD_voidSendCmd (CMD_CURSOR_On_DISPLAY_ON) ;
 8000b5c:	200e      	movs	r0, #14
 8000b5e:	f7ff ff3b 	bl	80009d8 <HLCD_voidSendCmd>
		
		/* Wait for command to settle */
	   // ARM_DELAY (1) ;
	    
	    /** Display Clear */
	    HLCD_voidSendCmd (CMD_CLEAR) ;
 8000b62:	2001      	movs	r0, #1
 8000b64:	f7ff ff38 	bl	80009d8 <HLCD_voidSendCmd>
		
		/* Wait for command to settle */
	    //ARM_DELAY (10) ;
	    
	    /** Entry mode set */
	    HLCD_voidSendCmd (CMD_ENTRY_MODE) ;
 8000b68:	2006      	movs	r0, #6
 8000b6a:	f7ff ff35 	bl	80009d8 <HLCD_voidSendCmd>
		/* Wait for command to settle */
	    //ARM_DELAY (1) ;
	#else 
		#error "selecct right mode"
	#endif
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HLCD_voidSendData>:
void HLCD_voidSendData(u8 A_u8Char)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b084      	sub	sp, #16
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
	/*iterator for for loop*/
	u8 L_u8Iterator = 0 ;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]
		/* Wait for E to settle */
		//ARM_DELAY (2) ;
	
	#elif MODE == FOUR_BIT_CONNECTION
	    /**set read/write to low */
		MGPIO_voidSetPinValue  (LCD_RW_PORT , LCD_RW_PIN , GPIO_LOW) ;
 8000b84:	2200      	movs	r2, #0
 8000b86:	210f      	movs	r1, #15
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fea5 	bl	80008d8 <MGPIO_voidSetPinValue>

	    /**send last four bits of data to last four bit at control register */
	    for (L_u8Iterator = 0 ; L_u8Iterator < 4 ; L_u8Iterator ++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	73fb      	strb	r3, [r7, #15]
 8000b92:	e012      	b.n	8000bba <HLCD_voidSendData+0x44>
	    {
	    	MGPIO_voidSetPinValue (LCD_DATA_PORT                           ,
	    			               LCD_START_PIN + L_u8Iterator            ,
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	3303      	adds	r3, #3
 8000b98:	b2d9      	uxtb	r1, r3
	    					       GET_BIT(A_u8Char , (L_u8Iterator + 4))) ;
 8000b9a:	79fa      	ldrb	r2, [r7, #7]
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	3304      	adds	r3, #4
 8000ba0:	fa42 f303 	asr.w	r3, r2, r3
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	b2db      	uxtb	r3, r3
	    	MGPIO_voidSetPinValue (LCD_DATA_PORT                           ,
 8000bac:	461a      	mov	r2, r3
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff fe92 	bl	80008d8 <MGPIO_voidSetPinValue>
	    for (L_u8Iterator = 0 ; L_u8Iterator < 4 ; L_u8Iterator ++)
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d9e9      	bls.n	8000b94 <HLCD_voidSendData+0x1e>
	    }

	    /**set register select to high */
	    MGPIO_voidSetPinValue (LCD_RS_PORT , LCD_RS_PIN , GPIO_HIGH) ;
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	210d      	movs	r1, #13
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f7ff fe87 	bl	80008d8 <MGPIO_voidSetPinValue>

	    /**set enable to high */
	    MGPIO_voidSetPinValue  (LCD_EN_PORT , LCD_EN_PIN , GPIO_HIGH) ;
 8000bca:	2201      	movs	r2, #1
 8000bcc:	210e      	movs	r1, #14
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f7ff fe82 	bl	80008d8 <MGPIO_voidSetPinValue>

	    /* Wait for E to settle */
	   // ARM_DELAY (2) ;

	    /**set enable to low */
	    MGPIO_voidSetPinValue  (LCD_EN_PORT , LCD_EN_PIN , GPIO_LOW) ;
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	210e      	movs	r1, #14
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f7ff fe7d 	bl	80008d8 <MGPIO_voidSetPinValue>

	    /* Wait for E to settle */
	    //ARM_DELAY (2) ;

	    /**set read/write to low */
	    MGPIO_voidSetPinValue  (LCD_RW_PORT , LCD_RW_PIN , GPIO_LOW) ;
 8000bde:	2200      	movs	r2, #0
 8000be0:	210f      	movs	r1, #15
 8000be2:	2002      	movs	r0, #2
 8000be4:	f7ff fe78 	bl	80008d8 <MGPIO_voidSetPinValue>

	    /**send last four bits of data to last four bit at control register */
	    for (L_u8Iterator = 0 ; L_u8Iterator < 8 ; L_u8Iterator ++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e011      	b.n	8000c12 <HLCD_voidSendData+0x9c>
	    {
	    	MGPIO_voidSetPinValue (LCD_DATA_PORT                       ,
	    			               LCD_START_PIN + L_u8Iterator        ,
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	3303      	adds	r3, #3
 8000bf2:	b2d9      	uxtb	r1, r3
	    					       GET_BIT((A_u8Char) , L_u8Iterator)) ;
 8000bf4:	79fa      	ldrb	r2, [r7, #7]
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	fa42 f303 	asr.w	r3, r2, r3
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	b2db      	uxtb	r3, r3
	    	MGPIO_voidSetPinValue (LCD_DATA_PORT                       ,
 8000c04:	461a      	mov	r2, r3
 8000c06:	2000      	movs	r0, #0
 8000c08:	f7ff fe66 	bl	80008d8 <MGPIO_voidSetPinValue>
	    for (L_u8Iterator = 0 ; L_u8Iterator < 8 ; L_u8Iterator ++)
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	73fb      	strb	r3, [r7, #15]
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	2b07      	cmp	r3, #7
 8000c16:	d9ea      	bls.n	8000bee <HLCD_voidSendData+0x78>
	    }

	    /**set register select to low */
	    MGPIO_voidSetPinValue (LCD_RS_PORT , LCD_RS_PIN , GPIO_HIGH) ;
 8000c18:	2201      	movs	r2, #1
 8000c1a:	210d      	movs	r1, #13
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f7ff fe5b 	bl	80008d8 <MGPIO_voidSetPinValue>

	    /**set enable to high */
	    MGPIO_voidSetPinValue  (LCD_EN_PORT , LCD_EN_PIN , GPIO_HIGH) ;
 8000c22:	2201      	movs	r2, #1
 8000c24:	210e      	movs	r1, #14
 8000c26:	2002      	movs	r0, #2
 8000c28:	f7ff fe56 	bl	80008d8 <MGPIO_voidSetPinValue>

	    /* Wait for E to settle */
	  //  ARM_DELAY (2) ;

	    /**set enable to low */
	    MGPIO_voidSetPinValue  (LCD_EN_PORT , LCD_EN_PIN , GPIO_LOW) ;
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	210e      	movs	r1, #14
 8000c30:	2002      	movs	r0, #2
 8000c32:	f7ff fe51 	bl	80008d8 <MGPIO_voidSetPinValue>
	  //  ARM_DELAY (2) ;
	    #else
	         #error "select write mode"
	    #endif
	    //ARM_DELAY(1) ;
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HLCD_voidDispStr>:

void HLCD_voidDispStr(u8* A_Pu8String)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b084      	sub	sp, #16
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
	/**Local loop index */
	u8 L_u8Index = 0 ;
 8000c46:	2300      	movs	r3, #0
 8000c48:	73fb      	strb	r3, [r7, #15]
	while (A_Pu8String [L_u8Index] != '\0')
 8000c4a:	e009      	b.n	8000c60 <HLCD_voidDispStr+0x22>
	{
		/* Write Character on LCD */
		HLCD_voidSendData (A_Pu8String [L_u8Index]) ;
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff8e 	bl	8000b76 <HLCD_voidSendData>
		
		/* Increment local loop index */
		L_u8Index ++ ;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
	while (A_Pu8String [L_u8Index] != '\0')
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1ef      	bne.n	8000c4c <HLCD_voidDispStr+0xe>
	}
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HLCD_voidDispIntNum>:

void HLCD_voidDispIntNum(u32 A_u32Number)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	if (A_u32Number < (u32)MIN_INT_NUM && A_u32Number > (u32)MAX_INT_NUM)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <HLCD_voidDispIntNum+0x58>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d809      	bhi.n	8000c9c <HLCD_voidDispIntNum+0x24>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <HLCD_voidDispIntNum+0x5c>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d905      	bls.n	8000c9c <HLCD_voidDispIntNum+0x24>
	{
		/**
		 * if the integer is more than MAX_INT_NUM or less than MIN_INT_NUM
		          **** "Overflow !!!!" will be displayed
		 */
		HLCD_voidClrScreen () ;
 8000c90:	f000 f826 	bl	8000ce0 <HLCD_voidClrScreen>
		HLCD_voidDispStr ((u8*)"Overflow !!!!") ;
 8000c94:	4810      	ldr	r0, [pc, #64]	; (8000cd8 <HLCD_voidDispIntNum+0x60>)
 8000c96:	f7ff ffd2 	bl	8000c3e <HLCD_voidDispStr>
 8000c9a:	e014      	b.n	8000cc6 <HLCD_voidDispIntNum+0x4e>
	}
	else
	{
		/**array to stored conversion character*/
	    s8 L_Ps8String [16] = {0} ;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]

		/** convert integer to string*/
	   sprintf (L_Ps8String , "%d" , (int*)A_u32Number) ;
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	490a      	ldr	r1, [pc, #40]	; (8000cdc <HLCD_voidDispIntNum+0x64>)
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fe91 	bl	80019dc <siprintf>
		/**display number after convesion*/
	    HLCD_voidDispStr ((u8*)L_Ps8String) ;
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ffbd 	bl	8000c3e <HLCD_voidDispStr>
	}
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	c4653600 	.word	0xc4653600
 8000cd4:	3b9ac9ff 	.word	0x3b9ac9ff
 8000cd8:	080022e8 	.word	0x080022e8
 8000cdc:	080022f8 	.word	0x080022f8

08000ce0 <HLCD_voidClrScreen>:
		/** DO Nothing */
	}
}

void HLCD_voidClrScreen (void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	/**clear data and move cursor to first position*/
	HLCD_voidSendCmd (CMD_CLEAR) ;
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f7ff fe77 	bl	80009d8 <HLCD_voidSendCmd>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <MNVIC_voidEnableInterrupt>:
    SCB_AIRCR = NVIC_GROUP_SUB_DISTRIBUTION;
}

/*Function to enable Interrupts in ISER0 & ISER1 Registers*/
void MNVIC_voidEnableInterrupt(u8 Copy_u8IntID)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
    if(Copy_u8IntID <= 31) /*Check form 0 to 31 because the ISER0 Register from 0 to 31 BITS*/
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b1f      	cmp	r3, #31
 8000cfe:	d805      	bhi.n	8000d0c <MNVIC_voidEnableInterrupt+0x1c>
    {
        NVIC_ISER0 = (1 << Copy_u8IntID); /*Setting the bit in ISER0 Register like this to be faster because SET_BIT takes a lot of Instructions*/
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2201      	movs	r2, #1
 8000d04:	409a      	lsls	r2, r3
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MNVIC_voidEnableInterrupt+0x3c>)
 8000d08:	601a      	str	r2, [r3, #0]
    }
    else
    {
        /* Return Error */
    }
}
 8000d0a:	e00a      	b.n	8000d22 <MNVIC_voidEnableInterrupt+0x32>
    else if(Copy_u8IntID <= 59) /*Check form 32 to 59 because the ISER1 Register from 32 to 63 BITS but i want just to 59*/
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b3b      	cmp	r3, #59	; 0x3b
 8000d10:	d807      	bhi.n	8000d22 <MNVIC_voidEnableInterrupt+0x32>
        Copy_u8IntID -= 32; /*Copy_u8IntID - 32 (to start from BIT 0 in the Register ISER1)*/
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	3b20      	subs	r3, #32
 8000d16:	71fb      	strb	r3, [r7, #7]
        NVIC_ISER1 = (1 << Copy_u8IntID); /*Setting the bit in ISER1 Register like this to be faster because SET_BIT takes a lot of Instructions*/
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <MNVIC_voidEnableInterrupt+0x40>)
 8000d20:	601a      	str	r2, [r3, #0]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000e104 	.word	0xe000e104

08000d34 <MRCC_voidInitSysClock>:
#include "RCC_config.h"
#include "RCC_interface.h"
#include "RCC_private.h"

void MRCC_voidInitSysClock(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
    #if     RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
        RCC_CR   = 0x00010000; /* Enable HSE with no bypass "CRYSTAL": HSEON = 1, HSEBYP = 0 */
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MRCC_voidInitSysClock+0x50>)
 8000d3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d3e:	601a      	str	r2, [r3, #0]
        RCC_CFGR = 0x00000001; /* HSE selected as system clock : SW = 01 */
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MRCC_voidInitSysClock+0x54>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
        /*Wait until HSE ready*/
		while (!GET_BIT(RCC_CR, HSERDY));
 8000d46:	bf00      	nop
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MRCC_voidInitSysClock+0x50>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	0c5b      	lsrs	r3, r3, #17
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0f8      	beq.n	8000d48 <MRCC_voidInitSysClock+0x14>
	#else
		#error("WRONG CLOCK TYPE")
	#endif

	/* Configure AHB presaler */
	RCC_CFGR |= (RCC_AHB_PRESCALER << 4);
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MRCC_voidInitSysClock+0x54>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <MRCC_voidInitSysClock+0x54>)
 8000d5c:	f043 0310 	orr.w	r3, r3, #16
 8000d60:	6013      	str	r3, [r2, #0]

	/* Configure APB1 presaler */
	RCC_CFGR |= (RCC_APB1_PRESCALER << 8);
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MRCC_voidInitSysClock+0x54>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <MRCC_voidInitSysClock+0x54>)
 8000d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6c:	6013      	str	r3, [r2, #0]

	/* Configure APB2 presaler */
	RCC_CFGR |= (RCC_APB2_PRESCALER << 11);
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MRCC_voidInitSysClock+0x54>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <MRCC_voidInitSysClock+0x54>)
 8000d74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d78:	6013      	str	r3, [r2, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40021004 	.word	0x40021004

08000d8c <MRCC_voidEnableClock>:

void MRCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PerId)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	460a      	mov	r2, r1
 8000d96:	71fb      	strb	r3, [r7, #7]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	71bb      	strb	r3, [r7, #6]
    if (Copy_u8PerId <= 31)
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	2b1f      	cmp	r3, #31
 8000da0:	d82b      	bhi.n	8000dfa <MRCC_voidEnableClock+0x6e>
    {
        switch (Copy_u8BusId)
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d01c      	beq.n	8000de2 <MRCC_voidEnableClock+0x56>
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	dc25      	bgt.n	8000df8 <MRCC_voidEnableClock+0x6c>
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <MRCC_voidEnableClock+0x2a>
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d00b      	beq.n	8000dcc <MRCC_voidEnableClock+0x40>
        case RCC_APB2 :
            SET_BIT(RCC_APB2ENR, Copy_u8PerId);
            break;
        default:
        /* Return Error */
            break;
 8000db4:	e020      	b.n	8000df8 <MRCC_voidEnableClock+0x6c>
            SET_BIT(RCC_AHBENR, Copy_u8PerId);
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <MRCC_voidEnableClock+0x78>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	79ba      	ldrb	r2, [r7, #6]
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <MRCC_voidEnableClock+0x78>)
 8000dc6:	430b      	orrs	r3, r1
 8000dc8:	6013      	str	r3, [r2, #0]
            break;
 8000dca:	e016      	b.n	8000dfa <MRCC_voidEnableClock+0x6e>
            SET_BIT(RCC_APB1ENR, Copy_u8PerId);
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MRCC_voidEnableClock+0x7c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	79ba      	ldrb	r2, [r7, #6]
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <MRCC_voidEnableClock+0x7c>)
 8000ddc:	430b      	orrs	r3, r1
 8000dde:	6013      	str	r3, [r2, #0]
            break;
 8000de0:	e00b      	b.n	8000dfa <MRCC_voidEnableClock+0x6e>
            SET_BIT(RCC_APB2ENR, Copy_u8PerId);
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <MRCC_voidEnableClock+0x80>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	79ba      	ldrb	r2, [r7, #6]
 8000de8:	2101      	movs	r1, #1
 8000dea:	fa01 f202 	lsl.w	r2, r1, r2
 8000dee:	4611      	mov	r1, r2
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <MRCC_voidEnableClock+0x80>)
 8000df2:	430b      	orrs	r3, r1
 8000df4:	6013      	str	r3, [r2, #0]
            break;
 8000df6:	e000      	b.n	8000dfa <MRCC_voidEnableClock+0x6e>
            break;
 8000df8:	bf00      	nop
        }
    }
    else{
        /* Return Error */
    }
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	40021014 	.word	0x40021014
 8000e08:	4002101c 	.word	0x4002101c
 8000e0c:	40021018 	.word	0x40021018

08000e10 <MSTK_voidInit>:
/* Argument : Void                                                            */
/* Returns  : Void                                                            */
/* Role     : Stop the timer, Disable interrupt,and Set tick equals AHB/8     */
/* ************************************************************************** */
void MSTK_voidInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
	/* Stop Timer */
	CLR_BIT(STK->CTRL, CTRL_ENABLE);
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <MSTK_voidInit+0x3c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0c      	ldr	r2, [pc, #48]	; (8000e4c <MSTK_voidInit+0x3c>)
 8000e1a:	f023 0301 	bic.w	r3, r3, #1
 8000e1e:	6013      	str	r3, [r2, #0]
	STK->LOAD = Null;
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <MSTK_voidInit+0x3c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
	STK->VAL = Null;
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MSTK_voidInit+0x3c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
	/* Disable Interrupt */
	CLR_BIT(STK->CTRL, CTRL_TICK_INT);
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <MSTK_voidInit+0x3c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <MSTK_voidInit+0x3c>)
 8000e32:	f023 0302 	bic.w	r3, r3, #2
 8000e36:	6013      	str	r3, [r2, #0]
	/* Set the source AHB/8 or AHB */
#if SOURCE == AHB_TICK_BY_8
	CLR_BIT(STK->CTRL, CTRL_CLKSOURCE);
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <MSTK_voidInit+0x3c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a03      	ldr	r2, [pc, #12]	; (8000e4c <MSTK_voidInit+0x3c>)
 8000e3e:	f023 0304 	bic.w	r3, r3, #4
 8000e42:	6013      	str	r3, [r2, #0]
#elif SOURCE == AHB_TICK
    SET_BIT(STK->CTRL, CTRL_CLKSOURCE);
#endif
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e010 	.word	0xe000e010

08000e50 <MSTK_voidSetBusyWait>:
/* Argument : Number of ticks                                                 */
/* Returns  : Void                                                            */
/* Role     : Stay in the function for (number of tick x 1 Ms)                */
/* ************************************************************************** */
void MSTK_voidSetBusyWait(u32 A_u32Ticks)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	/* Reset timer value and clear flag */
	STK->VAL = 0;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MSTK_voidSetBusyWait+0x54>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
	/* Save the value of time */
	STK->LOAD = A_u32Ticks;
 8000e5e:	4a11      	ldr	r2, [pc, #68]	; (8000ea4 <MSTK_voidSetBusyWait+0x54>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6053      	str	r3, [r2, #4]
	/* Start Timer */
	SET_BIT(STK->CTRL, CTRL_ENABLE);
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MSTK_voidSetBusyWait+0x54>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <MSTK_voidSetBusyWait+0x54>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6013      	str	r3, [r2, #0]
	/* Start Delay */
	while (GET_BIT(STK->CTRL, CTRL_COUNT_FLAG) == FLAG_DOWN)
 8000e70:	bf00      	nop
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MSTK_voidSetBusyWait+0x54>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	0c1b      	lsrs	r3, r3, #16
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f8      	beq.n	8000e72 <MSTK_voidSetBusyWait+0x22>
		;
	/* Stop Timer */
	CLR_BIT(STK->CTRL, CTRL_ENABLE);
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MSTK_voidSetBusyWait+0x54>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <MSTK_voidSetBusyWait+0x54>)
 8000e86:	f023 0301 	bic.w	r3, r3, #1
 8000e8a:	6013      	str	r3, [r2, #0]
	STK->LOAD = Null;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <MSTK_voidSetBusyWait+0x54>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	605a      	str	r2, [r3, #4]
	STK->VAL = Null;
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <MSTK_voidSetBusyWait+0x54>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <MTIMERx_voidInit>:
#include "TIMERx_config.h"
#include "TIMERx_private.h"
#include "TIMERx_interface.h"

void MTIMERx_voidInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
#if TIMER_2_ENABLE == TIMER_ENABLE
	TIM2->PSC = TIMWER_2_PRESCALER;
 8000eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIMER_2_MAX_VALUE;
 8000eb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= (TIMER_2_DIRECTION << 4);
 8000ebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6013      	str	r3, [r2, #0]
	TIM5->PSC = TIMWER_5_PRESCALER;
	TIM5->ARR = TIMER_5_MAX_VALUE;
	TIM5->CR1 |= (TIMER_5_DIRECTION << 4);
	TIM5->CR1 |= TIM_CR1_CEN;
#endif
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
	...

08000ee4 <MTIMERx_voidStopTimer>:
	default: break;
	}
}

void MTIMERx_voidStopTimer(u8 copy_u8TimerID)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
	switch (copy_u8TimerID)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	3b02      	subs	r3, #2
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d828      	bhi.n	8000f48 <MTIMERx_voidStopTimer+0x64>
 8000ef6:	a201      	add	r2, pc, #4	; (adr r2, 8000efc <MTIMERx_voidStopTimer+0x18>)
 8000ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efc:	08000f0d 	.word	0x08000f0d
 8000f00:	08000f1f 	.word	0x08000f1f
 8000f04:	08000f2d 	.word	0x08000f2d
 8000f08:	08000f3b 	.word	0x08000f3b
	{
	case TIMER2:TIM2->CR1 &= ~(TIM_CR1_CEN); break;
 8000f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f16:	f023 0301 	bic.w	r3, r3, #1
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	e015      	b.n	8000f4a <MTIMERx_voidStopTimer+0x66>
	case TIMER3:TIM3->CR1 &= ~(TIM_CR1_CEN); break;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <MTIMERx_voidStopTimer+0x70>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <MTIMERx_voidStopTimer+0x70>)
 8000f24:	f023 0301 	bic.w	r3, r3, #1
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e00e      	b.n	8000f4a <MTIMERx_voidStopTimer+0x66>
	case TIMER4:TIM4->CR1 &= ~(TIM_CR1_CEN); break;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <MTIMERx_voidStopTimer+0x74>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a09      	ldr	r2, [pc, #36]	; (8000f58 <MTIMERx_voidStopTimer+0x74>)
 8000f32:	f023 0301 	bic.w	r3, r3, #1
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	e007      	b.n	8000f4a <MTIMERx_voidStopTimer+0x66>
	case TIMER5:TIM5->CR1 &= ~(TIM_CR1_CEN); break;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MTIMERx_voidStopTimer+0x78>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <MTIMERx_voidStopTimer+0x78>)
 8000f40:	f023 0301 	bic.w	r3, r3, #1
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e000      	b.n	8000f4a <MTIMERx_voidStopTimer+0x66>
	default: break;
 8000f48:	bf00      	nop
	}

}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	40000400 	.word	0x40000400
 8000f58:	40000800 	.word	0x40000800
 8000f5c:	40000c00 	.word	0x40000c00

08000f60 <MTIMERx_voidStartTimer>:

void MTIMERx_voidStartTimer(u8 copy_u8TimerID)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	switch (copy_u8TimerID)
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	3b02      	subs	r3, #2
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d828      	bhi.n	8000fc4 <MTIMERx_voidStartTimer+0x64>
 8000f72:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <MTIMERx_voidStartTimer+0x18>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000f89 	.word	0x08000f89
 8000f7c:	08000f9b 	.word	0x08000f9b
 8000f80:	08000fa9 	.word	0x08000fa9
 8000f84:	08000fb7 	.word	0x08000fb7
	{
	case TIMER2:TIM2->CR1 |= (TIM_CR1_CEN); break;
 8000f88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e015      	b.n	8000fc6 <MTIMERx_voidStartTimer+0x66>
	case TIMER3:TIM3->CR1 |= (TIM_CR1_CEN); break;
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <MTIMERx_voidStartTimer+0x70>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <MTIMERx_voidStartTimer+0x70>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e00e      	b.n	8000fc6 <MTIMERx_voidStartTimer+0x66>
	case TIMER4:TIM4->CR1 |= (TIM_CR1_CEN); break;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <MTIMERx_voidStartTimer+0x74>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <MTIMERx_voidStartTimer+0x74>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	e007      	b.n	8000fc6 <MTIMERx_voidStartTimer+0x66>
	case TIMER5:TIM5->CR1 |= (TIM_CR1_CEN); break;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MTIMERx_voidStartTimer+0x78>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <MTIMERx_voidStartTimer+0x78>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e000      	b.n	8000fc6 <MTIMERx_voidStartTimer+0x66>
	default: break;
 8000fc4:	bf00      	nop
	}

}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	40000400 	.word	0x40000400
 8000fd4:	40000800 	.word	0x40000800
 8000fd8:	40000c00 	.word	0x40000c00

08000fdc <MTIMERx_voidInputCaptureSetup>:
void MTIMERx_voidInputCaptureSetup(u8 copy_u8TimerID, u8 copy_u8ChannelID)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460a      	mov	r2, r1
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	71bb      	strb	r3, [r7, #6]
	volatile GPTM_t *TIMER = MTIMERx_GetTimerID(copy_u8TimerID);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f900 	bl	80011f4 <MTIMERx_GetTimerID>
 8000ff4:	60f8      	str	r0, [r7, #12]

	/* Disable timer */
	TIMER->CR1 &= ~(TIM_CR1_CEN);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 0201 	bic.w	r2, r3, #1
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	601a      	str	r2, [r3, #0]
	switch (copy_u8ChannelID)
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	3b01      	subs	r3, #1
 8001006:	2b03      	cmp	r3, #3
 8001008:	d856      	bhi.n	80010b8 <MTIMERx_voidInputCaptureSetup+0xdc>
 800100a:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <MTIMERx_voidInputCaptureSetup+0x34>)
 800100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001010:	08001021 	.word	0x08001021
 8001014:	08001047 	.word	0x08001047
 8001018:	0800106d 	.word	0x0800106d
 800101c:	08001093 	.word	0x08001093
	{
	case CH1:
		/* set timer pin input */
		TIMER->CCMR1 |= TIM_CCMR1_CC1S_0;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f043 0201 	orr.w	r2, r3, #1
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	619a      	str	r2, [r3, #24]
		/* Enable Capture*/
		TIMER->CCER |= TIM_CCER_CC1E;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	f043 0201 	orr.w	r2, r3, #1
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	621a      	str	r2, [r3, #32]
		/* Enable Interrupt */
		TIMER->DIER |= TIM_DIER_CC1IE;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	f043 0202 	orr.w	r2, r3, #2
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	60da      	str	r2, [r3, #12]
		break;
 8001044:	e039      	b.n	80010ba <MTIMERx_voidInputCaptureSetup+0xde>
	case CH2:
		/* set timer pin input */
		TIMER->CCMR1 |= TIM_CCMR1_CC2S_0;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	619a      	str	r2, [r3, #24]
		/* Enable Capture*/
		TIMER->CCER |= TIM_CCER_CC2E;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	f043 0210 	orr.w	r2, r3, #16
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	621a      	str	r2, [r3, #32]
		/* Enable Interrupt */
		TIMER->DIER |= TIM_DIER_CC2IE;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	f043 0204 	orr.w	r2, r3, #4
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	60da      	str	r2, [r3, #12]
		break;
 800106a:	e026      	b.n	80010ba <MTIMERx_voidInputCaptureSetup+0xde>
	case CH3:
		/* set timer pin input */
		TIMER->CCMR2 |= TIM_CCMR2_CC3S_0;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	f043 0201 	orr.w	r2, r3, #1
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	61da      	str	r2, [r3, #28]
		/* Enable Capture*/
		TIMER->CCER |= TIM_CCER_CC3E;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	621a      	str	r2, [r3, #32]
		/* Enable Interrupt */
		TIMER->DIER |= TIM_DIER_CC3IE;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f043 0208 	orr.w	r2, r3, #8
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	60da      	str	r2, [r3, #12]
		break;
 8001090:	e013      	b.n	80010ba <MTIMERx_voidInputCaptureSetup+0xde>
	case CH4:
		/* set timer pin input */
		TIMER->CCMR2 |= TIM_CCMR2_CC4S_0;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	61da      	str	r2, [r3, #28]
		/* Enable Capture*/
		TIMER->CCER |= TIM_CCER_CC4E;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6a1b      	ldr	r3, [r3, #32]
 80010a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	621a      	str	r2, [r3, #32]
		/* Enable Interrupt */
		TIMER->DIER |= TIM_DIER_CC4IE;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	f043 0210 	orr.w	r2, r3, #16
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	60da      	str	r2, [r3, #12]
		break;
 80010b6:	e000      	b.n	80010ba <MTIMERx_voidInputCaptureSetup+0xde>
	default:
		break;
 80010b8:	bf00      	nop
	}
	/* Enable timer */
	TIMER->CR1 |= TIM_CR1_CEN;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f043 0201 	orr.w	r2, r3, #1
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	601a      	str	r2, [r3, #0]
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop

080010d0 <MTIMERx_voidGetInputCaptureCounter>:


void MTIMERx_voidGetInputCaptureCounter(u8 copy_u8TimerID, u8 copy_u8ChannelID, u32 *ptr_Counts)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	603a      	str	r2, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	460b      	mov	r3, r1
 80010de:	71bb      	strb	r3, [r7, #6]

	volatile GPTM_t *TIMER = MTIMERx_GetTimerID(copy_u8TimerID);
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f886 	bl	80011f4 <MTIMERx_GetTimerID>
 80010e8:	60f8      	str	r0, [r7, #12]

	switch (copy_u8ChannelID)
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d81e      	bhi.n	8001130 <MTIMERx_voidGetInputCaptureCounter+0x60>
 80010f2:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <MTIMERx_voidGetInputCaptureCounter+0x28>)
 80010f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f8:	08001109 	.word	0x08001109
 80010fc:	08001113 	.word	0x08001113
 8001100:	0800111d 	.word	0x0800111d
 8001104:	08001127 	.word	0x08001127
	{
	case CH1: *ptr_Counts = TIMER->CCR1; break;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	e00f      	b.n	8001132 <MTIMERx_voidGetInputCaptureCounter+0x62>
	case CH2: *ptr_Counts = TIMER->CCR2; break;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e00a      	b.n	8001132 <MTIMERx_voidGetInputCaptureCounter+0x62>
	case CH3: *ptr_Counts = TIMER->CCR3; break;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e005      	b.n	8001132 <MTIMERx_voidGetInputCaptureCounter+0x62>
	case CH4: *ptr_Counts = TIMER->CCR4; break;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e000      	b.n	8001132 <MTIMERx_voidGetInputCaptureCounter+0x62>
	default: break;
 8001130:	bf00      	nop
	}
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop

0800113c <MTIMERx_voidSetInputCaptureTrigger>:

void MTIMERx_voidSetInputCaptureTrigger(u8 copy_u8TimerID, u8 copy_u8ChannelID, Trigger_Type copy_u8ICTrigger)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	460b      	mov	r3, r1
 8001148:	71bb      	strb	r3, [r7, #6]
 800114a:	4613      	mov	r3, r2
 800114c:	717b      	strb	r3, [r7, #5]
	volatile GPTM_t *TIMER = MTIMERx_GetTimerID(copy_u8TimerID);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f84f 	bl	80011f4 <MTIMERx_GetTimerID>
 8001156:	60f8      	str	r0, [r7, #12]
	switch (copy_u8ChannelID)
 8001158:	79bb      	ldrb	r3, [r7, #6]
 800115a:	3b01      	subs	r3, #1
 800115c:	2b03      	cmp	r3, #3
 800115e:	d843      	bhi.n	80011e8 <MTIMERx_voidSetInputCaptureTrigger+0xac>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <MTIMERx_voidSetInputCaptureTrigger+0x2c>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001179 	.word	0x08001179
 800116c:	08001195 	.word	0x08001195
 8001170:	080011b1 	.word	0x080011b1
 8001174:	080011cd 	.word	0x080011cd
	{
	case CH1:
		TIMER->CCER &= ~(TIM_CCER_CC1P);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f023 0202 	bic.w	r2, r3, #2
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	621a      	str	r2, [r3, #32]
		TIMER->CCER |= (copy_u8ICTrigger << TIM_CCER_CC1P_Pos);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	797a      	ldrb	r2, [r7, #5]
 800118a:	0052      	lsls	r2, r2, #1
 800118c:	431a      	orrs	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	621a      	str	r2, [r3, #32]
		break;
 8001192:	e02a      	b.n	80011ea <MTIMERx_voidSetInputCaptureTrigger+0xae>
	case CH2:
		TIMER->CCER &= ~(TIM_CCER_CC2P);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	f023 0220 	bic.w	r2, r3, #32
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	621a      	str	r2, [r3, #32]
		TIMER->CCER |= (copy_u8ICTrigger << TIM_CCER_CC2P_Pos);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	797a      	ldrb	r2, [r7, #5]
 80011a6:	0152      	lsls	r2, r2, #5
 80011a8:	431a      	orrs	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	621a      	str	r2, [r3, #32]
		break;
 80011ae:	e01c      	b.n	80011ea <MTIMERx_voidSetInputCaptureTrigger+0xae>
	case CH3:
		TIMER->CCER &= ~(TIM_CCER_CC3P);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	621a      	str	r2, [r3, #32]
		TIMER->CCER |= (copy_u8ICTrigger << TIM_CCER_CC3P_Pos);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	797a      	ldrb	r2, [r7, #5]
 80011c2:	0252      	lsls	r2, r2, #9
 80011c4:	431a      	orrs	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	621a      	str	r2, [r3, #32]
		break;
 80011ca:	e00e      	b.n	80011ea <MTIMERx_voidSetInputCaptureTrigger+0xae>
	case CH4:
		TIMER->CCER &= ~(TIM_CCER_CC4P);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	621a      	str	r2, [r3, #32]
		TIMER->CCER |= (copy_u8ICTrigger << TIM_CCER_CC4P_Pos);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	797a      	ldrb	r2, [r7, #5]
 80011de:	0352      	lsls	r2, r2, #13
 80011e0:	431a      	orrs	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	621a      	str	r2, [r3, #32]
		break;
 80011e6:	e000      	b.n	80011ea <MTIMERx_voidSetInputCaptureTrigger+0xae>
	default: break;
 80011e8:	bf00      	nop
	}

}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop

080011f4 <MTIMERx_GetTimerID>:

volatile GPTM_t* MTIMERx_GetTimerID(u8 copy_u8TimerID)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	volatile GPTM_t* timer_ptr = NULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]

    switch (copy_u8TimerID)
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	3b02      	subs	r3, #2
 8001206:	2b03      	cmp	r3, #3
 8001208:	d817      	bhi.n	800123a <MTIMERx_GetTimerID+0x46>
 800120a:	a201      	add	r2, pc, #4	; (adr r2, 8001210 <MTIMERx_GetTimerID+0x1c>)
 800120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001210:	08001221 	.word	0x08001221
 8001214:	08001229 	.word	0x08001229
 8001218:	0800122f 	.word	0x0800122f
 800121c:	08001235 	.word	0x08001235
    {
        case TIMER2: timer_ptr = TIM2; break;
 8001220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	e009      	b.n	800123c <MTIMERx_GetTimerID+0x48>
        case TIMER3: timer_ptr = TIM3; break;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <MTIMERx_GetTimerID+0x54>)
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	e006      	b.n	800123c <MTIMERx_GetTimerID+0x48>
        case TIMER4: timer_ptr = TIM4; break;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <MTIMERx_GetTimerID+0x58>)
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	e003      	b.n	800123c <MTIMERx_GetTimerID+0x48>
        case TIMER5: timer_ptr = TIM5; break;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MTIMERx_GetTimerID+0x5c>)
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	e000      	b.n	800123c <MTIMERx_GetTimerID+0x48>
        default: break;
 800123a:	bf00      	nop
    }
    return timer_ptr;
 800123c:	68fb      	ldr	r3, [r7, #12]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	40000400 	.word	0x40000400
 800124c:	40000800 	.word	0x40000800
 8001250:	40000c00 	.word	0x40000c00

08001254 <MTIMERx_voidInputCaptureCallback>:

static timer_callback_t input_capture_callback[4][4] = { NULL };

void MTIMERx_voidInputCaptureCallback(u8 copy_u8TimerID, u8 copy_u8ChannelID, timer_callback_t ptr)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	603a      	str	r2, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	460b      	mov	r3, r1
 8001262:	71bb      	strb	r3, [r7, #6]
	if(ptr != NULL && (copy_u8TimerID < 6) && (copy_u8ChannelID < 5))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00f      	beq.n	800128a <MTIMERx_voidInputCaptureCallback+0x36>
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	2b05      	cmp	r3, #5
 800126e:	d80c      	bhi.n	800128a <MTIMERx_voidInputCaptureCallback+0x36>
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	2b04      	cmp	r3, #4
 8001274:	d809      	bhi.n	800128a <MTIMERx_voidInputCaptureCallback+0x36>
	{
		input_capture_callback[copy_u8TimerID-2][copy_u8ChannelID-1] = ptr;
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	1e9a      	subs	r2, r3, #2
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	3b01      	subs	r3, #1
 800127e:	4905      	ldr	r1, [pc, #20]	; (8001294 <MTIMERx_voidInputCaptureCallback+0x40>)
 8001280:	0092      	lsls	r2, r2, #2
 8001282:	4413      	add	r3, r2
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	200000d4 	.word	0x200000d4

08001298 <MTIMERx_voidSetOVFCallback>:

static timer_callback_t ovf_callback[4] = {NULL,NULL,NULL,NULL};
void MTIMERx_voidSetOVFCallback(u8 copy_u8TimerID, timer_callback_t ptr)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
	volatile GPTM_t *TIMER = MTIMERx_GetTimerID(copy_u8TimerID);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ffa4 	bl	80011f4 <MTIMERx_GetTimerID>
 80012ac:	60f8      	str	r0, [r7, #12]
	/* Enable Interrupt */
	TIMER->DIER |= TIM_DIER_UIE;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	f043 0201 	orr.w	r2, r3, #1
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	60da      	str	r2, [r3, #12]

	if(ptr != NULL && (copy_u8TimerID < 6))
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d008      	beq.n	80012d2 <MTIMERx_voidSetOVFCallback+0x3a>
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	d805      	bhi.n	80012d2 <MTIMERx_voidSetOVFCallback+0x3a>
	{
		ovf_callback[copy_u8TimerID -2] = ptr;
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	3b02      	subs	r3, #2
 80012ca:	4904      	ldr	r1, [pc, #16]	; (80012dc <MTIMERx_voidSetOVFCallback+0x44>)
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000114 	.word	0x20000114

080012e0 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

	if((TIM2->SR & TIM_SR_UIF) != 0)
 80012e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00a      	beq.n	8001308 <TIM2_IRQHandler+0x28>
	{
		TIM2->SR &= ~(TIM_SR_UIF);
 80012f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fc:	f023 0301 	bic.w	r3, r3, #1
 8001300:	6113      	str	r3, [r2, #16]
		if(ovf_callback != NULL)
		{
			ovf_callback[0]();
 8001302:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <TIM2_IRQHandler+0xdc>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4798      	blx	r3
		}
	}

    /* CH1 ISR */
	if ((TIM2->SR & TIM_SR_CC1IF) != 0)
 8001308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00e      	beq.n	8001334 <TIM2_IRQHandler+0x54>
    {
        // CC1IF bit (clear interrupt flag)
        TIM2->SR &= ~(TIM_SR_CC1IF);
 8001316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001320:	f023 0302 	bic.w	r3, r3, #2
 8001324:	6113      	str	r3, [r2, #16]

        if (input_capture_callback[0][0] != NULL)
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <TIM2_IRQHandler+0xe0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <TIM2_IRQHandler+0x54>
        {
            input_capture_callback[0][0]();
 800132e:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <TIM2_IRQHandler+0xe0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4798      	blx	r3
        }
    }

	/* CH2 ISR */
    if ((TIM2->SR & TIM_SR_CC2IF) != 0) {
 8001334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00e      	beq.n	8001360 <TIM2_IRQHandler+0x80>
        // CC2IF bit (clear interrupt flag)
        TIM2->SR &= ~(TIM_SR_CC2IF);
 8001342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800134c:	f023 0304 	bic.w	r3, r3, #4
 8001350:	6113      	str	r3, [r2, #16]

        if (input_capture_callback[0][1] != NULL) {
 8001352:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <TIM2_IRQHandler+0xe0>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d002      	beq.n	8001360 <TIM2_IRQHandler+0x80>
            input_capture_callback[0][1]();
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <TIM2_IRQHandler+0xe0>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4798      	blx	r3
        }
    }

    /* CH3 ISR */
    if ((TIM2->SR & TIM_SR_CC3IF) != 0) {
 8001360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00e      	beq.n	800138c <TIM2_IRQHandler+0xac>
        // CC3IF bit (clear interrupt flag)
        TIM2->SR &= ~(TIM_SR_CC3IF);
 800136e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001378:	f023 0308 	bic.w	r3, r3, #8
 800137c:	6113      	str	r3, [r2, #16]

        if (input_capture_callback[0][2] != NULL) {
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <TIM2_IRQHandler+0xe0>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <TIM2_IRQHandler+0xac>
            input_capture_callback[0][2]();
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <TIM2_IRQHandler+0xe0>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	4798      	blx	r3
        }
    }

    /* CH4 ISR */
    if ((TIM2->SR & TIM_SR_CC4IF) != 0) {
 800138c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00e      	beq.n	80013b8 <TIM2_IRQHandler+0xd8>
        // CC4IF bit (clear interrupt flag)
        TIM2->SR &= ~(TIM_SR_CC4IF);
 800139a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013a4:	f023 0310 	bic.w	r3, r3, #16
 80013a8:	6113      	str	r3, [r2, #16]

        if (input_capture_callback[0][3] != NULL) {
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <TIM2_IRQHandler+0xe0>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <TIM2_IRQHandler+0xd8>
            input_capture_callback[0][3]();
 80013b2:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <TIM2_IRQHandler+0xe0>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	4798      	blx	r3
        }
    }
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000114 	.word	0x20000114
 80013c0:	200000d4 	.word	0x200000d4

080013c4 <HUS_voidInit>:
/* Argument : void						             						  */
/* Returns  : void		                                                      */
/* Role     : Setup timer and interrupt of ICU/OVF				        	  */
/* ************************************************************************** */
void HUS_voidInit(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
	/* Initialize Timer_1 */
	MRCC_voidEnableClock(RCC_APB1,APB1_TIM2EN);
 80013ca:	2100      	movs	r1, #0
 80013cc:	2001      	movs	r0, #1
 80013ce:	f7ff fcdd 	bl	8000d8c <MRCC_voidEnableClock>

	for(u8 i = 0; i< 1;i++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	e034      	b.n	8001442 <HUS_voidInit+0x7e>
	{
		MTIMERx_voidInputCaptureSetup(GlobalArr_u8USTimer[i],GlobalArr_u8USChannel[i]);
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4a33      	ldr	r2, [pc, #204]	; (80014a8 <HUS_voidInit+0xe4>)
 80013dc:	5cd2      	ldrb	r2, [r2, r3]
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	4932      	ldr	r1, [pc, #200]	; (80014ac <HUS_voidInit+0xe8>)
 80013e2:	5ccb      	ldrb	r3, [r1, r3]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4610      	mov	r0, r2
 80013e8:	f7ff fdf8 	bl	8000fdc <MTIMERx_voidInputCaptureSetup>
		MTIMERx_voidSetInputCaptureTrigger(GlobalArr_u8USTimer[i],GlobalArr_u8USChannel[i],RISING_EDGE);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	4a2e      	ldr	r2, [pc, #184]	; (80014a8 <HUS_voidInit+0xe4>)
 80013f0:	5cd0      	ldrb	r0, [r2, r3]
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	4a2d      	ldr	r2, [pc, #180]	; (80014ac <HUS_voidInit+0xe8>)
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	2200      	movs	r2, #0
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fe9e 	bl	800113c <MTIMERx_voidSetInputCaptureTrigger>
		MGPIO_voidSetPinMode(GlobalArr_u8USEchoPort[i],GlobalArr_u8USChannelPin[i],INPUT_PULL_UP_DOWN);
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	4a2b      	ldr	r2, [pc, #172]	; (80014b0 <HUS_voidInit+0xec>)
 8001404:	5cd0      	ldrb	r0, [r2, r3]
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4a2a      	ldr	r2, [pc, #168]	; (80014b4 <HUS_voidInit+0xf0>)
 800140a:	5cd3      	ldrb	r3, [r2, r3]
 800140c:	2208      	movs	r2, #8
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff f986 	bl	8000720 <MGPIO_voidSetPinMode>
		MGPIO_voidSetPinValue(GlobalArr_u8USEchoPort[i],GlobalArr_u8USChannelPin[i],GPIO_LOW);
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4a26      	ldr	r2, [pc, #152]	; (80014b0 <HUS_voidInit+0xec>)
 8001418:	5cd0      	ldrb	r0, [r2, r3]
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4a25      	ldr	r2, [pc, #148]	; (80014b4 <HUS_voidInit+0xf0>)
 800141e:	5cd3      	ldrb	r3, [r2, r3]
 8001420:	2200      	movs	r2, #0
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fa58 	bl	80008d8 <MGPIO_voidSetPinValue>
		/* Set Trigger Pin as Output and Echo Pin Input*/
		MGPIO_voidSetPinMode(GlobalArr_u8TriggerPort[i],GlobalArr_u8TriggerPin[i],OUTPUT_SPEED_10MHZ_PP);
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <HUS_voidInit+0xf4>)
 800142c:	5cd0      	ldrb	r0, [r2, r3]
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	4a22      	ldr	r2, [pc, #136]	; (80014bc <HUS_voidInit+0xf8>)
 8001432:	5cd3      	ldrb	r3, [r2, r3]
 8001434:	2201      	movs	r2, #1
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff f972 	bl	8000720 <MGPIO_voidSetPinMode>
	for(u8 i = 0; i< 1;i++)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	3301      	adds	r3, #1
 8001440:	71fb      	strb	r3, [r7, #7]
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0c7      	beq.n	80013d8 <HUS_voidInit+0x14>
	}


	MTIMERx_voidInit();
 8001448:	f7ff fd2e 	bl	8000ea8 <MTIMERx_voidInit>


	/* Enable ICU & OVF Interrupts */
	MNVIC_voidEnableInterrupt(28);
 800144c:	201c      	movs	r0, #28
 800144e:	f7ff fc4f 	bl	8000cf0 <MNVIC_voidEnableInterrupt>

	/* Set CallBack ICU function */
	MTIMERx_voidInputCaptureCallback(GlobalArr_u8USTimer[US_FRONT],
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HUS_voidInit+0xe4>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	4a15      	ldr	r2, [pc, #84]	; (80014ac <HUS_voidInit+0xe8>)
 8001458:	7811      	ldrb	r1, [r2, #0]
 800145a:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <HUS_voidInit+0xfc>)
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fef9 	bl	8001254 <MTIMERx_voidInputCaptureCallback>
			GlobalArr_u8USChannel[US_FRONT], HUS_void_FRONT_ECHO_Interrupt);
	MTIMERx_voidInputCaptureCallback(GlobalArr_u8USTimer[US_F_SIDE],
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HUS_voidInit+0xe4>)
 8001464:	785b      	ldrb	r3, [r3, #1]
 8001466:	4a11      	ldr	r2, [pc, #68]	; (80014ac <HUS_voidInit+0xe8>)
 8001468:	7851      	ldrb	r1, [r2, #1]
 800146a:	4a16      	ldr	r2, [pc, #88]	; (80014c4 <HUS_voidInit+0x100>)
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fef1 	bl	8001254 <MTIMERx_voidInputCaptureCallback>
			GlobalArr_u8USChannel[US_F_SIDE],HUS_void_F_SIDE_ECHO_Interrupt);
	MTIMERx_voidInputCaptureCallback(GlobalArr_u8USTimer[US_B_SIDE],
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HUS_voidInit+0xe4>)
 8001474:	789b      	ldrb	r3, [r3, #2]
 8001476:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <HUS_voidInit+0xe8>)
 8001478:	7891      	ldrb	r1, [r2, #2]
 800147a:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <HUS_voidInit+0x104>)
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fee9 	bl	8001254 <MTIMERx_voidInputCaptureCallback>
				GlobalArr_u8USChannel[US_B_SIDE],HUS_void_B_SIDE_ECHO_Interrupt);
	MTIMERx_voidInputCaptureCallback(GlobalArr_u8USTimer[US_BACK],
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HUS_voidInit+0xe4>)
 8001484:	78db      	ldrb	r3, [r3, #3]
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <HUS_voidInit+0xe8>)
 8001488:	78d1      	ldrb	r1, [r2, #3]
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <HUS_voidInit+0x108>)
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fee1 	bl	8001254 <MTIMERx_voidInputCaptureCallback>
					GlobalArr_u8USChannel[US_BACK],HUS_void_BACK_ECHO_Interrupt);
	/* Set CallBack OVF function */
	MTIMERx_voidSetOVFCallback(TIMER2, HUS_voidOVFCounts);
 8001492:	490f      	ldr	r1, [pc, #60]	; (80014d0 <HUS_voidInit+0x10c>)
 8001494:	2002      	movs	r0, #2
 8001496:	f7ff feff 	bl	8001298 <MTIMERx_voidSetOVFCallback>

	MSTK_voidInit();
 800149a:	f7ff fcb9 	bl	8000e10 <MSTK_voidInit>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000000 	.word	0x20000000
 80014ac:	20000004 	.word	0x20000004
 80014b0:	20000154 	.word	0x20000154
 80014b4:	20000008 	.word	0x20000008
 80014b8:	2000000c 	.word	0x2000000c
 80014bc:	20000010 	.word	0x20000010
 80014c0:	080015c1 	.word	0x080015c1
 80014c4:	08001659 	.word	0x08001659
 80014c8:	080016f5 	.word	0x080016f5
 80014cc:	08001791 	.word	0x08001791
 80014d0:	080015a5 	.word	0x080015a5

080014d4 <HUS_voidGetDistance>:
/* Argument : Pointer to distance variable		       						  */
/* Returns  : void		                                                      */
/* Role     : Calculate Distance of US wave						        	  */
/* ************************************************************************** */
void HUS_voidGetDistance(u8 copy_u8UltrasonicID, u16 *ptr_u16Distance)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]

	/* SET A PULSE ON TRIG PIN */
	MTIMERx_voidStartTimer(TIMER2);
 80014e0:	2002      	movs	r0, #2
 80014e2:	f7ff fd3d 	bl	8000f60 <MTIMERx_voidStartTimer>
//	MTIMERx_voidStartTimer(TIMER3);
	MGPIO_voidSetPinValue(GlobalArr_u8TriggerPort[copy_u8UltrasonicID],GlobalArr_u8TriggerPin[copy_u8UltrasonicID],GPIO_HIGH);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4a28      	ldr	r2, [pc, #160]	; (800158c <HUS_voidGetDistance+0xb8>)
 80014ea:	5cd0      	ldrb	r0, [r2, r3]
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	4a28      	ldr	r2, [pc, #160]	; (8001590 <HUS_voidGetDistance+0xbc>)
 80014f0:	5cd3      	ldrb	r3, [r2, r3]
 80014f2:	2201      	movs	r2, #1
 80014f4:	4619      	mov	r1, r3
 80014f6:	f7ff f9ef 	bl	80008d8 <MGPIO_voidSetPinValue>
	MSTK_voidSetBusyWait(400);
 80014fa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80014fe:	f7ff fca7 	bl	8000e50 <MSTK_voidSetBusyWait>
	MGPIO_voidSetPinValue(GlobalArr_u8TriggerPort[copy_u8UltrasonicID],GlobalArr_u8TriggerPin[copy_u8UltrasonicID],GPIO_LOW);
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4a21      	ldr	r2, [pc, #132]	; (800158c <HUS_voidGetDistance+0xb8>)
 8001506:	5cd0      	ldrb	r0, [r2, r3]
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	4a21      	ldr	r2, [pc, #132]	; (8001590 <HUS_voidGetDistance+0xbc>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	2200      	movs	r2, #0
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff f9e1 	bl	80008d8 <MGPIO_voidSetPinValue>
//	while(Global_u8EchoFlag !=FLAG_CALCULATING);
	if(GlobalArr_u32EchoFlag[copy_u8UltrasonicID] == FLAG_CALCULATING)
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4a1e      	ldr	r2, [pc, #120]	; (8001594 <HUS_voidGetDistance+0xc0>)
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d12f      	bne.n	8001582 <HUS_voidGetDistance+0xae>
	{
		*ptr_u16Distance = (u16) ((GlobalArr_u32EndTime[copy_u8UltrasonicID] - GlobalArr_u32StartTime[copy_u8UltrasonicID])
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4a1c      	ldr	r2, [pc, #112]	; (8001598 <HUS_voidGetDistance+0xc4>)
 8001526:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	491b      	ldr	r1, [pc, #108]	; (800159c <HUS_voidGetDistance+0xc8>)
 800152e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001532:	1ad3      	subs	r3, r2, r3
				* ((f32) TIMER_CLK / FCPU)) / ((f32) DISTANCE_FACTOR);
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fed1 	bl	80002dc <__aeabi_ui2f>
 800153a:	4603      	mov	r3, r0
 800153c:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe ff23 	bl	800038c <__aeabi_fmul>
 8001546:	4603      	mov	r3, r0
		*ptr_u16Distance = (u16) ((GlobalArr_u32EndTime[copy_u8UltrasonicID] - GlobalArr_u32StartTime[copy_u8UltrasonicID])
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff f86f 	bl	800062c <__aeabi_f2uiz>
 800154e:	4603      	mov	r3, r0
 8001550:	b29b      	uxth	r3, r3
				* ((f32) TIMER_CLK / FCPU)) / ((f32) DISTANCE_FACTOR);
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe fec6 	bl	80002e4 <__aeabi_i2f>
 8001558:	4603      	mov	r3, r0
 800155a:	4911      	ldr	r1, [pc, #68]	; (80015a0 <HUS_voidGetDistance+0xcc>)
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ffc9 	bl	80004f4 <__aeabi_fdiv>
 8001562:	4603      	mov	r3, r0
		*ptr_u16Distance = (u16) ((GlobalArr_u32EndTime[copy_u8UltrasonicID] - GlobalArr_u32StartTime[copy_u8UltrasonicID])
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff f861 	bl	800062c <__aeabi_f2uiz>
 800156a:	4603      	mov	r3, r0
 800156c:	b29a      	uxth	r2, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	801a      	strh	r2, [r3, #0]
	//	HLCD_voidDispIntNum(*ptr_u16Distance);

		GlobalArr_u32EchoFlag[copy_u8UltrasonicID] = FLAG_RISING_EDGE;
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HUS_voidGetDistance+0xc0>)
 8001576:	2100      	movs	r1, #0
 8001578:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		MTIMERx_voidStopTimer(TIMER2);
 800157c:	2002      	movs	r0, #2
 800157e:	f7ff fcb1 	bl	8000ee4 <MTIMERx_voidStopTimer>
	}
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000000c 	.word	0x2000000c
 8001590:	20000010 	.word	0x20000010
 8001594:	20000124 	.word	0x20000124
 8001598:	20000144 	.word	0x20000144
 800159c:	20000134 	.word	0x20000134
 80015a0:	42693c74 	.word	0x42693c74

080015a4 <HUS_voidOVFCounts>:
	}
	*ptr_u16AvgDistance = (u16)(Local_u32Sum/READING_NO);
}
/* -------------------------------------------------------------------------- */
static void HUS_voidOVFCounts(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
	Global_u32Timer1OVFCounter++;
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <HUS_voidOVFCounts+0x18>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a03      	ldr	r2, [pc, #12]	; (80015bc <HUS_voidOVFCounts+0x18>)
 80015b0:	6013      	str	r3, [r2, #0]
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000158 	.word	0x20000158

080015c0 <HUS_void_FRONT_ECHO_Interrupt>:
/* -------------------------------------------------------------------------- */
static void HUS_void_FRONT_ECHO_Interrupt(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0

	/* WAVE START */
	if(GlobalArr_u32EchoFlag[US_FRONT] == FLAG_RISING_EDGE)
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <HUS_void_FRONT_ECHO_Interrupt+0x80>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d116      	bne.n	80015fa <HUS_void_FRONT_ECHO_Interrupt+0x3a>
	{
		GlobalArr_u32EchoFlag[US_FRONT] = FLAG_FALLING_EDGE;
 80015cc:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <HUS_void_FRONT_ECHO_Interrupt+0x80>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]
		MTIMERx_voidGetInputCaptureCounter(GlobalArr_u8USTimer[US_FRONT],
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <HUS_void_FRONT_ECHO_Interrupt+0x84>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <HUS_void_FRONT_ECHO_Interrupt+0x88>)
 80015d8:	7811      	ldrb	r1, [r2, #0]
 80015da:	4a1c      	ldr	r2, [pc, #112]	; (800164c <HUS_void_FRONT_ECHO_Interrupt+0x8c>)
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fd77 	bl	80010d0 <MTIMERx_voidGetInputCaptureCounter>
				GlobalArr_u8USChannel[US_FRONT],
				&GlobalArr_u32StartTime[US_FRONT]);

		Global_u32Timer1OVFCounter = CLEAR;
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HUS_void_FRONT_ECHO_Interrupt+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
		MTIMERx_voidSetInputCaptureTrigger(GlobalArr_u8USTimer[US_FRONT],
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <HUS_void_FRONT_ECHO_Interrupt+0x84>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4a16      	ldr	r2, [pc, #88]	; (8001648 <HUS_void_FRONT_ECHO_Interrupt+0x88>)
 80015ee:	7811      	ldrb	r1, [r2, #0]
 80015f0:	2201      	movs	r2, #1
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fda2 	bl	800113c <MTIMERx_voidSetInputCaptureTrigger>
		GlobalArr_u32EndTime[US_FRONT] += Global_u32Timer1OVFCounter * 65535;
		MTIMERx_voidSetInputCaptureTrigger(GlobalArr_u8USTimer[US_FRONT],
				GlobalArr_u8USChannel[US_FRONT], RISING_EDGE);
	}

}
 80015f8:	e020      	b.n	800163c <HUS_void_FRONT_ECHO_Interrupt+0x7c>
	else if(GlobalArr_u32EchoFlag[US_FRONT] == FLAG_FALLING_EDGE)
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HUS_void_FRONT_ECHO_Interrupt+0x80>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d11c      	bne.n	800163c <HUS_void_FRONT_ECHO_Interrupt+0x7c>
		GlobalArr_u32EchoFlag[US_FRONT] = FLAG_CALCULATING;
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HUS_void_FRONT_ECHO_Interrupt+0x80>)
 8001604:	2202      	movs	r2, #2
 8001606:	601a      	str	r2, [r3, #0]
		MTIMERx_voidGetInputCaptureCounter(GlobalArr_u8USTimer[US_FRONT],
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HUS_void_FRONT_ECHO_Interrupt+0x84>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <HUS_void_FRONT_ECHO_Interrupt+0x88>)
 800160e:	7811      	ldrb	r1, [r2, #0]
 8001610:	4a10      	ldr	r2, [pc, #64]	; (8001654 <HUS_void_FRONT_ECHO_Interrupt+0x94>)
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fd5c 	bl	80010d0 <MTIMERx_voidGetInputCaptureCounter>
		GlobalArr_u32EndTime[US_FRONT] += Global_u32Timer1OVFCounter * 65535;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HUS_void_FRONT_ECHO_Interrupt+0x94>)
 800161a:	6819      	ldr	r1, [r3, #0]
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HUS_void_FRONT_ECHO_Interrupt+0x90>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4613      	mov	r3, r2
 8001622:	041b      	lsls	r3, r3, #16
 8001624:	1a9b      	subs	r3, r3, r2
 8001626:	440b      	add	r3, r1
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HUS_void_FRONT_ECHO_Interrupt+0x94>)
 800162a:	6013      	str	r3, [r2, #0]
		MTIMERx_voidSetInputCaptureTrigger(GlobalArr_u8USTimer[US_FRONT],
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HUS_void_FRONT_ECHO_Interrupt+0x84>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4a05      	ldr	r2, [pc, #20]	; (8001648 <HUS_void_FRONT_ECHO_Interrupt+0x88>)
 8001632:	7811      	ldrb	r1, [r2, #0]
 8001634:	2200      	movs	r2, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fd80 	bl	800113c <MTIMERx_voidSetInputCaptureTrigger>
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000124 	.word	0x20000124
 8001644:	20000000 	.word	0x20000000
 8001648:	20000004 	.word	0x20000004
 800164c:	20000134 	.word	0x20000134
 8001650:	20000158 	.word	0x20000158
 8001654:	20000144 	.word	0x20000144

08001658 <HUS_void_F_SIDE_ECHO_Interrupt>:
/* -------------------------------------------------------------------------- */
static void HUS_void_F_SIDE_ECHO_Interrupt(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

	/* WAVE START */
	if(GlobalArr_u32EchoFlag[US_F_SIDE] == FLAG_RISING_EDGE)
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HUS_void_F_SIDE_ECHO_Interrupt+0x80>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d116      	bne.n	8001692 <HUS_void_F_SIDE_ECHO_Interrupt+0x3a>
	{
		GlobalArr_u32EchoFlag[US_F_SIDE] = FLAG_FALLING_EDGE;
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <HUS_void_F_SIDE_ECHO_Interrupt+0x80>)
 8001666:	2201      	movs	r2, #1
 8001668:	605a      	str	r2, [r3, #4]
		MTIMERx_voidGetInputCaptureCounter(GlobalArr_u8USTimer[US_F_SIDE],
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HUS_void_F_SIDE_ECHO_Interrupt+0x84>)
 800166c:	785b      	ldrb	r3, [r3, #1]
 800166e:	4a1c      	ldr	r2, [pc, #112]	; (80016e0 <HUS_void_F_SIDE_ECHO_Interrupt+0x88>)
 8001670:	7851      	ldrb	r1, [r2, #1]
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <HUS_void_F_SIDE_ECHO_Interrupt+0x8c>)
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fd2b 	bl	80010d0 <MTIMERx_voidGetInputCaptureCounter>
				GlobalArr_u8USChannel[US_F_SIDE],
				&GlobalArr_u32StartTime[US_F_SIDE]);

		Global_u32Timer1OVFCounter = CLEAR;
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HUS_void_F_SIDE_ECHO_Interrupt+0x90>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
		MTIMERx_voidSetInputCaptureTrigger(GlobalArr_u8USTimer[US_F_SIDE],
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HUS_void_F_SIDE_ECHO_Interrupt+0x84>)
 8001682:	785b      	ldrb	r3, [r3, #1]
 8001684:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <HUS_void_F_SIDE_ECHO_Interrupt+0x88>)
 8001686:	7851      	ldrb	r1, [r2, #1]
 8001688:	2201      	movs	r2, #1
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fd56 	bl	800113c <MTIMERx_voidSetInputCaptureTrigger>
		GlobalArr_u32EndTime[US_F_SIDE] += Global_u32Timer1OVFCounter * 65535;
		MTIMERx_voidSetInputCaptureTrigger(GlobalArr_u8USTimer[US_F_SIDE],
				GlobalArr_u8USChannel[US_F_SIDE], RISING_EDGE);
	}

}
 8001690:	e020      	b.n	80016d4 <HUS_void_F_SIDE_ECHO_Interrupt+0x7c>
	else if(GlobalArr_u32EchoFlag[US_F_SIDE] == FLAG_FALLING_EDGE)
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HUS_void_F_SIDE_ECHO_Interrupt+0x80>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d11c      	bne.n	80016d4 <HUS_void_F_SIDE_ECHO_Interrupt+0x7c>
		GlobalArr_u32EchoFlag[US_F_SIDE] = FLAG_CALCULATING;
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HUS_void_F_SIDE_ECHO_Interrupt+0x80>)
 800169c:	2202      	movs	r2, #2
 800169e:	605a      	str	r2, [r3, #4]
		MTIMERx_voidGetInputCaptureCounter(GlobalArr_u8USTimer[US_F_SIDE],
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HUS_void_F_SIDE_ECHO_Interrupt+0x84>)
 80016a2:	785b      	ldrb	r3, [r3, #1]
 80016a4:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <HUS_void_F_SIDE_ECHO_Interrupt+0x88>)
 80016a6:	7851      	ldrb	r1, [r2, #1]
 80016a8:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HUS_void_F_SIDE_ECHO_Interrupt+0x94>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fd10 	bl	80010d0 <MTIMERx_voidGetInputCaptureCounter>
		GlobalArr_u32EndTime[US_F_SIDE] += Global_u32Timer1OVFCounter * 65535;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HUS_void_F_SIDE_ECHO_Interrupt+0x98>)
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HUS_void_F_SIDE_ECHO_Interrupt+0x90>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4613      	mov	r3, r2
 80016ba:	041b      	lsls	r3, r3, #16
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	440b      	add	r3, r1
 80016c0:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <HUS_void_F_SIDE_ECHO_Interrupt+0x98>)
 80016c2:	6053      	str	r3, [r2, #4]
		MTIMERx_voidSetInputCaptureTrigger(GlobalArr_u8USTimer[US_F_SIDE],
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HUS_void_F_SIDE_ECHO_Interrupt+0x84>)
 80016c6:	785b      	ldrb	r3, [r3, #1]
 80016c8:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <HUS_void_F_SIDE_ECHO_Interrupt+0x88>)
 80016ca:	7851      	ldrb	r1, [r2, #1]
 80016cc:	2200      	movs	r2, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fd34 	bl	800113c <MTIMERx_voidSetInputCaptureTrigger>
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000124 	.word	0x20000124
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000004 	.word	0x20000004
 80016e4:	20000138 	.word	0x20000138
 80016e8:	20000158 	.word	0x20000158
 80016ec:	20000148 	.word	0x20000148
 80016f0:	20000144 	.word	0x20000144

080016f4 <HUS_void_B_SIDE_ECHO_Interrupt>:
/* -------------------------------------------------------------------------- */
static void HUS_void_B_SIDE_ECHO_Interrupt(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

	/* WAVE START */
	if(GlobalArr_u32EchoFlag[US_B_SIDE] == FLAG_RISING_EDGE)
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HUS_void_B_SIDE_ECHO_Interrupt+0x80>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d116      	bne.n	800172e <HUS_void_B_SIDE_ECHO_Interrupt+0x3a>
	{
		GlobalArr_u32EchoFlag[US_B_SIDE] = FLAG_FALLING_EDGE;
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <HUS_void_B_SIDE_ECHO_Interrupt+0x80>)
 8001702:	2201      	movs	r2, #1
 8001704:	609a      	str	r2, [r3, #8]
		MTIMERx_voidGetInputCaptureCounter(GlobalArr_u8USTimer[US_B_SIDE],
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <HUS_void_B_SIDE_ECHO_Interrupt+0x84>)
 8001708:	789b      	ldrb	r3, [r3, #2]
 800170a:	4a1c      	ldr	r2, [pc, #112]	; (800177c <HUS_void_B_SIDE_ECHO_Interrupt+0x88>)
 800170c:	7891      	ldrb	r1, [r2, #2]
 800170e:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <HUS_void_B_SIDE_ECHO_Interrupt+0x8c>)
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fcdd 	bl	80010d0 <MTIMERx_voidGetInputCaptureCounter>
				GlobalArr_u8USChannel[US_B_SIDE],
				&GlobalArr_u32StartTime[US_B_SIDE]);

		Global_u32Timer1OVFCounter = CLEAR;
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <HUS_void_B_SIDE_ECHO_Interrupt+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
		MTIMERx_voidSetInputCaptureTrigger(GlobalArr_u8USTimer[US_B_SIDE],
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HUS_void_B_SIDE_ECHO_Interrupt+0x84>)
 800171e:	789b      	ldrb	r3, [r3, #2]
 8001720:	4a16      	ldr	r2, [pc, #88]	; (800177c <HUS_void_B_SIDE_ECHO_Interrupt+0x88>)
 8001722:	7891      	ldrb	r1, [r2, #2]
 8001724:	2201      	movs	r2, #1
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fd08 	bl	800113c <MTIMERx_voidSetInputCaptureTrigger>
		GlobalArr_u32EndTime[US_B_SIDE] += Global_u32Timer1OVFCounter * 65535;
		MTIMERx_voidSetInputCaptureTrigger(GlobalArr_u8USTimer[US_B_SIDE],
				GlobalArr_u8USChannel[US_B_SIDE], RISING_EDGE);
	}

}
 800172c:	e020      	b.n	8001770 <HUS_void_B_SIDE_ECHO_Interrupt+0x7c>
	else if(GlobalArr_u32EchoFlag[US_B_SIDE] == FLAG_FALLING_EDGE)
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HUS_void_B_SIDE_ECHO_Interrupt+0x80>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d11c      	bne.n	8001770 <HUS_void_B_SIDE_ECHO_Interrupt+0x7c>
		GlobalArr_u32EchoFlag[US_B_SIDE] = FLAG_CALCULATING;
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HUS_void_B_SIDE_ECHO_Interrupt+0x80>)
 8001738:	2202      	movs	r2, #2
 800173a:	609a      	str	r2, [r3, #8]
		MTIMERx_voidGetInputCaptureCounter(GlobalArr_u8USTimer[US_B_SIDE],
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HUS_void_B_SIDE_ECHO_Interrupt+0x84>)
 800173e:	789b      	ldrb	r3, [r3, #2]
 8001740:	4a0e      	ldr	r2, [pc, #56]	; (800177c <HUS_void_B_SIDE_ECHO_Interrupt+0x88>)
 8001742:	7891      	ldrb	r1, [r2, #2]
 8001744:	4a10      	ldr	r2, [pc, #64]	; (8001788 <HUS_void_B_SIDE_ECHO_Interrupt+0x94>)
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fcc2 	bl	80010d0 <MTIMERx_voidGetInputCaptureCounter>
		GlobalArr_u32EndTime[US_B_SIDE] += Global_u32Timer1OVFCounter * 65535;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HUS_void_B_SIDE_ECHO_Interrupt+0x98>)
 800174e:	6899      	ldr	r1, [r3, #8]
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HUS_void_B_SIDE_ECHO_Interrupt+0x90>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4613      	mov	r3, r2
 8001756:	041b      	lsls	r3, r3, #16
 8001758:	1a9b      	subs	r3, r3, r2
 800175a:	440b      	add	r3, r1
 800175c:	4a0b      	ldr	r2, [pc, #44]	; (800178c <HUS_void_B_SIDE_ECHO_Interrupt+0x98>)
 800175e:	6093      	str	r3, [r2, #8]
		MTIMERx_voidSetInputCaptureTrigger(GlobalArr_u8USTimer[US_B_SIDE],
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HUS_void_B_SIDE_ECHO_Interrupt+0x84>)
 8001762:	789b      	ldrb	r3, [r3, #2]
 8001764:	4a05      	ldr	r2, [pc, #20]	; (800177c <HUS_void_B_SIDE_ECHO_Interrupt+0x88>)
 8001766:	7891      	ldrb	r1, [r2, #2]
 8001768:	2200      	movs	r2, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fce6 	bl	800113c <MTIMERx_voidSetInputCaptureTrigger>
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000124 	.word	0x20000124
 8001778:	20000000 	.word	0x20000000
 800177c:	20000004 	.word	0x20000004
 8001780:	2000013c 	.word	0x2000013c
 8001784:	20000158 	.word	0x20000158
 8001788:	2000014c 	.word	0x2000014c
 800178c:	20000144 	.word	0x20000144

08001790 <HUS_void_BACK_ECHO_Interrupt>:
/* -------------------------------------------------------------------------- */
static void HUS_void_BACK_ECHO_Interrupt(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0

	/* WAVE START */
	if(GlobalArr_u32EchoFlag[US_BACK] == FLAG_RISING_EDGE)
 8001794:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <HUS_void_BACK_ECHO_Interrupt+0x80>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d116      	bne.n	80017ca <HUS_void_BACK_ECHO_Interrupt+0x3a>
	{
		GlobalArr_u32EchoFlag[US_BACK] = FLAG_FALLING_EDGE;
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HUS_void_BACK_ECHO_Interrupt+0x80>)
 800179e:	2201      	movs	r2, #1
 80017a0:	60da      	str	r2, [r3, #12]
		MTIMERx_voidGetInputCaptureCounter(GlobalArr_u8USTimer[US_BACK],
 80017a2:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <HUS_void_BACK_ECHO_Interrupt+0x84>)
 80017a4:	78db      	ldrb	r3, [r3, #3]
 80017a6:	4a1c      	ldr	r2, [pc, #112]	; (8001818 <HUS_void_BACK_ECHO_Interrupt+0x88>)
 80017a8:	78d1      	ldrb	r1, [r2, #3]
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <HUS_void_BACK_ECHO_Interrupt+0x8c>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fc8f 	bl	80010d0 <MTIMERx_voidGetInputCaptureCounter>
				GlobalArr_u8USChannel[US_BACK],
				&GlobalArr_u32StartTime[US_BACK]);

		Global_u32Timer1OVFCounter = CLEAR;
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HUS_void_BACK_ECHO_Interrupt+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
		MTIMERx_voidSetInputCaptureTrigger(GlobalArr_u8USTimer[US_BACK],
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HUS_void_BACK_ECHO_Interrupt+0x84>)
 80017ba:	78db      	ldrb	r3, [r3, #3]
 80017bc:	4a16      	ldr	r2, [pc, #88]	; (8001818 <HUS_void_BACK_ECHO_Interrupt+0x88>)
 80017be:	78d1      	ldrb	r1, [r2, #3]
 80017c0:	2201      	movs	r2, #1
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fcba 	bl	800113c <MTIMERx_voidSetInputCaptureTrigger>
		GlobalArr_u32EndTime[US_BACK] += Global_u32Timer1OVFCounter * 65535;
		MTIMERx_voidSetInputCaptureTrigger(GlobalArr_u8USTimer[US_BACK],
				GlobalArr_u8USChannel[US_BACK], RISING_EDGE);
	}

}
 80017c8:	e020      	b.n	800180c <HUS_void_BACK_ECHO_Interrupt+0x7c>
	else if(GlobalArr_u32EchoFlag[US_BACK] == FLAG_FALLING_EDGE)
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HUS_void_BACK_ECHO_Interrupt+0x80>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d11c      	bne.n	800180c <HUS_void_BACK_ECHO_Interrupt+0x7c>
		GlobalArr_u32EchoFlag[US_BACK] = FLAG_CALCULATING;
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HUS_void_BACK_ECHO_Interrupt+0x80>)
 80017d4:	2202      	movs	r2, #2
 80017d6:	60da      	str	r2, [r3, #12]
		MTIMERx_voidGetInputCaptureCounter(GlobalArr_u8USTimer[US_BACK],
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HUS_void_BACK_ECHO_Interrupt+0x84>)
 80017da:	78db      	ldrb	r3, [r3, #3]
 80017dc:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <HUS_void_BACK_ECHO_Interrupt+0x88>)
 80017de:	78d1      	ldrb	r1, [r2, #3]
 80017e0:	4a10      	ldr	r2, [pc, #64]	; (8001824 <HUS_void_BACK_ECHO_Interrupt+0x94>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fc74 	bl	80010d0 <MTIMERx_voidGetInputCaptureCounter>
		GlobalArr_u32EndTime[US_BACK] += Global_u32Timer1OVFCounter * 65535;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <HUS_void_BACK_ECHO_Interrupt+0x98>)
 80017ea:	68d9      	ldr	r1, [r3, #12]
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HUS_void_BACK_ECHO_Interrupt+0x90>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4613      	mov	r3, r2
 80017f2:	041b      	lsls	r3, r3, #16
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <HUS_void_BACK_ECHO_Interrupt+0x98>)
 80017fa:	60d3      	str	r3, [r2, #12]
		MTIMERx_voidSetInputCaptureTrigger(GlobalArr_u8USTimer[US_BACK],
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <HUS_void_BACK_ECHO_Interrupt+0x84>)
 80017fe:	78db      	ldrb	r3, [r3, #3]
 8001800:	4a05      	ldr	r2, [pc, #20]	; (8001818 <HUS_void_BACK_ECHO_Interrupt+0x88>)
 8001802:	78d1      	ldrb	r1, [r2, #3]
 8001804:	2200      	movs	r2, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fc98 	bl	800113c <MTIMERx_voidSetInputCaptureTrigger>
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000124 	.word	0x20000124
 8001814:	20000000 	.word	0x20000000
 8001818:	20000004 	.word	0x20000004
 800181c:	20000140 	.word	0x20000140
 8001820:	20000158 	.word	0x20000158
 8001824:	20000150 	.word	0x20000150
 8001828:	20000144 	.word	0x20000144

0800182c <main>:

#include "ULTRASONIC_interface.h"


int main()
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
	MRCC_voidInitSysClock();
 8001832:	f7ff fa7f 	bl	8000d34 <MRCC_voidInitSysClock>
	MRCC_voidEnableClock(RCC_APB2,APB2_AFIOEN);
 8001836:	2100      	movs	r1, #0
 8001838:	2002      	movs	r0, #2
 800183a:	f7ff faa7 	bl	8000d8c <MRCC_voidEnableClock>
	MRCC_voidEnableClock(RCC_APB2,APB2_GPIOAEN);
 800183e:	2102      	movs	r1, #2
 8001840:	2002      	movs	r0, #2
 8001842:	f7ff faa3 	bl	8000d8c <MRCC_voidEnableClock>
	MRCC_voidEnableClock(RCC_APB2,APB2_GPIOBEN);
 8001846:	2103      	movs	r1, #3
 8001848:	2002      	movs	r0, #2
 800184a:	f7ff fa9f 	bl	8000d8c <MRCC_voidEnableClock>
	MRCC_voidEnableClock(RCC_APB2,APB2_GPIOCEN);
 800184e:	2104      	movs	r1, #4
 8001850:	2002      	movs	r0, #2
 8001852:	f7ff fa9b 	bl	8000d8c <MRCC_voidEnableClock>
	MRCC_voidEnableClock(RCC_APB1,APB1_TIM2EN);
 8001856:	2100      	movs	r1, #0
 8001858:	2001      	movs	r0, #1
 800185a:	f7ff fa97 	bl	8000d8c <MRCC_voidEnableClock>
  // HLCD_voidInit();
	MNVIC_voidEnableInterrupt(28);
 800185e:	201c      	movs	r0, #28
 8001860:	f7ff fa46 	bl	8000cf0 <MNVIC_voidEnableInterrupt>

	MGPIO_voidSetPinMode(GPIO_A,2,OUTPUT_SPEED_2MHZ_PP);
 8001864:	2202      	movs	r2, #2
 8001866:	2102      	movs	r1, #2
 8001868:	2000      	movs	r0, #0
 800186a:	f7fe ff59 	bl	8000720 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(GPIO_A,PIN12,OUTPUT_SPEED_2MHZ_PP);
 800186e:	2202      	movs	r2, #2
 8001870:	210c      	movs	r1, #12
 8001872:	2000      	movs	r0, #0
 8001874:	f7fe ff54 	bl	8000720 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(GPIO_A,PIN5,OUTPUT_SPEED_2MHZ_PP);
 8001878:	2202      	movs	r2, #2
 800187a:	2105      	movs	r1, #5
 800187c:	2000      	movs	r0, #0
 800187e:	f7fe ff4f 	bl	8000720 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(GPIO_B,PIN15,OUTPUT_SPEED_2MHZ_PP);
 8001882:	2202      	movs	r2, #2
 8001884:	210f      	movs	r1, #15
 8001886:	2001      	movs	r0, #1
 8001888:	f7fe ff4a 	bl	8000720 <MGPIO_voidSetPinMode>
//	MGPIO_voidSetPinMode(GPIO_C,PIN13,OUTPUT_SPEED_2MHZ_PP);


	   HLCD_voidInit();
 800188c:	f7ff f93b 	bl	8000b06 <HLCD_voidInit>

		HUS_voidInit();
 8001890:	f7ff fd98 	bl	80013c4 <HUS_voidInit>
		//HLCD_voidDispStr("sayed");
	  u16 FRONT_Distance = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	80fb      	strh	r3, [r7, #6]
	 // u16 F_SIDE_Distance =0;
	 // u16 B_SIDE_Distance =0;
	 // u16 BACK_Distance = 0;
	  	while(1)
	  	{
			HUS_voidGetDistance(US_FRONT, &FRONT_Distance);
 8001898:	1dbb      	adds	r3, r7, #6
 800189a:	4619      	mov	r1, r3
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff fe19 	bl	80014d4 <HUS_voidGetDistance>
			HLCD_voidDispIntNum(FRONT_Distance);
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff f9e7 	bl	8000c78 <HLCD_voidDispIntNum>

//	  		MGPIO_voidSetPinValue(GPIO_C,PIN13,GPIO_LOW);
	  		if(FRONT_Distance > 20)
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	2b14      	cmp	r3, #20
 80018ae:	d905      	bls.n	80018bc <main+0x90>
	  		{
	  			MGPIO_voidSetPinValue(GPIO_A,2,GPIO_HIGH);
 80018b0:	2201      	movs	r2, #1
 80018b2:	2102      	movs	r1, #2
 80018b4:	2000      	movs	r0, #0
 80018b6:	f7ff f80f 	bl	80008d8 <MGPIO_voidSetPinValue>
 80018ba:	e7ed      	b.n	8001898 <main+0x6c>
	  		}
	  		else
	  		{
	  			MGPIO_voidSetPinValue(GPIO_A,2,GPIO_LOW);
 80018bc:	2200      	movs	r2, #0
 80018be:	2102      	movs	r1, #2
 80018c0:	2000      	movs	r0, #0
 80018c2:	f7ff f809 	bl	80008d8 <MGPIO_voidSetPinValue>
			HUS_voidGetDistance(US_FRONT, &FRONT_Distance);
 80018c6:	e7e7      	b.n	8001898 <main+0x6c>

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f000 f846 	bl	8001988 <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20002800 	.word	0x20002800
 8001928:	00000400 	.word	0x00000400
 800192c:	2000015c 	.word	0x2000015c
 8001930:	20000170 	.word	0x20000170

08001934 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001934:	480d      	ldr	r0, [pc, #52]	; (800196c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001936:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001938:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800193c:	480c      	ldr	r0, [pc, #48]	; (8001970 <LoopForever+0x6>)
  ldr r1, =_edata
 800193e:	490d      	ldr	r1, [pc, #52]	; (8001974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <LoopForever+0xe>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001944:	e002      	b.n	800194c <LoopCopyDataInit>

08001946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194a:	3304      	adds	r3, #4

0800194c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800194c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001950:	d3f9      	bcc.n	8001946 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001954:	4c0a      	ldr	r4, [pc, #40]	; (8001980 <LoopForever+0x16>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001958:	e001      	b.n	800195e <LoopFillZerobss>

0800195a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800195c:	3204      	adds	r2, #4

0800195e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001960:	d3fb      	bcc.n	800195a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001962:	f000 f817 	bl	8001994 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001966:	f7ff ff61 	bl	800182c <main>

0800196a <LoopForever>:

LoopForever:
  b LoopForever
 800196a:	e7fe      	b.n	800196a <LoopForever>
  ldr   r0, =_estack
 800196c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001978:	08002338 	.word	0x08002338
  ldr r2, =_sbss
 800197c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001980:	20000170 	.word	0x20000170

08001984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC1_2_IRQHandler>
	...

08001988 <__errno>:
 8001988:	4b01      	ldr	r3, [pc, #4]	; (8001990 <__errno+0x8>)
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000014 	.word	0x20000014

08001994 <__libc_init_array>:
 8001994:	b570      	push	{r4, r5, r6, lr}
 8001996:	2600      	movs	r6, #0
 8001998:	4d0c      	ldr	r5, [pc, #48]	; (80019cc <__libc_init_array+0x38>)
 800199a:	4c0d      	ldr	r4, [pc, #52]	; (80019d0 <__libc_init_array+0x3c>)
 800199c:	1b64      	subs	r4, r4, r5
 800199e:	10a4      	asrs	r4, r4, #2
 80019a0:	42a6      	cmp	r6, r4
 80019a2:	d109      	bne.n	80019b8 <__libc_init_array+0x24>
 80019a4:	f000 fc94 	bl	80022d0 <_init>
 80019a8:	2600      	movs	r6, #0
 80019aa:	4d0a      	ldr	r5, [pc, #40]	; (80019d4 <__libc_init_array+0x40>)
 80019ac:	4c0a      	ldr	r4, [pc, #40]	; (80019d8 <__libc_init_array+0x44>)
 80019ae:	1b64      	subs	r4, r4, r5
 80019b0:	10a4      	asrs	r4, r4, #2
 80019b2:	42a6      	cmp	r6, r4
 80019b4:	d105      	bne.n	80019c2 <__libc_init_array+0x2e>
 80019b6:	bd70      	pop	{r4, r5, r6, pc}
 80019b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80019bc:	4798      	blx	r3
 80019be:	3601      	adds	r6, #1
 80019c0:	e7ee      	b.n	80019a0 <__libc_init_array+0xc>
 80019c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80019c6:	4798      	blx	r3
 80019c8:	3601      	adds	r6, #1
 80019ca:	e7f2      	b.n	80019b2 <__libc_init_array+0x1e>
 80019cc:	08002330 	.word	0x08002330
 80019d0:	08002330 	.word	0x08002330
 80019d4:	08002330 	.word	0x08002330
 80019d8:	08002334 	.word	0x08002334

080019dc <siprintf>:
 80019dc:	b40e      	push	{r1, r2, r3}
 80019de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80019e2:	b500      	push	{lr}
 80019e4:	b09c      	sub	sp, #112	; 0x70
 80019e6:	ab1d      	add	r3, sp, #116	; 0x74
 80019e8:	9002      	str	r0, [sp, #8]
 80019ea:	9006      	str	r0, [sp, #24]
 80019ec:	9107      	str	r1, [sp, #28]
 80019ee:	9104      	str	r1, [sp, #16]
 80019f0:	4808      	ldr	r0, [pc, #32]	; (8001a14 <siprintf+0x38>)
 80019f2:	4909      	ldr	r1, [pc, #36]	; (8001a18 <siprintf+0x3c>)
 80019f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80019f8:	9105      	str	r1, [sp, #20]
 80019fa:	6800      	ldr	r0, [r0, #0]
 80019fc:	a902      	add	r1, sp, #8
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	f000 f868 	bl	8001ad4 <_svfiprintf_r>
 8001a04:	2200      	movs	r2, #0
 8001a06:	9b02      	ldr	r3, [sp, #8]
 8001a08:	701a      	strb	r2, [r3, #0]
 8001a0a:	b01c      	add	sp, #112	; 0x70
 8001a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a10:	b003      	add	sp, #12
 8001a12:	4770      	bx	lr
 8001a14:	20000014 	.word	0x20000014
 8001a18:	ffff0208 	.word	0xffff0208

08001a1c <__ssputs_r>:
 8001a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a20:	688e      	ldr	r6, [r1, #8]
 8001a22:	4682      	mov	sl, r0
 8001a24:	429e      	cmp	r6, r3
 8001a26:	460c      	mov	r4, r1
 8001a28:	4690      	mov	r8, r2
 8001a2a:	461f      	mov	r7, r3
 8001a2c:	d838      	bhi.n	8001aa0 <__ssputs_r+0x84>
 8001a2e:	898a      	ldrh	r2, [r1, #12]
 8001a30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001a34:	d032      	beq.n	8001a9c <__ssputs_r+0x80>
 8001a36:	6825      	ldr	r5, [r4, #0]
 8001a38:	6909      	ldr	r1, [r1, #16]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	eba5 0901 	sub.w	r9, r5, r1
 8001a40:	6965      	ldr	r5, [r4, #20]
 8001a42:	444b      	add	r3, r9
 8001a44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001a48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001a4c:	106d      	asrs	r5, r5, #1
 8001a4e:	429d      	cmp	r5, r3
 8001a50:	bf38      	it	cc
 8001a52:	461d      	movcc	r5, r3
 8001a54:	0553      	lsls	r3, r2, #21
 8001a56:	d531      	bpl.n	8001abc <__ssputs_r+0xa0>
 8001a58:	4629      	mov	r1, r5
 8001a5a:	f000 fb6f 	bl	800213c <_malloc_r>
 8001a5e:	4606      	mov	r6, r0
 8001a60:	b950      	cbnz	r0, 8001a78 <__ssputs_r+0x5c>
 8001a62:	230c      	movs	r3, #12
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f8ca 3000 	str.w	r3, [sl]
 8001a6c:	89a3      	ldrh	r3, [r4, #12]
 8001a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a72:	81a3      	strh	r3, [r4, #12]
 8001a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a78:	464a      	mov	r2, r9
 8001a7a:	6921      	ldr	r1, [r4, #16]
 8001a7c:	f000 face 	bl	800201c <memcpy>
 8001a80:	89a3      	ldrh	r3, [r4, #12]
 8001a82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8a:	81a3      	strh	r3, [r4, #12]
 8001a8c:	6126      	str	r6, [r4, #16]
 8001a8e:	444e      	add	r6, r9
 8001a90:	6026      	str	r6, [r4, #0]
 8001a92:	463e      	mov	r6, r7
 8001a94:	6165      	str	r5, [r4, #20]
 8001a96:	eba5 0509 	sub.w	r5, r5, r9
 8001a9a:	60a5      	str	r5, [r4, #8]
 8001a9c:	42be      	cmp	r6, r7
 8001a9e:	d900      	bls.n	8001aa2 <__ssputs_r+0x86>
 8001aa0:	463e      	mov	r6, r7
 8001aa2:	4632      	mov	r2, r6
 8001aa4:	4641      	mov	r1, r8
 8001aa6:	6820      	ldr	r0, [r4, #0]
 8001aa8:	f000 fac6 	bl	8002038 <memmove>
 8001aac:	68a3      	ldr	r3, [r4, #8]
 8001aae:	2000      	movs	r0, #0
 8001ab0:	1b9b      	subs	r3, r3, r6
 8001ab2:	60a3      	str	r3, [r4, #8]
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	4433      	add	r3, r6
 8001ab8:	6023      	str	r3, [r4, #0]
 8001aba:	e7db      	b.n	8001a74 <__ssputs_r+0x58>
 8001abc:	462a      	mov	r2, r5
 8001abe:	f000 fbb1 	bl	8002224 <_realloc_r>
 8001ac2:	4606      	mov	r6, r0
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d1e1      	bne.n	8001a8c <__ssputs_r+0x70>
 8001ac8:	4650      	mov	r0, sl
 8001aca:	6921      	ldr	r1, [r4, #16]
 8001acc:	f000 face 	bl	800206c <_free_r>
 8001ad0:	e7c7      	b.n	8001a62 <__ssputs_r+0x46>
	...

08001ad4 <_svfiprintf_r>:
 8001ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ad8:	4698      	mov	r8, r3
 8001ada:	898b      	ldrh	r3, [r1, #12]
 8001adc:	4607      	mov	r7, r0
 8001ade:	061b      	lsls	r3, r3, #24
 8001ae0:	460d      	mov	r5, r1
 8001ae2:	4614      	mov	r4, r2
 8001ae4:	b09d      	sub	sp, #116	; 0x74
 8001ae6:	d50e      	bpl.n	8001b06 <_svfiprintf_r+0x32>
 8001ae8:	690b      	ldr	r3, [r1, #16]
 8001aea:	b963      	cbnz	r3, 8001b06 <_svfiprintf_r+0x32>
 8001aec:	2140      	movs	r1, #64	; 0x40
 8001aee:	f000 fb25 	bl	800213c <_malloc_r>
 8001af2:	6028      	str	r0, [r5, #0]
 8001af4:	6128      	str	r0, [r5, #16]
 8001af6:	b920      	cbnz	r0, 8001b02 <_svfiprintf_r+0x2e>
 8001af8:	230c      	movs	r3, #12
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	e0d1      	b.n	8001ca6 <_svfiprintf_r+0x1d2>
 8001b02:	2340      	movs	r3, #64	; 0x40
 8001b04:	616b      	str	r3, [r5, #20]
 8001b06:	2300      	movs	r3, #0
 8001b08:	9309      	str	r3, [sp, #36]	; 0x24
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b10:	2330      	movs	r3, #48	; 0x30
 8001b12:	f04f 0901 	mov.w	r9, #1
 8001b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001cc0 <_svfiprintf_r+0x1ec>
 8001b1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b22:	4623      	mov	r3, r4
 8001b24:	469a      	mov	sl, r3
 8001b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b2a:	b10a      	cbz	r2, 8001b30 <_svfiprintf_r+0x5c>
 8001b2c:	2a25      	cmp	r2, #37	; 0x25
 8001b2e:	d1f9      	bne.n	8001b24 <_svfiprintf_r+0x50>
 8001b30:	ebba 0b04 	subs.w	fp, sl, r4
 8001b34:	d00b      	beq.n	8001b4e <_svfiprintf_r+0x7a>
 8001b36:	465b      	mov	r3, fp
 8001b38:	4622      	mov	r2, r4
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	4638      	mov	r0, r7
 8001b3e:	f7ff ff6d 	bl	8001a1c <__ssputs_r>
 8001b42:	3001      	adds	r0, #1
 8001b44:	f000 80aa 	beq.w	8001c9c <_svfiprintf_r+0x1c8>
 8001b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b4a:	445a      	add	r2, fp
 8001b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8001b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 80a2 	beq.w	8001c9c <_svfiprintf_r+0x1c8>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b62:	f10a 0a01 	add.w	sl, sl, #1
 8001b66:	9304      	str	r3, [sp, #16]
 8001b68:	9307      	str	r3, [sp, #28]
 8001b6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b6e:	931a      	str	r3, [sp, #104]	; 0x68
 8001b70:	4654      	mov	r4, sl
 8001b72:	2205      	movs	r2, #5
 8001b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b78:	4851      	ldr	r0, [pc, #324]	; (8001cc0 <_svfiprintf_r+0x1ec>)
 8001b7a:	f000 fa41 	bl	8002000 <memchr>
 8001b7e:	9a04      	ldr	r2, [sp, #16]
 8001b80:	b9d8      	cbnz	r0, 8001bba <_svfiprintf_r+0xe6>
 8001b82:	06d0      	lsls	r0, r2, #27
 8001b84:	bf44      	itt	mi
 8001b86:	2320      	movmi	r3, #32
 8001b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b8c:	0711      	lsls	r1, r2, #28
 8001b8e:	bf44      	itt	mi
 8001b90:	232b      	movmi	r3, #43	; 0x2b
 8001b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b96:	f89a 3000 	ldrb.w	r3, [sl]
 8001b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8001b9c:	d015      	beq.n	8001bca <_svfiprintf_r+0xf6>
 8001b9e:	4654      	mov	r4, sl
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f04f 0c0a 	mov.w	ip, #10
 8001ba6:	9a07      	ldr	r2, [sp, #28]
 8001ba8:	4621      	mov	r1, r4
 8001baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001bae:	3b30      	subs	r3, #48	; 0x30
 8001bb0:	2b09      	cmp	r3, #9
 8001bb2:	d94e      	bls.n	8001c52 <_svfiprintf_r+0x17e>
 8001bb4:	b1b0      	cbz	r0, 8001be4 <_svfiprintf_r+0x110>
 8001bb6:	9207      	str	r2, [sp, #28]
 8001bb8:	e014      	b.n	8001be4 <_svfiprintf_r+0x110>
 8001bba:	eba0 0308 	sub.w	r3, r0, r8
 8001bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	46a2      	mov	sl, r4
 8001bc6:	9304      	str	r3, [sp, #16]
 8001bc8:	e7d2      	b.n	8001b70 <_svfiprintf_r+0x9c>
 8001bca:	9b03      	ldr	r3, [sp, #12]
 8001bcc:	1d19      	adds	r1, r3, #4
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	9103      	str	r1, [sp, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	bfbb      	ittet	lt
 8001bd6:	425b      	neglt	r3, r3
 8001bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8001bdc:	9307      	strge	r3, [sp, #28]
 8001bde:	9307      	strlt	r3, [sp, #28]
 8001be0:	bfb8      	it	lt
 8001be2:	9204      	strlt	r2, [sp, #16]
 8001be4:	7823      	ldrb	r3, [r4, #0]
 8001be6:	2b2e      	cmp	r3, #46	; 0x2e
 8001be8:	d10c      	bne.n	8001c04 <_svfiprintf_r+0x130>
 8001bea:	7863      	ldrb	r3, [r4, #1]
 8001bec:	2b2a      	cmp	r3, #42	; 0x2a
 8001bee:	d135      	bne.n	8001c5c <_svfiprintf_r+0x188>
 8001bf0:	9b03      	ldr	r3, [sp, #12]
 8001bf2:	3402      	adds	r4, #2
 8001bf4:	1d1a      	adds	r2, r3, #4
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	9203      	str	r2, [sp, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	bfb8      	it	lt
 8001bfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c02:	9305      	str	r3, [sp, #20]
 8001c04:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001cc4 <_svfiprintf_r+0x1f0>
 8001c08:	2203      	movs	r2, #3
 8001c0a:	4650      	mov	r0, sl
 8001c0c:	7821      	ldrb	r1, [r4, #0]
 8001c0e:	f000 f9f7 	bl	8002000 <memchr>
 8001c12:	b140      	cbz	r0, 8001c26 <_svfiprintf_r+0x152>
 8001c14:	2340      	movs	r3, #64	; 0x40
 8001c16:	eba0 000a 	sub.w	r0, r0, sl
 8001c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8001c1e:	9b04      	ldr	r3, [sp, #16]
 8001c20:	3401      	adds	r4, #1
 8001c22:	4303      	orrs	r3, r0
 8001c24:	9304      	str	r3, [sp, #16]
 8001c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c2a:	2206      	movs	r2, #6
 8001c2c:	4826      	ldr	r0, [pc, #152]	; (8001cc8 <_svfiprintf_r+0x1f4>)
 8001c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c32:	f000 f9e5 	bl	8002000 <memchr>
 8001c36:	2800      	cmp	r0, #0
 8001c38:	d038      	beq.n	8001cac <_svfiprintf_r+0x1d8>
 8001c3a:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <_svfiprintf_r+0x1f8>)
 8001c3c:	bb1b      	cbnz	r3, 8001c86 <_svfiprintf_r+0x1b2>
 8001c3e:	9b03      	ldr	r3, [sp, #12]
 8001c40:	3307      	adds	r3, #7
 8001c42:	f023 0307 	bic.w	r3, r3, #7
 8001c46:	3308      	adds	r3, #8
 8001c48:	9303      	str	r3, [sp, #12]
 8001c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c4c:	4433      	add	r3, r6
 8001c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8001c50:	e767      	b.n	8001b22 <_svfiprintf_r+0x4e>
 8001c52:	460c      	mov	r4, r1
 8001c54:	2001      	movs	r0, #1
 8001c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c5a:	e7a5      	b.n	8001ba8 <_svfiprintf_r+0xd4>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f04f 0c0a 	mov.w	ip, #10
 8001c62:	4619      	mov	r1, r3
 8001c64:	3401      	adds	r4, #1
 8001c66:	9305      	str	r3, [sp, #20]
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c6e:	3a30      	subs	r2, #48	; 0x30
 8001c70:	2a09      	cmp	r2, #9
 8001c72:	d903      	bls.n	8001c7c <_svfiprintf_r+0x1a8>
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0c5      	beq.n	8001c04 <_svfiprintf_r+0x130>
 8001c78:	9105      	str	r1, [sp, #20]
 8001c7a:	e7c3      	b.n	8001c04 <_svfiprintf_r+0x130>
 8001c7c:	4604      	mov	r4, r0
 8001c7e:	2301      	movs	r3, #1
 8001c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c84:	e7f0      	b.n	8001c68 <_svfiprintf_r+0x194>
 8001c86:	ab03      	add	r3, sp, #12
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	462a      	mov	r2, r5
 8001c8c:	4638      	mov	r0, r7
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <_svfiprintf_r+0x1fc>)
 8001c90:	a904      	add	r1, sp, #16
 8001c92:	f3af 8000 	nop.w
 8001c96:	1c42      	adds	r2, r0, #1
 8001c98:	4606      	mov	r6, r0
 8001c9a:	d1d6      	bne.n	8001c4a <_svfiprintf_r+0x176>
 8001c9c:	89ab      	ldrh	r3, [r5, #12]
 8001c9e:	065b      	lsls	r3, r3, #25
 8001ca0:	f53f af2c 	bmi.w	8001afc <_svfiprintf_r+0x28>
 8001ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ca6:	b01d      	add	sp, #116	; 0x74
 8001ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cac:	ab03      	add	r3, sp, #12
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	462a      	mov	r2, r5
 8001cb2:	4638      	mov	r0, r7
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <_svfiprintf_r+0x1fc>)
 8001cb6:	a904      	add	r1, sp, #16
 8001cb8:	f000 f87c 	bl	8001db4 <_printf_i>
 8001cbc:	e7eb      	b.n	8001c96 <_svfiprintf_r+0x1c2>
 8001cbe:	bf00      	nop
 8001cc0:	080022fb 	.word	0x080022fb
 8001cc4:	08002301 	.word	0x08002301
 8001cc8:	08002305 	.word	0x08002305
 8001ccc:	00000000 	.word	0x00000000
 8001cd0:	08001a1d 	.word	0x08001a1d

08001cd4 <_printf_common>:
 8001cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cd8:	4616      	mov	r6, r2
 8001cda:	4699      	mov	r9, r3
 8001cdc:	688a      	ldr	r2, [r1, #8]
 8001cde:	690b      	ldr	r3, [r1, #16]
 8001ce0:	4607      	mov	r7, r0
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	bfb8      	it	lt
 8001ce6:	4613      	movlt	r3, r2
 8001ce8:	6033      	str	r3, [r6, #0]
 8001cea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001cee:	460c      	mov	r4, r1
 8001cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001cf4:	b10a      	cbz	r2, 8001cfa <_printf_common+0x26>
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	6033      	str	r3, [r6, #0]
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	0699      	lsls	r1, r3, #26
 8001cfe:	bf42      	ittt	mi
 8001d00:	6833      	ldrmi	r3, [r6, #0]
 8001d02:	3302      	addmi	r3, #2
 8001d04:	6033      	strmi	r3, [r6, #0]
 8001d06:	6825      	ldr	r5, [r4, #0]
 8001d08:	f015 0506 	ands.w	r5, r5, #6
 8001d0c:	d106      	bne.n	8001d1c <_printf_common+0x48>
 8001d0e:	f104 0a19 	add.w	sl, r4, #25
 8001d12:	68e3      	ldr	r3, [r4, #12]
 8001d14:	6832      	ldr	r2, [r6, #0]
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	42ab      	cmp	r3, r5
 8001d1a:	dc28      	bgt.n	8001d6e <_printf_common+0x9a>
 8001d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001d20:	1e13      	subs	r3, r2, #0
 8001d22:	6822      	ldr	r2, [r4, #0]
 8001d24:	bf18      	it	ne
 8001d26:	2301      	movne	r3, #1
 8001d28:	0692      	lsls	r2, r2, #26
 8001d2a:	d42d      	bmi.n	8001d88 <_printf_common+0xb4>
 8001d2c:	4649      	mov	r1, r9
 8001d2e:	4638      	mov	r0, r7
 8001d30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d34:	47c0      	blx	r8
 8001d36:	3001      	adds	r0, #1
 8001d38:	d020      	beq.n	8001d7c <_printf_common+0xa8>
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	68e5      	ldr	r5, [r4, #12]
 8001d3e:	f003 0306 	and.w	r3, r3, #6
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf18      	it	ne
 8001d46:	2500      	movne	r5, #0
 8001d48:	6832      	ldr	r2, [r6, #0]
 8001d4a:	f04f 0600 	mov.w	r6, #0
 8001d4e:	68a3      	ldr	r3, [r4, #8]
 8001d50:	bf08      	it	eq
 8001d52:	1aad      	subeq	r5, r5, r2
 8001d54:	6922      	ldr	r2, [r4, #16]
 8001d56:	bf08      	it	eq
 8001d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	bfc4      	itt	gt
 8001d60:	1a9b      	subgt	r3, r3, r2
 8001d62:	18ed      	addgt	r5, r5, r3
 8001d64:	341a      	adds	r4, #26
 8001d66:	42b5      	cmp	r5, r6
 8001d68:	d11a      	bne.n	8001da0 <_printf_common+0xcc>
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	e008      	b.n	8001d80 <_printf_common+0xac>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	4652      	mov	r2, sl
 8001d72:	4649      	mov	r1, r9
 8001d74:	4638      	mov	r0, r7
 8001d76:	47c0      	blx	r8
 8001d78:	3001      	adds	r0, #1
 8001d7a:	d103      	bne.n	8001d84 <_printf_common+0xb0>
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d84:	3501      	adds	r5, #1
 8001d86:	e7c4      	b.n	8001d12 <_printf_common+0x3e>
 8001d88:	2030      	movs	r0, #48	; 0x30
 8001d8a:	18e1      	adds	r1, r4, r3
 8001d8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001d96:	4422      	add	r2, r4
 8001d98:	3302      	adds	r3, #2
 8001d9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d9e:	e7c5      	b.n	8001d2c <_printf_common+0x58>
 8001da0:	2301      	movs	r3, #1
 8001da2:	4622      	mov	r2, r4
 8001da4:	4649      	mov	r1, r9
 8001da6:	4638      	mov	r0, r7
 8001da8:	47c0      	blx	r8
 8001daa:	3001      	adds	r0, #1
 8001dac:	d0e6      	beq.n	8001d7c <_printf_common+0xa8>
 8001dae:	3601      	adds	r6, #1
 8001db0:	e7d9      	b.n	8001d66 <_printf_common+0x92>
	...

08001db4 <_printf_i>:
 8001db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001db8:	7e0f      	ldrb	r7, [r1, #24]
 8001dba:	4691      	mov	r9, r2
 8001dbc:	2f78      	cmp	r7, #120	; 0x78
 8001dbe:	4680      	mov	r8, r0
 8001dc0:	460c      	mov	r4, r1
 8001dc2:	469a      	mov	sl, r3
 8001dc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001dc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001dca:	d807      	bhi.n	8001ddc <_printf_i+0x28>
 8001dcc:	2f62      	cmp	r7, #98	; 0x62
 8001dce:	d80a      	bhi.n	8001de6 <_printf_i+0x32>
 8001dd0:	2f00      	cmp	r7, #0
 8001dd2:	f000 80d9 	beq.w	8001f88 <_printf_i+0x1d4>
 8001dd6:	2f58      	cmp	r7, #88	; 0x58
 8001dd8:	f000 80a4 	beq.w	8001f24 <_printf_i+0x170>
 8001ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001de0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001de4:	e03a      	b.n	8001e5c <_printf_i+0xa8>
 8001de6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001dea:	2b15      	cmp	r3, #21
 8001dec:	d8f6      	bhi.n	8001ddc <_printf_i+0x28>
 8001dee:	a101      	add	r1, pc, #4	; (adr r1, 8001df4 <_printf_i+0x40>)
 8001df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001df4:	08001e4d 	.word	0x08001e4d
 8001df8:	08001e61 	.word	0x08001e61
 8001dfc:	08001ddd 	.word	0x08001ddd
 8001e00:	08001ddd 	.word	0x08001ddd
 8001e04:	08001ddd 	.word	0x08001ddd
 8001e08:	08001ddd 	.word	0x08001ddd
 8001e0c:	08001e61 	.word	0x08001e61
 8001e10:	08001ddd 	.word	0x08001ddd
 8001e14:	08001ddd 	.word	0x08001ddd
 8001e18:	08001ddd 	.word	0x08001ddd
 8001e1c:	08001ddd 	.word	0x08001ddd
 8001e20:	08001f6f 	.word	0x08001f6f
 8001e24:	08001e91 	.word	0x08001e91
 8001e28:	08001f51 	.word	0x08001f51
 8001e2c:	08001ddd 	.word	0x08001ddd
 8001e30:	08001ddd 	.word	0x08001ddd
 8001e34:	08001f91 	.word	0x08001f91
 8001e38:	08001ddd 	.word	0x08001ddd
 8001e3c:	08001e91 	.word	0x08001e91
 8001e40:	08001ddd 	.word	0x08001ddd
 8001e44:	08001ddd 	.word	0x08001ddd
 8001e48:	08001f59 	.word	0x08001f59
 8001e4c:	682b      	ldr	r3, [r5, #0]
 8001e4e:	1d1a      	adds	r2, r3, #4
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	602a      	str	r2, [r5, #0]
 8001e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0a4      	b.n	8001faa <_printf_i+0x1f6>
 8001e60:	6820      	ldr	r0, [r4, #0]
 8001e62:	6829      	ldr	r1, [r5, #0]
 8001e64:	0606      	lsls	r6, r0, #24
 8001e66:	f101 0304 	add.w	r3, r1, #4
 8001e6a:	d50a      	bpl.n	8001e82 <_printf_i+0xce>
 8001e6c:	680e      	ldr	r6, [r1, #0]
 8001e6e:	602b      	str	r3, [r5, #0]
 8001e70:	2e00      	cmp	r6, #0
 8001e72:	da03      	bge.n	8001e7c <_printf_i+0xc8>
 8001e74:	232d      	movs	r3, #45	; 0x2d
 8001e76:	4276      	negs	r6, r6
 8001e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e7c:	230a      	movs	r3, #10
 8001e7e:	485e      	ldr	r0, [pc, #376]	; (8001ff8 <_printf_i+0x244>)
 8001e80:	e019      	b.n	8001eb6 <_printf_i+0x102>
 8001e82:	680e      	ldr	r6, [r1, #0]
 8001e84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e88:	602b      	str	r3, [r5, #0]
 8001e8a:	bf18      	it	ne
 8001e8c:	b236      	sxthne	r6, r6
 8001e8e:	e7ef      	b.n	8001e70 <_printf_i+0xbc>
 8001e90:	682b      	ldr	r3, [r5, #0]
 8001e92:	6820      	ldr	r0, [r4, #0]
 8001e94:	1d19      	adds	r1, r3, #4
 8001e96:	6029      	str	r1, [r5, #0]
 8001e98:	0601      	lsls	r1, r0, #24
 8001e9a:	d501      	bpl.n	8001ea0 <_printf_i+0xec>
 8001e9c:	681e      	ldr	r6, [r3, #0]
 8001e9e:	e002      	b.n	8001ea6 <_printf_i+0xf2>
 8001ea0:	0646      	lsls	r6, r0, #25
 8001ea2:	d5fb      	bpl.n	8001e9c <_printf_i+0xe8>
 8001ea4:	881e      	ldrh	r6, [r3, #0]
 8001ea6:	2f6f      	cmp	r7, #111	; 0x6f
 8001ea8:	bf0c      	ite	eq
 8001eaa:	2308      	moveq	r3, #8
 8001eac:	230a      	movne	r3, #10
 8001eae:	4852      	ldr	r0, [pc, #328]	; (8001ff8 <_printf_i+0x244>)
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001eb6:	6865      	ldr	r5, [r4, #4]
 8001eb8:	2d00      	cmp	r5, #0
 8001eba:	bfa8      	it	ge
 8001ebc:	6821      	ldrge	r1, [r4, #0]
 8001ebe:	60a5      	str	r5, [r4, #8]
 8001ec0:	bfa4      	itt	ge
 8001ec2:	f021 0104 	bicge.w	r1, r1, #4
 8001ec6:	6021      	strge	r1, [r4, #0]
 8001ec8:	b90e      	cbnz	r6, 8001ece <_printf_i+0x11a>
 8001eca:	2d00      	cmp	r5, #0
 8001ecc:	d04d      	beq.n	8001f6a <_printf_i+0x1b6>
 8001ece:	4615      	mov	r5, r2
 8001ed0:	fbb6 f1f3 	udiv	r1, r6, r3
 8001ed4:	fb03 6711 	mls	r7, r3, r1, r6
 8001ed8:	5dc7      	ldrb	r7, [r0, r7]
 8001eda:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001ede:	4637      	mov	r7, r6
 8001ee0:	42bb      	cmp	r3, r7
 8001ee2:	460e      	mov	r6, r1
 8001ee4:	d9f4      	bls.n	8001ed0 <_printf_i+0x11c>
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d10b      	bne.n	8001f02 <_printf_i+0x14e>
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	07de      	lsls	r6, r3, #31
 8001eee:	d508      	bpl.n	8001f02 <_printf_i+0x14e>
 8001ef0:	6923      	ldr	r3, [r4, #16]
 8001ef2:	6861      	ldr	r1, [r4, #4]
 8001ef4:	4299      	cmp	r1, r3
 8001ef6:	bfde      	ittt	le
 8001ef8:	2330      	movle	r3, #48	; 0x30
 8001efa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001efe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001f02:	1b52      	subs	r2, r2, r5
 8001f04:	6122      	str	r2, [r4, #16]
 8001f06:	464b      	mov	r3, r9
 8001f08:	4621      	mov	r1, r4
 8001f0a:	4640      	mov	r0, r8
 8001f0c:	f8cd a000 	str.w	sl, [sp]
 8001f10:	aa03      	add	r2, sp, #12
 8001f12:	f7ff fedf 	bl	8001cd4 <_printf_common>
 8001f16:	3001      	adds	r0, #1
 8001f18:	d14c      	bne.n	8001fb4 <_printf_i+0x200>
 8001f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1e:	b004      	add	sp, #16
 8001f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f24:	4834      	ldr	r0, [pc, #208]	; (8001ff8 <_printf_i+0x244>)
 8001f26:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001f2a:	6829      	ldr	r1, [r5, #0]
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	f851 6b04 	ldr.w	r6, [r1], #4
 8001f32:	6029      	str	r1, [r5, #0]
 8001f34:	061d      	lsls	r5, r3, #24
 8001f36:	d514      	bpl.n	8001f62 <_printf_i+0x1ae>
 8001f38:	07df      	lsls	r7, r3, #31
 8001f3a:	bf44      	itt	mi
 8001f3c:	f043 0320 	orrmi.w	r3, r3, #32
 8001f40:	6023      	strmi	r3, [r4, #0]
 8001f42:	b91e      	cbnz	r6, 8001f4c <_printf_i+0x198>
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	f023 0320 	bic.w	r3, r3, #32
 8001f4a:	6023      	str	r3, [r4, #0]
 8001f4c:	2310      	movs	r3, #16
 8001f4e:	e7af      	b.n	8001eb0 <_printf_i+0xfc>
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	f043 0320 	orr.w	r3, r3, #32
 8001f56:	6023      	str	r3, [r4, #0]
 8001f58:	2378      	movs	r3, #120	; 0x78
 8001f5a:	4828      	ldr	r0, [pc, #160]	; (8001ffc <_printf_i+0x248>)
 8001f5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001f60:	e7e3      	b.n	8001f2a <_printf_i+0x176>
 8001f62:	0659      	lsls	r1, r3, #25
 8001f64:	bf48      	it	mi
 8001f66:	b2b6      	uxthmi	r6, r6
 8001f68:	e7e6      	b.n	8001f38 <_printf_i+0x184>
 8001f6a:	4615      	mov	r5, r2
 8001f6c:	e7bb      	b.n	8001ee6 <_printf_i+0x132>
 8001f6e:	682b      	ldr	r3, [r5, #0]
 8001f70:	6826      	ldr	r6, [r4, #0]
 8001f72:	1d18      	adds	r0, r3, #4
 8001f74:	6961      	ldr	r1, [r4, #20]
 8001f76:	6028      	str	r0, [r5, #0]
 8001f78:	0635      	lsls	r5, r6, #24
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	d501      	bpl.n	8001f82 <_printf_i+0x1ce>
 8001f7e:	6019      	str	r1, [r3, #0]
 8001f80:	e002      	b.n	8001f88 <_printf_i+0x1d4>
 8001f82:	0670      	lsls	r0, r6, #25
 8001f84:	d5fb      	bpl.n	8001f7e <_printf_i+0x1ca>
 8001f86:	8019      	strh	r1, [r3, #0]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	4615      	mov	r5, r2
 8001f8c:	6123      	str	r3, [r4, #16]
 8001f8e:	e7ba      	b.n	8001f06 <_printf_i+0x152>
 8001f90:	682b      	ldr	r3, [r5, #0]
 8001f92:	2100      	movs	r1, #0
 8001f94:	1d1a      	adds	r2, r3, #4
 8001f96:	602a      	str	r2, [r5, #0]
 8001f98:	681d      	ldr	r5, [r3, #0]
 8001f9a:	6862      	ldr	r2, [r4, #4]
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	f000 f82f 	bl	8002000 <memchr>
 8001fa2:	b108      	cbz	r0, 8001fa8 <_printf_i+0x1f4>
 8001fa4:	1b40      	subs	r0, r0, r5
 8001fa6:	6060      	str	r0, [r4, #4]
 8001fa8:	6863      	ldr	r3, [r4, #4]
 8001faa:	6123      	str	r3, [r4, #16]
 8001fac:	2300      	movs	r3, #0
 8001fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fb2:	e7a8      	b.n	8001f06 <_printf_i+0x152>
 8001fb4:	462a      	mov	r2, r5
 8001fb6:	4649      	mov	r1, r9
 8001fb8:	4640      	mov	r0, r8
 8001fba:	6923      	ldr	r3, [r4, #16]
 8001fbc:	47d0      	blx	sl
 8001fbe:	3001      	adds	r0, #1
 8001fc0:	d0ab      	beq.n	8001f1a <_printf_i+0x166>
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	079b      	lsls	r3, r3, #30
 8001fc6:	d413      	bmi.n	8001ff0 <_printf_i+0x23c>
 8001fc8:	68e0      	ldr	r0, [r4, #12]
 8001fca:	9b03      	ldr	r3, [sp, #12]
 8001fcc:	4298      	cmp	r0, r3
 8001fce:	bfb8      	it	lt
 8001fd0:	4618      	movlt	r0, r3
 8001fd2:	e7a4      	b.n	8001f1e <_printf_i+0x16a>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	4632      	mov	r2, r6
 8001fd8:	4649      	mov	r1, r9
 8001fda:	4640      	mov	r0, r8
 8001fdc:	47d0      	blx	sl
 8001fde:	3001      	adds	r0, #1
 8001fe0:	d09b      	beq.n	8001f1a <_printf_i+0x166>
 8001fe2:	3501      	adds	r5, #1
 8001fe4:	68e3      	ldr	r3, [r4, #12]
 8001fe6:	9903      	ldr	r1, [sp, #12]
 8001fe8:	1a5b      	subs	r3, r3, r1
 8001fea:	42ab      	cmp	r3, r5
 8001fec:	dcf2      	bgt.n	8001fd4 <_printf_i+0x220>
 8001fee:	e7eb      	b.n	8001fc8 <_printf_i+0x214>
 8001ff0:	2500      	movs	r5, #0
 8001ff2:	f104 0619 	add.w	r6, r4, #25
 8001ff6:	e7f5      	b.n	8001fe4 <_printf_i+0x230>
 8001ff8:	0800230c 	.word	0x0800230c
 8001ffc:	0800231d 	.word	0x0800231d

08002000 <memchr>:
 8002000:	4603      	mov	r3, r0
 8002002:	b510      	push	{r4, lr}
 8002004:	b2c9      	uxtb	r1, r1
 8002006:	4402      	add	r2, r0
 8002008:	4293      	cmp	r3, r2
 800200a:	4618      	mov	r0, r3
 800200c:	d101      	bne.n	8002012 <memchr+0x12>
 800200e:	2000      	movs	r0, #0
 8002010:	e003      	b.n	800201a <memchr+0x1a>
 8002012:	7804      	ldrb	r4, [r0, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	428c      	cmp	r4, r1
 8002018:	d1f6      	bne.n	8002008 <memchr+0x8>
 800201a:	bd10      	pop	{r4, pc}

0800201c <memcpy>:
 800201c:	440a      	add	r2, r1
 800201e:	4291      	cmp	r1, r2
 8002020:	f100 33ff 	add.w	r3, r0, #4294967295
 8002024:	d100      	bne.n	8002028 <memcpy+0xc>
 8002026:	4770      	bx	lr
 8002028:	b510      	push	{r4, lr}
 800202a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800202e:	4291      	cmp	r1, r2
 8002030:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002034:	d1f9      	bne.n	800202a <memcpy+0xe>
 8002036:	bd10      	pop	{r4, pc}

08002038 <memmove>:
 8002038:	4288      	cmp	r0, r1
 800203a:	b510      	push	{r4, lr}
 800203c:	eb01 0402 	add.w	r4, r1, r2
 8002040:	d902      	bls.n	8002048 <memmove+0x10>
 8002042:	4284      	cmp	r4, r0
 8002044:	4623      	mov	r3, r4
 8002046:	d807      	bhi.n	8002058 <memmove+0x20>
 8002048:	1e43      	subs	r3, r0, #1
 800204a:	42a1      	cmp	r1, r4
 800204c:	d008      	beq.n	8002060 <memmove+0x28>
 800204e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002052:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002056:	e7f8      	b.n	800204a <memmove+0x12>
 8002058:	4601      	mov	r1, r0
 800205a:	4402      	add	r2, r0
 800205c:	428a      	cmp	r2, r1
 800205e:	d100      	bne.n	8002062 <memmove+0x2a>
 8002060:	bd10      	pop	{r4, pc}
 8002062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800206a:	e7f7      	b.n	800205c <memmove+0x24>

0800206c <_free_r>:
 800206c:	b538      	push	{r3, r4, r5, lr}
 800206e:	4605      	mov	r5, r0
 8002070:	2900      	cmp	r1, #0
 8002072:	d040      	beq.n	80020f6 <_free_r+0x8a>
 8002074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002078:	1f0c      	subs	r4, r1, #4
 800207a:	2b00      	cmp	r3, #0
 800207c:	bfb8      	it	lt
 800207e:	18e4      	addlt	r4, r4, r3
 8002080:	f000 f910 	bl	80022a4 <__malloc_lock>
 8002084:	4a1c      	ldr	r2, [pc, #112]	; (80020f8 <_free_r+0x8c>)
 8002086:	6813      	ldr	r3, [r2, #0]
 8002088:	b933      	cbnz	r3, 8002098 <_free_r+0x2c>
 800208a:	6063      	str	r3, [r4, #4]
 800208c:	6014      	str	r4, [r2, #0]
 800208e:	4628      	mov	r0, r5
 8002090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002094:	f000 b90c 	b.w	80022b0 <__malloc_unlock>
 8002098:	42a3      	cmp	r3, r4
 800209a:	d908      	bls.n	80020ae <_free_r+0x42>
 800209c:	6820      	ldr	r0, [r4, #0]
 800209e:	1821      	adds	r1, r4, r0
 80020a0:	428b      	cmp	r3, r1
 80020a2:	bf01      	itttt	eq
 80020a4:	6819      	ldreq	r1, [r3, #0]
 80020a6:	685b      	ldreq	r3, [r3, #4]
 80020a8:	1809      	addeq	r1, r1, r0
 80020aa:	6021      	streq	r1, [r4, #0]
 80020ac:	e7ed      	b.n	800208a <_free_r+0x1e>
 80020ae:	461a      	mov	r2, r3
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	b10b      	cbz	r3, 80020b8 <_free_r+0x4c>
 80020b4:	42a3      	cmp	r3, r4
 80020b6:	d9fa      	bls.n	80020ae <_free_r+0x42>
 80020b8:	6811      	ldr	r1, [r2, #0]
 80020ba:	1850      	adds	r0, r2, r1
 80020bc:	42a0      	cmp	r0, r4
 80020be:	d10b      	bne.n	80020d8 <_free_r+0x6c>
 80020c0:	6820      	ldr	r0, [r4, #0]
 80020c2:	4401      	add	r1, r0
 80020c4:	1850      	adds	r0, r2, r1
 80020c6:	4283      	cmp	r3, r0
 80020c8:	6011      	str	r1, [r2, #0]
 80020ca:	d1e0      	bne.n	800208e <_free_r+0x22>
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4401      	add	r1, r0
 80020d2:	6011      	str	r1, [r2, #0]
 80020d4:	6053      	str	r3, [r2, #4]
 80020d6:	e7da      	b.n	800208e <_free_r+0x22>
 80020d8:	d902      	bls.n	80020e0 <_free_r+0x74>
 80020da:	230c      	movs	r3, #12
 80020dc:	602b      	str	r3, [r5, #0]
 80020de:	e7d6      	b.n	800208e <_free_r+0x22>
 80020e0:	6820      	ldr	r0, [r4, #0]
 80020e2:	1821      	adds	r1, r4, r0
 80020e4:	428b      	cmp	r3, r1
 80020e6:	bf01      	itttt	eq
 80020e8:	6819      	ldreq	r1, [r3, #0]
 80020ea:	685b      	ldreq	r3, [r3, #4]
 80020ec:	1809      	addeq	r1, r1, r0
 80020ee:	6021      	streq	r1, [r4, #0]
 80020f0:	6063      	str	r3, [r4, #4]
 80020f2:	6054      	str	r4, [r2, #4]
 80020f4:	e7cb      	b.n	800208e <_free_r+0x22>
 80020f6:	bd38      	pop	{r3, r4, r5, pc}
 80020f8:	20000160 	.word	0x20000160

080020fc <sbrk_aligned>:
 80020fc:	b570      	push	{r4, r5, r6, lr}
 80020fe:	4e0e      	ldr	r6, [pc, #56]	; (8002138 <sbrk_aligned+0x3c>)
 8002100:	460c      	mov	r4, r1
 8002102:	6831      	ldr	r1, [r6, #0]
 8002104:	4605      	mov	r5, r0
 8002106:	b911      	cbnz	r1, 800210e <sbrk_aligned+0x12>
 8002108:	f000 f8bc 	bl	8002284 <_sbrk_r>
 800210c:	6030      	str	r0, [r6, #0]
 800210e:	4621      	mov	r1, r4
 8002110:	4628      	mov	r0, r5
 8002112:	f000 f8b7 	bl	8002284 <_sbrk_r>
 8002116:	1c43      	adds	r3, r0, #1
 8002118:	d00a      	beq.n	8002130 <sbrk_aligned+0x34>
 800211a:	1cc4      	adds	r4, r0, #3
 800211c:	f024 0403 	bic.w	r4, r4, #3
 8002120:	42a0      	cmp	r0, r4
 8002122:	d007      	beq.n	8002134 <sbrk_aligned+0x38>
 8002124:	1a21      	subs	r1, r4, r0
 8002126:	4628      	mov	r0, r5
 8002128:	f000 f8ac 	bl	8002284 <_sbrk_r>
 800212c:	3001      	adds	r0, #1
 800212e:	d101      	bne.n	8002134 <sbrk_aligned+0x38>
 8002130:	f04f 34ff 	mov.w	r4, #4294967295
 8002134:	4620      	mov	r0, r4
 8002136:	bd70      	pop	{r4, r5, r6, pc}
 8002138:	20000164 	.word	0x20000164

0800213c <_malloc_r>:
 800213c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002140:	1ccd      	adds	r5, r1, #3
 8002142:	f025 0503 	bic.w	r5, r5, #3
 8002146:	3508      	adds	r5, #8
 8002148:	2d0c      	cmp	r5, #12
 800214a:	bf38      	it	cc
 800214c:	250c      	movcc	r5, #12
 800214e:	2d00      	cmp	r5, #0
 8002150:	4607      	mov	r7, r0
 8002152:	db01      	blt.n	8002158 <_malloc_r+0x1c>
 8002154:	42a9      	cmp	r1, r5
 8002156:	d905      	bls.n	8002164 <_malloc_r+0x28>
 8002158:	230c      	movs	r3, #12
 800215a:	2600      	movs	r6, #0
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	4630      	mov	r0, r6
 8002160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002164:	4e2e      	ldr	r6, [pc, #184]	; (8002220 <_malloc_r+0xe4>)
 8002166:	f000 f89d 	bl	80022a4 <__malloc_lock>
 800216a:	6833      	ldr	r3, [r6, #0]
 800216c:	461c      	mov	r4, r3
 800216e:	bb34      	cbnz	r4, 80021be <_malloc_r+0x82>
 8002170:	4629      	mov	r1, r5
 8002172:	4638      	mov	r0, r7
 8002174:	f7ff ffc2 	bl	80020fc <sbrk_aligned>
 8002178:	1c43      	adds	r3, r0, #1
 800217a:	4604      	mov	r4, r0
 800217c:	d14d      	bne.n	800221a <_malloc_r+0xde>
 800217e:	6834      	ldr	r4, [r6, #0]
 8002180:	4626      	mov	r6, r4
 8002182:	2e00      	cmp	r6, #0
 8002184:	d140      	bne.n	8002208 <_malloc_r+0xcc>
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	4631      	mov	r1, r6
 800218a:	4638      	mov	r0, r7
 800218c:	eb04 0803 	add.w	r8, r4, r3
 8002190:	f000 f878 	bl	8002284 <_sbrk_r>
 8002194:	4580      	cmp	r8, r0
 8002196:	d13a      	bne.n	800220e <_malloc_r+0xd2>
 8002198:	6821      	ldr	r1, [r4, #0]
 800219a:	3503      	adds	r5, #3
 800219c:	1a6d      	subs	r5, r5, r1
 800219e:	f025 0503 	bic.w	r5, r5, #3
 80021a2:	3508      	adds	r5, #8
 80021a4:	2d0c      	cmp	r5, #12
 80021a6:	bf38      	it	cc
 80021a8:	250c      	movcc	r5, #12
 80021aa:	4638      	mov	r0, r7
 80021ac:	4629      	mov	r1, r5
 80021ae:	f7ff ffa5 	bl	80020fc <sbrk_aligned>
 80021b2:	3001      	adds	r0, #1
 80021b4:	d02b      	beq.n	800220e <_malloc_r+0xd2>
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	442b      	add	r3, r5
 80021ba:	6023      	str	r3, [r4, #0]
 80021bc:	e00e      	b.n	80021dc <_malloc_r+0xa0>
 80021be:	6822      	ldr	r2, [r4, #0]
 80021c0:	1b52      	subs	r2, r2, r5
 80021c2:	d41e      	bmi.n	8002202 <_malloc_r+0xc6>
 80021c4:	2a0b      	cmp	r2, #11
 80021c6:	d916      	bls.n	80021f6 <_malloc_r+0xba>
 80021c8:	1961      	adds	r1, r4, r5
 80021ca:	42a3      	cmp	r3, r4
 80021cc:	6025      	str	r5, [r4, #0]
 80021ce:	bf18      	it	ne
 80021d0:	6059      	strne	r1, [r3, #4]
 80021d2:	6863      	ldr	r3, [r4, #4]
 80021d4:	bf08      	it	eq
 80021d6:	6031      	streq	r1, [r6, #0]
 80021d8:	5162      	str	r2, [r4, r5]
 80021da:	604b      	str	r3, [r1, #4]
 80021dc:	4638      	mov	r0, r7
 80021de:	f104 060b 	add.w	r6, r4, #11
 80021e2:	f000 f865 	bl	80022b0 <__malloc_unlock>
 80021e6:	f026 0607 	bic.w	r6, r6, #7
 80021ea:	1d23      	adds	r3, r4, #4
 80021ec:	1af2      	subs	r2, r6, r3
 80021ee:	d0b6      	beq.n	800215e <_malloc_r+0x22>
 80021f0:	1b9b      	subs	r3, r3, r6
 80021f2:	50a3      	str	r3, [r4, r2]
 80021f4:	e7b3      	b.n	800215e <_malloc_r+0x22>
 80021f6:	6862      	ldr	r2, [r4, #4]
 80021f8:	42a3      	cmp	r3, r4
 80021fa:	bf0c      	ite	eq
 80021fc:	6032      	streq	r2, [r6, #0]
 80021fe:	605a      	strne	r2, [r3, #4]
 8002200:	e7ec      	b.n	80021dc <_malloc_r+0xa0>
 8002202:	4623      	mov	r3, r4
 8002204:	6864      	ldr	r4, [r4, #4]
 8002206:	e7b2      	b.n	800216e <_malloc_r+0x32>
 8002208:	4634      	mov	r4, r6
 800220a:	6876      	ldr	r6, [r6, #4]
 800220c:	e7b9      	b.n	8002182 <_malloc_r+0x46>
 800220e:	230c      	movs	r3, #12
 8002210:	4638      	mov	r0, r7
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	f000 f84c 	bl	80022b0 <__malloc_unlock>
 8002218:	e7a1      	b.n	800215e <_malloc_r+0x22>
 800221a:	6025      	str	r5, [r4, #0]
 800221c:	e7de      	b.n	80021dc <_malloc_r+0xa0>
 800221e:	bf00      	nop
 8002220:	20000160 	.word	0x20000160

08002224 <_realloc_r>:
 8002224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002228:	4680      	mov	r8, r0
 800222a:	4614      	mov	r4, r2
 800222c:	460e      	mov	r6, r1
 800222e:	b921      	cbnz	r1, 800223a <_realloc_r+0x16>
 8002230:	4611      	mov	r1, r2
 8002232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002236:	f7ff bf81 	b.w	800213c <_malloc_r>
 800223a:	b92a      	cbnz	r2, 8002248 <_realloc_r+0x24>
 800223c:	f7ff ff16 	bl	800206c <_free_r>
 8002240:	4625      	mov	r5, r4
 8002242:	4628      	mov	r0, r5
 8002244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002248:	f000 f838 	bl	80022bc <_malloc_usable_size_r>
 800224c:	4284      	cmp	r4, r0
 800224e:	4607      	mov	r7, r0
 8002250:	d802      	bhi.n	8002258 <_realloc_r+0x34>
 8002252:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002256:	d812      	bhi.n	800227e <_realloc_r+0x5a>
 8002258:	4621      	mov	r1, r4
 800225a:	4640      	mov	r0, r8
 800225c:	f7ff ff6e 	bl	800213c <_malloc_r>
 8002260:	4605      	mov	r5, r0
 8002262:	2800      	cmp	r0, #0
 8002264:	d0ed      	beq.n	8002242 <_realloc_r+0x1e>
 8002266:	42bc      	cmp	r4, r7
 8002268:	4622      	mov	r2, r4
 800226a:	4631      	mov	r1, r6
 800226c:	bf28      	it	cs
 800226e:	463a      	movcs	r2, r7
 8002270:	f7ff fed4 	bl	800201c <memcpy>
 8002274:	4631      	mov	r1, r6
 8002276:	4640      	mov	r0, r8
 8002278:	f7ff fef8 	bl	800206c <_free_r>
 800227c:	e7e1      	b.n	8002242 <_realloc_r+0x1e>
 800227e:	4635      	mov	r5, r6
 8002280:	e7df      	b.n	8002242 <_realloc_r+0x1e>
	...

08002284 <_sbrk_r>:
 8002284:	b538      	push	{r3, r4, r5, lr}
 8002286:	2300      	movs	r3, #0
 8002288:	4d05      	ldr	r5, [pc, #20]	; (80022a0 <_sbrk_r+0x1c>)
 800228a:	4604      	mov	r4, r0
 800228c:	4608      	mov	r0, r1
 800228e:	602b      	str	r3, [r5, #0]
 8002290:	f7ff fb1a 	bl	80018c8 <_sbrk>
 8002294:	1c43      	adds	r3, r0, #1
 8002296:	d102      	bne.n	800229e <_sbrk_r+0x1a>
 8002298:	682b      	ldr	r3, [r5, #0]
 800229a:	b103      	cbz	r3, 800229e <_sbrk_r+0x1a>
 800229c:	6023      	str	r3, [r4, #0]
 800229e:	bd38      	pop	{r3, r4, r5, pc}
 80022a0:	20000168 	.word	0x20000168

080022a4 <__malloc_lock>:
 80022a4:	4801      	ldr	r0, [pc, #4]	; (80022ac <__malloc_lock+0x8>)
 80022a6:	f000 b811 	b.w	80022cc <__retarget_lock_acquire_recursive>
 80022aa:	bf00      	nop
 80022ac:	2000016c 	.word	0x2000016c

080022b0 <__malloc_unlock>:
 80022b0:	4801      	ldr	r0, [pc, #4]	; (80022b8 <__malloc_unlock+0x8>)
 80022b2:	f000 b80c 	b.w	80022ce <__retarget_lock_release_recursive>
 80022b6:	bf00      	nop
 80022b8:	2000016c 	.word	0x2000016c

080022bc <_malloc_usable_size_r>:
 80022bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022c0:	1f18      	subs	r0, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bfbc      	itt	lt
 80022c6:	580b      	ldrlt	r3, [r1, r0]
 80022c8:	18c0      	addlt	r0, r0, r3
 80022ca:	4770      	bx	lr

080022cc <__retarget_lock_acquire_recursive>:
 80022cc:	4770      	bx	lr

080022ce <__retarget_lock_release_recursive>:
 80022ce:	4770      	bx	lr

080022d0 <_init>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	bf00      	nop
 80022d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d6:	bc08      	pop	{r3}
 80022d8:	469e      	mov	lr, r3
 80022da:	4770      	bx	lr

080022dc <_fini>:
 80022dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022de:	bf00      	nop
 80022e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022e2:	bc08      	pop	{r3}
 80022e4:	469e      	mov	lr, r3
 80022e6:	4770      	bx	lr
